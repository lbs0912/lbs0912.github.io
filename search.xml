<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode题解-006</title>
    <url>/2020/05/12/leetcode-006/</url>
    <content><![CDATA[<ul>
<li>记录LeetCode题目笔记，汇总LeetCode解答记录</li>
</ul>
<a id="more"></a>





<h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><ul>
<li>2020/02/29，撰写</li>
<li>2020/05/12，整理完成</li>
</ul>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul>
<li><a href="https://leetcode-cn.com/problems/reverse-string/" target="_blank" rel="noopener">LeetCode-344. 反转字符串</a></li>
<li><a href="https://leetcode-cn.com/problems/count-primes/" target="_blank" rel="noopener">LeetCode-204.Count Primes</a></li>
<li><a href="https://leetcode-cn.com/problems/relative-ranks/" target="_blank" rel="noopener">LeetCode-506. 相对名次</a></li>
<li><a href="https://leetcode-cn.com/problems/rotate-list/" target="_blank" rel="noopener">LeetCode-61. 旋转链表</a></li>
<li><a href="https://leetcode-cn.com/problems/create-target-array-in-the-given-order/" target="_blank" rel="noopener">LeetCode-1389. 按既定顺序创建目标数组</a></li>
</ul>
<h2 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344. 反转字符串"></a>344. 反转字符串</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode-cn.com/problems/reverse-string/" target="_blank" rel="noopener">LeetCode-344. 反转字符串</a></li>
</ul>
<p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>char[]</code> 的形式给出。</p>
<p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 <code>O(1)</code> 的额外空间解决这一问题。</p>
<p>你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p>
<p>示例 1</p>
<pre><code>输入：[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]
输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</code></pre><p>示例 2</p>
<pre><code>输入：[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]
输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</code></pre><h3 id="Approach-1"><a href="#Approach-1" class="headerlink" title="Approach 1"></a>Approach 1</h3><h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//国内版leetcode-cn</span></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> reverseString(char[] s)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> l=<span class="number">0</span>,r=s.length<span class="number">-1</span>;l&lt;r;l++,r--)&#123;</span><br><span class="line">            char temp = s[l];</span><br><span class="line">            s[l] = s[r];</span><br><span class="line">            s[r] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//国外版 leetcode</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    	StringBuffer s1 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i = s.length()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    	&#123;</span><br><span class="line">    		s1.append(s.charAt(i));</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> s1.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>C++ 实现1：基本方法</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>,r=len<span class="number">-1</span>;l&lt;r;l++,r--)&#123;</span><br><span class="line">            <span class="keyword">char</span> temp = s[r];</span><br><span class="line">            s[r] = s[l];</span><br><span class="line">            s[l] = temp;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>C++ 实现2：采用STL库中的 <code>reverse()</code> 函数</li>
</ul>
<blockquote>
<p><code>template &lt; BidirectionalIterator&gt; void reverse (BidirectionalIterator first, BidirectionalIterator last);</code> </p>
<p>Reverses the order of the elements in the range [first,last).<br>The function calls <code>iter_swap</code> to swap the elements to their new locations.</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//国内版leetcode-cn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        reverse(s.begin(), s.end());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//国外版 leetcode</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">reverseString</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        reverse(s.begin(),s.end());</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>string.begin()</code>和 <code>string.end()</code>使用了迭代器操作。</p>
<ul>
<li>JS： 使用 <code>myString.split(&quot;&quot;).reverse().join(&quot;&quot;)</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p>先使用 <code>split()</code> 将字符串转化为数组，再调用数组的 <code>reverse()</code> 方法反转数组，最后使用 <code>join()</code> 方法将数组转化为字符串，使用Demo如下所示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"LiuBaoshuai"</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);  <span class="comment">// LiuBaoshuai</span></span><br><span class="line"><span class="built_in">console</span>.log(newStr);  <span class="comment">// iauhsoaBuiL</span></span><br></pre></td></tr></table></figure>



<h2 id="204-计数质数"><a href="#204-计数质数" class="headerlink" title="204. 计数质数"></a>204. 计数质数</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode-cn.com/problems/count-primes/" target="_blank" rel="noopener">LeetCode-204.Count Primes</a></li>
</ul>
<p>统计所有小于非负整数 n 的质数的数量。</p>
<p>示例</p>
<pre><code>输入: 10
输出: 4
解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</code></pre><p>提示1</p>
<ul>
<li>Let’s start with a <code>isPrime</code> function. To determine if a number is prime, we need to check if it is not divisible by any number less than n. The runtime complexity of isPrime function would be O(n) and hence counting the total prime numbers up to n would be O(n^2). Could we do better?</li>
<li>判断一个数是否是质数，我们需要判断它是否可以被任意一个比它小的数字整除。因此判断一个数是否是质数的时间复杂度将是 <code>O(n)</code>。因此，计数质数的时间复杂度将是 <code>O(n^2)</code></li>
</ul>
<p>提示2</p>
<ul>
<li>As we know the number must not be divisible by any number &gt; <code>n/2</code>, we can immediately cut the total iterations half by dividing only up to <code>n/2</code>. Could we still do better? </li>
<li>考虑一个数 <code>number</code>的最大因数，因为 <code>num=1*num=2*p</code>，因此，如果 <code>num</code> 可以被2整除，则p的最大值为 <code>num/2</code>。因此，我们在判断质数的循环条件，可以从<code>[1,num)</code> 缩减至 <code>[1,num/2)</code>。  </li>
</ul>
<p>提示3</p>
<ul>
<li>Let’s write down all of 12’s factors（让我们写下数字12的所有因数分解表达式）</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> × <span class="number">6</span> = <span class="number">12</span></span><br><span class="line"><span class="number">3</span> × <span class="number">4</span> = <span class="number">12</span></span><br><span class="line"><span class="number">4</span> × <span class="number">3</span> = <span class="number">12</span></span><br><span class="line"><span class="number">6</span> × <span class="number">2</span> = <span class="number">12</span></span><br></pre></td></tr></table></figure>

<ul>
<li>As you can see, calculations of <code>4 × 3</code> and <code>6 × 2</code> are not necessary. Therefore, we only need to consider factors up to <code>√n</code> because, if <code>n</code> is divisible by some number <code>p</code>, then n = p × q and since p ≤ q, we could derive that <code>p ≤ √n</code>.</li>
<li>可以看到，计算 <code>4 × 3</code> 和 <code>6 × 2</code> 是没有必要的。我们只需要考虑因数小于等于 <code>√n</code> 的情况即可。因此，我们在判断质数的循环条件，可以从<code>[1,num/2)</code> 缩减至 <code>[1,√n]</code>。</li>
<li>Our total runtime has now improved to <code>O(n^1.5)</code>, which is slightly better. Is there a faster approach?</li>
<li>综上，我们的时间复杂度可以优化到 <code>O(n^1.5)</code>。那么还能继续提升优化吗？</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isPrime(i)) count++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   <span class="comment">// Loop's ending condition is i * i &lt;= num instead of i &lt;= sqrt(num)</span></span><br><span class="line">   <span class="comment">// to avoid repeatedly calling an expensive function sqrt().</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= num; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (num % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提示4</p>
<ul>
<li>The <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" target="_blank" rel="noopener">Sieve of Eratosthenes</a> is one of the most efficient ways to find all prime numbers up to n. But don’t let that name scare you, I promise that the concept is surprisingly simple.</li>
<li><a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" target="_blank" rel="noopener">Sieve of Eratosthenes</a> 是目前计算质数最高效的方法之一。不要担心，我保证这个概念和方法时十分简单的。</li>
</ul>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/leetcode/Sieve_of_Eratosthenes_animation.gif" alt="Sieve_of_Eratosthenes_animation.gif"></p>
<ul>
<li>We start off with a table of n numbers. Let’s look at the first number, 2. We know all multiples of 2 must not be primes, so we mark them off as non-primes. Then we look at the next number, 3. Similarly, all multiples of 3 such as 3 × 2 = 6, 3 × 3 = 9, … must not be primes, so we mark them off as well. Now we look at the next number, 4, which was already marked off. What does this tell you? Should you mark off all multiples of 4 as well?</li>
<li>4 is not a prime because it is divisible by 2, which means all multiples of 4 must also be divisible by 2 and were already marked off. So we can skip 4 immediately and go to the next number, 5. Now, all multiples of 5 such as 5 × 2 = 10, 5 × 3 = 15, 5 × 4 = 20, 5 × 5 = 25, … can be marked off. There is a slight optimization here, we do not need to start from 5 × 2 = 10. Where should we start marking off?</li>
<li>让我们从一个包含 <code>n</code> 个数字的列表开始。首先看下第1个数字 <code>2</code>，我们知道 <code>2</code> 的倍数肯定不是质数，因此我们可以将它们标记为非质数。</li>
<li>之后，再看第2个数字 <code>3</code>，同样 <code>3</code> 的倍数也可以被标记为非质数。</li>
<li>之后，再看第3个数字 <code>4</code>，因为数字 <code>4</code> 是数字 <code>2</code> 的倍数，已经被标记为了非质数。因为 <code>4</code> 的倍数一定是 <code>2</code> 的倍数，即 <code>4</code> 的倍数已经被标记了，所以我们可以跳过数字 <code>4</code>，去看下一个数字 <code>5</code>。</li>
</ul>
<p>提示5</p>
<ul>
<li>In fact, we can mark off multiples of 5 starting at 5 × 5 = 25, because 5 × 2 = 10 was already marked off by multiple of 2, similarly 5 × 3 = 15 was already marked off by multiple of 3. Therefore, if the current number is p, we can always mark off multiples of p starting at <code>p^2</code>, then in increments of p: p^2 + p, p^2 + 2p, … Now what should be the terminating loop condition?</li>
<li>对于数字 <code>5</code> 的判断，此处有一个小优化项。我们真的需要从 <code>5</code> 的倍数 <code>10</code>，<code>15</code>，<code>20</code> 开始标记吗？其实是没必要的，因为数字 <code>10=2*5</code>，<code>15=3*5</code>，<code>20=4*5</code>，它们已经被标记处理了。总结可以发现，我们从 <code>25=5*5</code> 开始判断即可。即我们开始判断的起点是 <code>p^2</code>，后续标记为 <code>p^2 + p</code>， <code>p^2 + 2p</code>， <code>...</code></li>
</ul>
<p>提示6</p>
<ul>
<li>It is easy to say that the terminating loop condition is <code>p &lt; n</code>, which is certainly correct but not efficient. </li>
<li>Yes, the terminating loop condition can be <code>p &lt; √n</code>, as all <code>non-primes ≥ √n</code> must have already been marked off. When the loop terminates, all the numbers in the table that are non-marked are prime.</li>
<li>很容易发现，循环终止条件是 <code>p &lt; n</code>，但这个终止条件仅仅是正确的，不是最高效的。</li>
<li>实际上，循环终止条件应该是是 <code>p &lt;= √n</code>，因为所有大于 <code>√n</code> 的因数已经被标记处理了。</li>
<li>当上述循环判断结束后，所有没有被标记的数字就是质数。</li>
</ul>
<p>提示7</p>
<ul>
<li>The Sieve of Eratosthenes uses an extra <code>O(n)</code> memory and its runtime complexity is <code>O(nlogn)</code>. For the more mathematically inclined readers, you can read more about its algorithm complexity on <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes#Algorithm_complexity" target="_blank" rel="noopener">Wikipedia</a>.</li>
<li><code>Sieve of Eratosthenes</code> 方法的空间复杂度是<code>O(n)</code>，时间复杂度是 <code>O(nlogn)</code>，更多数学推导可参考<a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes#Algorithm_complexity" target="_blank" rel="noopener">Wikipedia</a>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">boolean</span>[] isPrime = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">      isPrime[i] = <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// Loop's ending condition is i * i &lt; n instead of i &lt; sqrt(n)</span></span><br><span class="line">   <span class="comment">// to avoid repeatedly calling an expensive function sqrt().</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!isPrime[i]) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i * i; j &lt; n; j += i) &#123;</span><br><span class="line">         isPrime[j] = <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isPrime[i]) count++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Approach-1-参考题目提示使用Sieve-of-Eratosthenes"><a href="#Approach-1-参考题目提示使用Sieve-of-Eratosthenes" class="headerlink" title="Approach 1-参考题目提示使用Sieve of Eratosthenes"></a>Approach 1-参考题目提示使用Sieve of Eratosthenes</h3><h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>参考题目提示，使用 <code>Sieve of Eratosthenes</code> 方法求解。</p>
<h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">boolean</span>[] isPrime = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">          isPrime[i] = <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// Loop's ending condition is i * i &lt; n instead of i &lt; sqrt(n)</span></span><br><span class="line">       <span class="comment">// to avoid repeatedly calling an expensive function sqrt().</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt; n; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!isPrime[i]) <span class="keyword">continue</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j = i * i; j &lt; n; j += i) &#123;</span><br><span class="line">             isPrime[j] = <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (isPrime[i]) count++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="506-相对名次"><a href="#506-相对名次" class="headerlink" title="506. 相对名次"></a>506. 相对名次</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode-cn.com/problems/relative-ranks/" target="_blank" rel="noopener">LeetCode-506. 相对名次</a></li>
</ul>
<h3 id="Approach-1-Map映射"><a href="#Approach-1-Map映射" class="headerlink" title="Approach 1-Map映射"></a>Approach 1-Map映射</h3><h4 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h4><p>很自然的会想到对数组进行排序。但直接排序的话，会丢失数组原有的顺序。因此，可以使用 <code>Map</code> 数据结构，维护一个分数和名次的映射关系。</p>
<h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String[] findRelativeRanks(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] numArrCopy = Arrays.copyOf(nums,nums.length);</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=nums.length;i&lt;nums.length;i++,j--)&#123;</span><br><span class="line">            map.put(nums[i],j);</span><br><span class="line">        &#125;</span><br><span class="line">        String [] res = <span class="keyword">new</span> String[map.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numArrCopy.length;i++)&#123;</span><br><span class="line">            Integer j = map.get(numArrCopy[i]);</span><br><span class="line">            <span class="keyword">switch</span>(j)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    res[i] = <span class="string">"Gold Medal"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    res[i] = <span class="string">"Silver Medal"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    res[i] = <span class="string">"Bronze Medal"</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    res[i] = j.toString();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>C++</li>
</ul>
<p>C++中，借助 <code>pair&lt;int,int&gt;</code> 数据结构实现。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; findRelativeRanks(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; vec;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res(nums.size());</span><br><span class="line">        <span class="built_in">string</span> ranks[<span class="number">3</span>] = &#123;<span class="string">"Gold Medal"</span>, <span class="string">"Silver Medal"</span>, <span class="string">"Bronze Medal"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            vec.push_back(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(i,nums[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> comp = [](<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&amp; p1,<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&amp; p2)&#123;</span><br><span class="line">        	<span class="keyword">return</span> p1.second &gt;p2.second;</span><br><span class="line">        &#125;;</span><br><span class="line">        sort(vec.begin(),vec.end(),comp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">        	<span class="keyword">if</span>(i&lt;<span class="number">3</span>)&#123;</span><br><span class="line">        		res[vec[i].first] = ranks[i];</span><br><span class="line">        	&#125;</span><br><span class="line">        	<span class="keyword">else</span>&#123;</span><br><span class="line">        		res[vec[i].first] = to_string(i+<span class="number">1</span>);</span><br><span class="line">        	&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<ul>
<li>JS</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;string[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findRelativeRanks = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//复制数组</span></span><br><span class="line">    <span class="keyword">var</span> sortedNums = nums.slice(<span class="number">0</span>);</span><br><span class="line">    sortedNums.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;  <span class="comment">//降序</span></span><br><span class="line">        <span class="keyword">return</span> b-a; </span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> sortedNumsMapping = &#123;&#125;;</span><br><span class="line">    sortedNums.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el,index</span>)</span>&#123;</span><br><span class="line">        sortedNumsMapping[el] = (index+<span class="number">1</span>).toString();</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    res = nums.map(<span class="function"><span class="keyword">function</span>(<span class="params">el,index</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(sortedNumsMapping[el] === <span class="string">'1'</span>)        <span class="keyword">return</span> <span class="string">"Gold Medal"</span>;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(sortedNumsMapping[el] === <span class="string">'2'</span> ) <span class="keyword">return</span> <span class="string">"Silver Medal"</span>;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(sortedNumsMapping[el] === <span class="string">'3'</span> ) <span class="keyword">return</span> <span class="string">"Bronze Medal"</span>;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">return</span> (sortedNumsMapping[el]);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>




<h2 id="61-旋转链表"><a href="#61-旋转链表" class="headerlink" title="61. 旋转链表"></a>61. 旋转链表</h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode-cn.com/problems/rotate-list/" target="_blank" rel="noopener">LeetCode-61. 旋转链表</a></li>
</ul>
<h3 id="Approach-1-构造环形链表"><a href="#Approach-1-构造环形链表" class="headerlink" title="Approach 1-构造环形链表"></a>Approach 1-构造环形链表</h3><h4 id="Analysis-3"><a href="#Analysis-3" class="headerlink" title="Analysis"></a>Analysis</h4><p>查看 <code>leetcode-cn</code> 官方题解，求解本题。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/leetcode/leetcode-61-rotate-list-1.png" alt=""></p>
<p>结合上图分析</p>
<ol>
<li>先将链表闭合成环形链表</li>
<li>将链表每个节点向右移动 k 个位置，意味着链表头节点的移动</li>
<li>移动结束后，找到新的链表头节点和尾节点，并断开链表</li>
</ol>
<p>不难发现，若移动位置小于一圈时（<code>n&lt;k</code>），新的链表头节点在 <code>n-k</code>处，新的链表尾节点在 <code>n-k-1</code> 处。若移动位置大于一圈（<code>n&lt;k</code>），移动一整圈对结果并无影响。</p>
<p>因此，可以总结如下</p>
<ul>
<li>新的链表头节点在 <code>n - k%n</code> 处</li>
<li>新的链表尾节点在 <code>n - k%n - 1</code> 处</li>
</ul>
<p>算法实现思路如下</p>
<ol>
<li>找到旧的尾部，并将其与链表头相连 <code>old_tail.next = head</code>，整个链表闭合成环，同时计算出链表的长度 n</li>
<li>找到新的尾部，第 (<code>n - k % n - 1</code>) 个节点 ，新的链表头是第 (<code>n - k % n</code>) 个节点</li>
<li>断开环 <code>new_tail.next = null</code>，并返回新的链表头 <code>new_head</code>。</li>
</ol>
<p>复杂度分析</p>
<ul>
<li>时间复杂度：<code>O(N)</code>，其中 N 是链表中的元素个数</li>
<li>空间复杂度：<code>O(1)</code>，因为只需要常数的空间</li>
</ul>
<h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ListNode <span class="title">rotateRight</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// base cases</span></span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// close the linked list into the ring</span></span><br><span class="line">    ListNode old_tail = head;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">for</span>(n = <span class="number">1</span>; old_tail.next != <span class="keyword">null</span>; n++)</span><br><span class="line">      old_tail = old_tail.next;</span><br><span class="line">    old_tail.next = head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find new tail : (n - k % n - 1)th node</span></span><br><span class="line">    <span class="comment">// and new head : (n - k % n)th node</span></span><br><span class="line">    ListNode new_tail = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - k % n - <span class="number">1</span>; i++)</span><br><span class="line">      new_tail = new_tail.next;</span><br><span class="line">    ListNode new_head = new_tail.next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// break the ring</span></span><br><span class="line">    new_tail.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_head;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="1389-按既定顺序创建目标数组"><a href="#1389-按既定顺序创建目标数组" class="headerlink" title="1389. 按既定顺序创建目标数组"></a>1389. 按既定顺序创建目标数组</h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode-cn.com/problems/create-target-array-in-the-given-order/" target="_blank" rel="noopener">LeetCode-1389. 按既定顺序创建目标数组</a></li>
</ul>
<h3 id="Approach-1-链表实现"><a href="#Approach-1-链表实现" class="headerlink" title="Approach 1-链表实现"></a>Approach 1-链表实现</h3><h4 id="Analysis-4"><a href="#Analysis-4" class="headerlink" title="Analysis"></a>Analysis</h4><ol>
<li>查看题目的限制条件 <code>0 &lt;= index[i] &lt;= i</code>，可知在插入第 <code>i</code> 个元素时，索引最多为最后一个元素。</li>
<li>分析题目可知，要在当前的下标从 0 开始长度为 n 的顺序表的 <code>i</code> 位置插入元素，就要先把原来表中区间 <code>[i, n]</code> 中的元素从全部向后移动一位，然后在 <code>i</code> 位置插入带插入的元素。</li>
<li>对于 Java 而言，可以使用 <code>ArrayList</code> 数据结构实现，其 <code>add(int index, E element)</code> 源码如下。</li>
</ol>
<p>可以发现，在调用 <code>add(int index, E element)</code>，会先检查是否需要扩容。若需要的话，会将 <code>index</code> 及其之后的元素都向后移动一位，并将新元素插入到 <code>idnex</code> 处。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Inserts the specified element at the specified position in this</span></span><br><span class="line"><span class="comment"> * list. Shifts the element currently at that position (if any) and</span></span><br><span class="line"><span class="comment"> * any subsequent elements to the right (adds one to their indices).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index index at which the specified element is to be inserted</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element element to be inserted</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line">    <span class="comment">// 1. 检测是否需要扩容</span></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">// 2. 将 index 及其之后的所有元素都向后移一位</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                     size - index);</span><br><span class="line">    <span class="comment">// 3. 将新元素插入至 index 处</span></span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] createTargetArray(<span class="keyword">int</span>[] nums, <span class="keyword">int</span>[] index) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            res.add(index[i],nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] target = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            target[i] = res.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive入门篇——Hive安装配置，数据存储，表操作</title>
    <url>/2020/04/22/hive-basic-1/</url>
    <content><![CDATA[<ul>
<li>本文为Hive入门篇，主要记录Hive安装配置，数据存储和表操作。</li>
</ul>
<a id="more"></a>



<h2 id="学习资料汇总"><a href="#学习资料汇总" class="headerlink" title="学习资料汇总"></a>学习资料汇总</h2><ul>
<li><a href="http://hive.apache.org/" target="_blank" rel="noopener">Hive官网</a></li>
<li><a href="https://cwiki.apache.org/confluence/display/Hive#Home-UserDocumentation" target="_blank" rel="noopener">User Documentation - Apache Hive</a></li>
<li><a href="http://blog.fens.me/hadoop-hive-roadmap/" target="_blank" rel="noopener">Hive学习路线图谱 | 粉丝日志</a></li>
<li><a href="http://blog.fens.me/hadoop-hive-intro/" target="_blank" rel="noopener">Hive安装及使用攻略 | 粉丝日志</a></li>
</ul>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><blockquote>
<p>Hive是建立在 Hadoop 上的数据仓库基础构架。</p>
</blockquote>
<p>Hive 是 Hadoop 家族中一款数据仓库产品，Hive 最大的特点就是提供了类 SQL 的语法，封装了底层的 MapReduce 过程，让有 SQL 基础的业务人员，也可以直接利用 Hadoop 进行大数据的操作。就是这一个点，解决了原数据分析人员对于大数据分析的瓶颈。</p>
<p><strong>Hive 可以将结构化的数据文件映射为一张数据库表，并提供完整的 SQL 查询功能，可以将 SQL 语句转换为 MapReduce 任务运行。Hive 定义了简单的类 SQL 查询语言，称为 HQL</strong>。</p>
<p>Hive 的知识图谱如下图所示。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/BigData2020/hadoop-hive-roadmap.png" alt=""></p>
<p>Hive 已经用类 SQL 的语法封装了 MapReduce 过程，这个封装过程就是 MapReduce 的标准化的过程。</p>
<p>我们在做业务或者工具时，会针对场景用逻辑封装，这里的第2层封装是在Hive之上的封装。在第2层封装时，我们要尽可能多的屏蔽 Hive 的细节，让接口单一化，低少灵活性，再次精简 HQL 的语法结构。只满足我们的系统要求，专用的接口。</p>
<p>在使用二次封装的接口时，我们已经可以不用知道 Hive 是什么, 更不用知道 Hadoop 是什么。只需要知道，SQL查询(SQL92标准)，怎么写效率高，怎么写可以完成业务需要就可以了。</p>
<p>当我们完成了 Hive 的二次封装后，我们可以构建标准化的 MapReduce 开发过程。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/BigData2020/hive-architect-2.jpg" alt=""></p>
<p>Hive 不适合用于联机（<code>online</code>）事务处理，也不提供实时查询功能。它最适合用在基于大量不可变数据的批处理作业。Hive特点是可伸缩（在Hadoop的集群上动态地添加设备），可扩展，容错，输入格式的松散耦合。</p>
<p>Hive 的最佳使用场合是大数据集的批处理作业，例如，网络日志分析。</p>
<h3 id="Hive和关系型数据库的区别"><a href="#Hive和关系型数据库的区别" class="headerlink" title="Hive和关系型数据库的区别"></a>Hive和关系型数据库的区别</h3><p>Hive 在很多方面与传统关系数据库类似（例如支持 SQL 接口），但是其底层对 HDFS 和 MapReduce 的依赖意味着它的体系结构有别于传统关系数据库，而这些区别又影响着 Hive 所支持的特性，进而影响着 Hive 的使用。</p>
<p>下面列举一些简单区别</p>
<ul>
<li>Hive 和关系数据库存储文件的系统不同，Hive 使用的是 Hadoop 的HDFS（Hadoop的分布式文件系统），关系数据库则是服务器本地的文件系统</li>
<li>Hive 使用的计算模型是 MapReduce，而关系数据库则是自己设计的计算模型</li>
<li>关系数据库都是为实时查询的业务进行设计的，而 Hive 则是为海量数据做数据挖掘设计的，实时性很差；实时性的区别导致 Hive 的应用场景和关系数据库有很大的不同</li>
<li>Hive 很容易扩展自己的存储能力和计算能力，这个是继承 Hadoop 的，而关系数据库在这个方面要差很多</li>
</ul>
<h2 id="Hive-安装配置"><a href="#Hive-安装配置" class="headerlink" title="Hive 安装配置"></a>Hive 安装配置</h2><p>Hive 安装参考资料如下</p>
<ul>
<li><a href="https://www.cnblogs.com/micrari/p/7067968.html" target="_blank" rel="noopener">Mac 上 Hive 环境搭建 | blog</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/70601668" target="_blank" rel="noopener">MacOS 下hive的安装与配置 | 知乎</a></li>
<li><a href="http://blog.fens.me/hadoop-hive-intro/" target="_blank" rel="noopener">Hive安装及使用攻略 | 粉丝日志</a></li>
<li><a href="https://jyzhangchn.github.io/hive.html" target="_blank" rel="noopener">mac下Hive+MySql环境配置 | blog</a></li>
<li><a href="https://www.jianshu.com/p/5c11073d19d3" target="_blank" rel="noopener">Mac Hive 配置和安装 | 简书</a></li>
</ul>
<p>此处，简单记录Hive的安装和配置步骤</p>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><ol>
<li>通过 Homebrew 安装 mysql</li>
</ol>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>mysql</span><br></pre></td></tr></table></figure>

<p>安装结束后，会有如下提示</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">We<span class="comment">'ve installed your MySQL database without a root password. To secure it run:</span></span><br><span class="line">    mysql_secure_installation</span><br><span class="line"></span><br><span class="line">MySQL <span class="keyword">is</span> configured <span class="keyword">to</span> only allow connections <span class="keyword">from</span> localhost <span class="keyword">by</span> <span class="keyword">default</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">To</span> connect run:</span><br><span class="line">    mysql -uroot</span><br><span class="line"></span><br><span class="line"><span class="keyword">To</span> have launchd start mysql now <span class="keyword">and</span> restart at login:</span><br><span class="line">  brew services start mysql</span><br><span class="line"><span class="keyword">Or</span>, <span class="keyword">if</span> you don<span class="comment">'t want/need a background service you can just run:</span></span><br><span class="line">  mysql.server start</span><br></pre></td></tr></table></figure>

<p>上述信息提示，</p>
<ul>
<li>运行 <code>brew services start mysql</code>，可以在后台启动 mysql</li>
<li>运行 <code>mysql.server start</code>，可以在前台启动 mysql（关闭控制台，服务停止）</li>
<li>运行 <code>mysql_secure_installation</code>，可以进行密码设置</li>
</ul>
<ol start="2">
<li>使用 <code>mysql --version</code> 校验 mysql 版本号</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql <span class="comment">--version</span></span><br><span class="line"></span><br><span class="line">// mysql  Ver <span class="number">8.0</span><span class="number">.19</span> <span class="keyword">for</span> osx10<span class="number">.15</span> <span class="keyword">on</span> x86_64 (Homebrew)</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>设置mysql秘密，设定密码为 <code>mysql113459</code></li>
</ol>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">brew services <span class="built_in">start</span> mysql  <span class="comment"> //设定密码前需要先启动mysql</span></span><br><span class="line"></span><br><span class="line">mysql_secure_installation</span><br><span class="line">//密码设定为 mysql113459</span><br></pre></td></tr></table></figure>



<p>MySQL 新版本中引入了密码安全级别的概念，设置低强度的密码有时会被禁止。为此可以直接指定密码安全强度，执行下述命令。</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global validate_password_policy=0;  //设置密码强度级别为low</span><br><span class="line">mysql&gt; set global validate_password_length=1;   //设置密码最小长度为4</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE 'validate_password%';    //查看密码相关参数设置</span><br><span class="line"></span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">|<span class="string"> Variable_name                        </span>|<span class="string"> Value  </span>|</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">|<span class="string"> validate_password.check_user_name    </span>|<span class="string"> ON     </span>|</span><br><span class="line">|<span class="string"> validate_password.dictionary_file    </span>|<span class="string">        </span>|</span><br><span class="line">|<span class="string"> validate_password.length             </span>|<span class="string"> 8      </span>|</span><br><span class="line">|<span class="string"> validate_password.mixed_case_count   </span>|<span class="string"> 1      </span>|</span><br><span class="line">|<span class="string"> validate_password.number_count       </span>|<span class="string"> 1      </span>|</span><br><span class="line">|<span class="string"> validate_password.policy             </span>|<span class="string"> MEDIUM </span>|</span><br><span class="line">|<span class="string"> validate_password.special_char_count </span>|<span class="string"> 1      </span>|</span><br><span class="line">|<span class="string"> validate_password_check_user_name    </span>|<span class="string"> ON     </span>|</span><br><span class="line">|<span class="string"> validate_password_dictionary_file    </span>|<span class="string">        </span>|</span><br><span class="line">|<span class="string"> validate_password_length             </span>|<span class="string"> 4      </span>|</span><br><span class="line">|<span class="string"> validate_password_mixed_case_count   </span>|<span class="string"> 1      </span>|</span><br><span class="line">|<span class="string"> validate_password_number_count       </span>|<span class="string"> 1      </span>|</span><br><span class="line">|<span class="string"> validate_password_policy             </span>|<span class="string"> LOW    </span>|</span><br><span class="line">|<span class="string"> validate_password_special_char_count </span>|<span class="string"> 1      </span>|</span><br><span class="line">+--------------------------------------+--------+</span><br></pre></td></tr></table></figure>






<p>若执行 <code>SHOW VARIABLES LIKE &#39;validate_password%&#39;;</code> 遇到 <code>Unknown system variable &#39;validate_password_policy&#39;</code> 报错信息，可以参考 <a href="https://stackoverflow.com/questions/55237257/mysql-validate-password-policy-unknown-system-variable" target="_blank" rel="noopener">MySQL validate_password_policy unknown system variable | StackOverflow</a> 进行处理。</p>
<blockquote>
<p>This problem has happened because validate_password plugin is by default NOT activated. </p>
</blockquote>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">select</span> plugin_name, plugin_status <span class="keyword">from</span> information_schema.plugins <span class="keyword">where</span> plugin_name <span class="keyword">like</span> <span class="string">'validate%'</span>;</span><br><span class="line"></span><br><span class="line">mysql&gt; install plugin validate_password soname <span class="string">'validate_password.so'</span>;</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> plugin_name, plugin_status <span class="keyword">from</span> information_schema.plugins <span class="keyword">where</span> plugin_name <span class="keyword">like</span> <span class="string">'validate%'</span>;</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">'validate_password%'</span>;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>mysql启动</li>
</ol>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">brew services <span class="built_in">start</span> mysql  <span class="comment"> //后台启动</span></span><br><span class="line"></span><br><span class="line">sudo mysql.server <span class="built_in">start</span>    <span class="comment"> //前台启动</span></span><br><span class="line"></span><br><span class="line">//若遇到权限问题，可执行下述命令</span><br><span class="line">sudo chmod -R <span class="keyword">a</span>+rwx /usr/<span class="built_in">local</span>/var/mysql</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>mysql关闭</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sudo mysql<span class="selector-class">.server</span> stop</span><br></pre></td></tr></table></figure>


<ol start="6">
<li>mysql重启</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">sudo mysql.<span class="keyword">server</span> <span class="keyword">restart</span></span><br></pre></td></tr></table></figure>


<ol start="7">
<li>查看默认数据库</li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mysql -u root -p    <span class="regexp">//</span>密码  mysql113459</span><br><span class="line"></span><br><span class="line">show databases</span><br><span class="line"></span><br><span class="line"><span class="keyword">exit</span>  <span class="regexp">//</span>退出mysql交互CI</span><br></pre></td></tr></table></figure>

<h3 id="Hive-安装"><a href="#Hive-安装" class="headerlink" title="Hive 安装"></a>Hive 安装</h3><ol>
<li>通过 Homebrew 安装 Hive</li>
</ol>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>hive</span><br></pre></td></tr></table></figure>

<p>安装结束后，会有如下提示</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">==&gt; Caveats</span><br><span class="line">Hadoop must be <span class="keyword">in</span> your path <span class="keyword">for</span> hive executable <span class="keyword">to</span> work.</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> you want <span class="keyword">to</span> use HCatalog with Pig, <span class="builtin-name">set</span> <span class="variable">$HCAT_HOME</span> <span class="keyword">in</span> your profile:</span><br><span class="line">  <span class="builtin-name">export</span> <span class="attribute">HCAT_HOME</span>=/usr/local/opt/hive/libexec/hcatalog</span><br><span class="line">==&gt; Summary</span><br><span class="line">🍺  /usr/local/Cellar/hive/3.1.2: 1,126 files, 231.8MB, built <span class="keyword">in</span> 7 seconds</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>使用 <code>hive --version</code> 校验 hive 版本号</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">lbsMacBook-<span class="string">Pro:</span>~ lbs$ hive --version</span><br><span class="line"><span class="string">SLF4J:</span> Class path contains multiple SLF4J bindings.</span><br><span class="line"><span class="string">SLF4J:</span> Found binding <span class="keyword">in</span> [<span class="string">jar:</span><span class="string">file:</span><span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>hive<span class="regexp">/3.1.2/</span>libexec<span class="regexp">/lib/</span>log4j-slf4j-impl<span class="number">-2.10</span><span class="number">.0</span>.jar!<span class="regexp">/org/</span>slf4j<span class="regexp">/impl/</span>StaticLoggerBinder.<span class="keyword">class</span>]</span><br><span class="line"><span class="string">SLF4J:</span> Found binding <span class="keyword">in</span> [<span class="string">jar:</span><span class="string">file:</span><span class="regexp">/Library/</span>hadoop<span class="number">-2.10</span><span class="number">.0</span><span class="regexp">/share/</span>hadoop<span class="regexp">/common/</span>lib<span class="regexp">/slf4j-log4j12-1.7.25.jar!/</span>org<span class="regexp">/slf4j/</span>impl/StaticLoggerBinder.<span class="keyword">class</span>]</span><br><span class="line"><span class="string">SLF4J:</span> See <span class="string">http:</span><span class="comment">//www.slf4j.org/codes.html#multiple_bindings for an explanation.</span></span><br><span class="line"><span class="string">SLF4J:</span> Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class="line">Hive <span class="number">3.1</span><span class="number">.2</span></span><br><span class="line">Git <span class="string">git:</span><span class="comment">//HW13934/Users/gates/tmp/hive-branch-3.1/hive -r 8190d2be7b7165effa62bd21b7d60ef81fb0e4af</span></span><br><span class="line">Compiled by gates on Thu Aug <span class="number">22</span> <span class="number">15</span>:<span class="number">01</span>:<span class="number">18</span> PDT <span class="number">2019</span></span><br><span class="line">From source with checksum <span class="number">0492</span>c08f784b188c349f6afb1d8d9847</span><br></pre></td></tr></table></figure>


<ol start="3">
<li>hive 环境变量配置</li>
</ol>
<p>(1) 打开配置文件</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">vim ~<span class="string">/.bash_profile</span></span><br></pre></td></tr></table></figure>

<p>(2) 更新配置文件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">HIVE_HOME</span>=/usr/local/Cellar/hive/3.1.2 </span><br><span class="line"><span class="attribute">HCAT_HOME</span>=/usr/local/opt/hive/libexec/hcatalog</span><br><span class="line"><span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$&#123;HIVE_HOME&#125;/bin</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> HIVE_HOME</span><br><span class="line"><span class="builtin-name">export</span> HCAT_HOME</span><br></pre></td></tr></table></figure>

<p>(3) 使配置文件生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>


<h3 id="修改-Hive-默认元数据库"><a href="#修改-Hive-默认元数据库" class="headerlink" title="修改 Hive 默认元数据库"></a>修改 Hive 默认元数据库</h3><blockquote>
<p>默认情况下，Hive 元数据保存在内嵌的 Derby 数据库中，只能允许一个会话连接，只适合简单的测试。实际生产环境中不使用，为了支持多用户会话，则需要一个独立的元数据库，可以使用 MySQL 作为元数据库，Hive 内部对 MySQL 提供了很好的支持。</p>
</blockquote>
<ol>
<li>Hive 默认元数据库是 derby。为了方便，这里给出用 mysql 储存元数据的配置</li>
</ol>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">//创建数据库metastore</span><br><span class="line">mysql&gt; <span class="keyword">create</span> <span class="keyword">database</span> metastore; </span><br><span class="line"></span><br><span class="line">//创建用户名为hive，登录密码为Hive113459...的账户</span><br><span class="line">mysql&gt; <span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'hive'</span>@<span class="string">'localhost'</span> identified <span class="keyword">by</span> <span class="string">'Hive113459...'</span>; </span><br><span class="line"></span><br><span class="line">//给建好的数据库添加权限</span><br><span class="line">grant <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">delete</span>,<span class="keyword">alter</span>,<span class="keyword">create</span>,<span class="keyword">index</span>,references <span class="keyword">on</span> metastore.* <span class="keyword">to</span> <span class="string">'hive'</span>@<span class="string">'localhost'</span>; </span><br><span class="line"></span><br><span class="line">// 刷新权限</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>


<h3 id="Hive-配置"><a href="#Hive-配置" class="headerlink" title="Hive 配置"></a>Hive 配置</h3><ol>
<li>进入 Hive 的安装目录，创建 <code>hive-site.xml</code> 文件</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ cd /usr/local/Cellar/hive/<span class="number">3.1</span>.<span class="number">2</span>/libexec/conf</span><br><span class="line">$ cp hive-default<span class="selector-class">.xml</span><span class="selector-class">.template</span> hive-site<span class="selector-class">.xml</span>    <span class="comment">//复制提供的模板文件</span></span><br></pre></td></tr></table></figure>

<p>在配置文件中，对以下几个属性进行修改。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line">  <span class="params">&lt;name&gt;</span>javax.jdo.option.ConnectionURL<span class="params">&lt;/name&gt;</span></span><br><span class="line">  <span class="params">&lt;value&gt;</span>jdbc:mysql:<span class="comment">//localhost/metastore&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line">  <span class="params">&lt;name&gt;</span>javax.jdo.option.ConnectionDriverName<span class="params">&lt;/name&gt;</span></span><br><span class="line">  <span class="params">&lt;value&gt;</span>com.mysql.jdbc.Driver<span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line">  <span class="params">&lt;name&gt;</span>javax.jdo.option.ConnectionUserName<span class="params">&lt;/name&gt;</span></span><br><span class="line">  <span class="params">&lt;value&gt;</span>hive(上述mysql中创建的用户名)<span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line">  <span class="params">&lt;name&gt;</span>javax.jdo.option.ConnectionPassword<span class="params">&lt;/name&gt;</span></span><br><span class="line">  <span class="params">&lt;value&gt;</span>Hive113459...(上述mysql中创建的用户密码)<span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line">  <span class="params">&lt;name&gt;</span>hive.exec.local.scratchdir<span class="params">&lt;/name&gt;</span></span><br><span class="line">  <span class="params">&lt;value&gt;</span><span class="meta-keyword">/tmp/</span>hive<span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line">  <span class="params">&lt;name&gt;</span>hive.querylog.location<span class="params">&lt;/name&gt;</span></span><br><span class="line">  <span class="params">&lt;value&gt;</span><span class="meta-keyword">/tmp/</span>hive<span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line">  <span class="params">&lt;name&gt;</span>hive.downloaded.resources.dir<span class="params">&lt;/name&gt;</span></span><br><span class="line">  <span class="params">&lt;value&gt;</span><span class="meta-keyword">/tmp/</span>hive<span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line">  <span class="params">&lt;name&gt;</span>hive.server2.logging.operation.log.location<span class="params">&lt;/name&gt;</span></span><br><span class="line">  <span class="params">&lt;value&gt;</span><span class="meta-keyword">/tmp/</span>hive/operation_logs<span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>拷贝 <code>mysql-connector</code> 到 hive 的安装目录下</li>
</ol>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">$ curl -L <span class="string">'http://www.mysql.com/get/Downloads/Connector-J/mysql-connector-java-8.0.15.tar.gz/from/http://mysql.he.net/'</span> | tar xz</span><br><span class="line"></span><br><span class="line">$ cp mysql-connector-java-<span class="number">8.0</span>.<span class="number">15</span>/mysql-connector-java-<span class="number">8.0</span>.<span class="number">15</span>-bin.jar /usr/local/Cellar/hive/<span class="number">3.1</span>.<span class="number">2</span>/libexec/<span class="class"><span class="keyword">lib</span>/</span></span><br></pre></td></tr></table></figure>


<ol start="3">
<li>初始化 metastore 数据库</li>
</ol>
<p>目前直接查看 <code>metastore</code> 数据库，可以发现数据库是空的。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">show </span>databases<span class="comment">;</span></span><br><span class="line">mysql&gt; use metastore<span class="comment">;</span></span><br><span class="line">mysql&gt; <span class="keyword">show </span>tables<span class="comment">;   // empty</span></span><br></pre></td></tr></table></figure>

<p>在命令行模式（非mysql CLI）下执行下述命令，初始化 metastore 数据库</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span> schematool -initSchema -dbType mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">//Initialization script completed</span></span><br><span class="line"><span class="comment">//schemaTool completed</span></span><br></pre></td></tr></table></figure>

<p>执行完毕后，再次查看数据库，会发现如下信息</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+-------------------------------+</span><br><span class="line">|<span class="string"> Tables_in_metastore           </span>|</span><br><span class="line">+-------------------------------+</span><br><span class="line">|<span class="string"> AUX_TABLE                     </span>|</span><br><span class="line">|<span class="string"> BUCKETING_COLS                </span>|</span><br><span class="line">|<span class="string"> CDS                           </span>|</span><br><span class="line">|<span class="string"> COLUMNS_V2                    </span>|</span><br><span class="line">|<span class="string"> COMPACTION_QUEUE              </span>|</span><br><span class="line">|<span class="string"> COMPLETED_COMPACTIONS         </span>|</span><br><span class="line">|<span class="string"> COMPLETED_TXN_COMPONENTS      </span>|</span><br><span class="line">|<span class="string"> CTLGS                         </span>|</span><br><span class="line">|<span class="string"> DATABASE_PARAMS               </span>|</span><br><span class="line">|<span class="string"> DB_PRIVS                      </span>|</span><br><span class="line">|<span class="string"> DBS                           </span>|</span><br><span class="line">|<span class="string"> DELEGATION_TOKENS             </span>|</span><br><span class="line">|<span class="string"> FUNC_RU                       </span>|</span><br><span class="line">|<span class="string"> FUNCS                         </span>|</span><br><span class="line">|<span class="string"> GLOBAL_PRIVS                  </span>|</span><br><span class="line">|<span class="string"> HIVE_LOCKS                    </span>|</span><br><span class="line">|<span class="string"> I_SCHEMA                      </span>|</span><br><span class="line">|<span class="string"> IDXS                          </span>|</span><br><span class="line">|<span class="string"> INDEX_PARAMS                  </span>|</span><br><span class="line">|<span class="string"> KEY_CONSTRAINTS               </span>|</span><br><span class="line">|<span class="string"> MASTER_KEYS                   </span>|</span><br><span class="line">|<span class="string"> MATERIALIZATION_REBUILD_LOCKS </span>|</span><br><span class="line">|<span class="string"> METASTORE_DB_PROPERTIES       </span>|</span><br><span class="line">|<span class="string"> MIN_HISTORY_LEVEL             </span>|</span><br><span class="line">|<span class="string"> MV_CREATION_METADATA          </span>|</span><br><span class="line">|<span class="string"> MV_TABLES_USED                </span>|</span><br><span class="line">|<span class="string"> NEXT_COMPACTION_QUEUE_ID      </span>|</span><br><span class="line">|<span class="string"> NEXT_LOCK_ID                  </span>|</span><br><span class="line">|<span class="string"> NEXT_TXN_ID                   </span>|</span><br><span class="line">|<span class="string"> NEXT_WRITE_ID                 </span>|</span><br><span class="line">|<span class="string"> NOTIFICATION_LOG              </span>|</span><br><span class="line">|<span class="string"> NOTIFICATION_SEQUENCE         </span>|</span><br><span class="line">|<span class="string"> NUCLEUS_TABLES                </span>|</span><br><span class="line">|<span class="string"> PART_COL_PRIVS                </span>|</span><br><span class="line">|<span class="string"> PART_COL_STATS                </span>|</span><br><span class="line">|<span class="string"> PART_PRIVS                    </span>|</span><br><span class="line">|<span class="string"> PARTITION_EVENTS              </span>|</span><br><span class="line">|<span class="string"> PARTITION_KEY_VALS            </span>|</span><br><span class="line">|<span class="string"> PARTITION_KEYS                </span>|</span><br><span class="line">|<span class="string"> PARTITION_PARAMS              </span>|</span><br><span class="line">|<span class="string"> PARTITIONS                    </span>|</span><br><span class="line">|<span class="string"> REPL_TXN_MAP                  </span>|</span><br><span class="line">|<span class="string"> ROLE_MAP                      </span>|</span><br><span class="line">|<span class="string"> ROLES                         </span>|</span><br><span class="line">|<span class="string"> RUNTIME_STATS                 </span>|</span><br><span class="line">|<span class="string"> SCHEMA_VERSION                </span>|</span><br><span class="line">|<span class="string"> SD_PARAMS                     </span>|</span><br><span class="line">|<span class="string"> SDS                           </span>|</span><br><span class="line">|<span class="string"> SEQUENCE_TABLE                </span>|</span><br><span class="line">|<span class="string"> SERDE_PARAMS                  </span>|</span><br><span class="line">|<span class="string"> SERDES                        </span>|</span><br><span class="line">|<span class="string"> SKEWED_COL_NAMES              </span>|</span><br><span class="line">|<span class="string"> SKEWED_COL_VALUE_LOC_MAP      </span>|</span><br><span class="line">|<span class="string"> SKEWED_STRING_LIST            </span>|</span><br><span class="line">|<span class="string"> SKEWED_STRING_LIST_VALUES     </span>|</span><br><span class="line">|<span class="string"> SKEWED_VALUES                 </span>|</span><br><span class="line">|<span class="string"> SORT_COLS                     </span>|</span><br><span class="line">|<span class="string"> TAB_COL_STATS                 </span>|</span><br><span class="line">|<span class="string"> TABLE_PARAMS                  </span>|</span><br><span class="line">|<span class="string"> TBL_COL_PRIVS                 </span>|</span><br><span class="line">|<span class="string"> TBL_PRIVS                     </span>|</span><br><span class="line">|<span class="string"> TBLS                          </span>|</span><br><span class="line">|<span class="string"> TXN_COMPONENTS                </span>|</span><br><span class="line">|<span class="string"> TXN_TO_WRITE_ID               </span>|</span><br><span class="line">|<span class="string"> TXNS                          </span>|</span><br><span class="line">|<span class="string"> TYPE_FIELDS                   </span>|</span><br><span class="line">|<span class="string"> TYPES                         </span>|</span><br><span class="line">|<span class="string"> VERSION                       </span>|</span><br><span class="line">|<span class="string"> WM_MAPPING                    </span>|</span><br><span class="line">|<span class="string"> WM_POOL                       </span>|</span><br><span class="line">|<span class="string"> WM_POOL_TO_TRIGGER            </span>|</span><br><span class="line">|<span class="string"> WM_RESOURCEPLAN               </span>|</span><br><span class="line">|<span class="string"> WM_TRIGGER                    </span>|</span><br><span class="line">|<span class="string"> WRITE_SET                     </span>|</span><br><span class="line">+-------------------------------+</span><br><span class="line">74 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>


<h3 id="启动-Hive"><a href="#启动-Hive" class="headerlink" title="启动 Hive"></a>启动 Hive</h3><p>启动Hive前，需要先运行Hadoop。之后运行 <code>hive</code> 或者 <code>hive shell</code> 可以进入Hive Shell</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">hive </span><br><span class="line"></span><br><span class="line">//or</span><br><span class="line"> hive <span class="keyword">shell</span><span class="bash"></span></span><br><span class="line"><span class="bash"> </span></span><br><span class="line"> </span><br><span class="line">hive&gt;</span><br></pre></td></tr></table></figure>

<h3 id="可视化工具-DbVisualizer"><a href="#可视化工具-DbVisualizer" class="headerlink" title="可视化工具 DbVisualizer"></a>可视化工具 DbVisualizer</h3><ul>
<li><a href="https://www.dbvis.com/download/11.0" target="_blank" rel="noopener">DbVisualizer Software</a></li>
<li><a href="http://confluence.dbvis.com/display/UG110/Installing" target="_blank" rel="noopener">DbVisualizer User Guide</a></li>
<li><a href="http://confluence.dbvis.com/display/UG110/Installing+a+JDBC+Driver" target="_blank" rel="noopener">Installing a JDBC Driver</a></li>
<li><a href="https://www.dbvis.com/features/database-drivers/" target="_blank" rel="noopener">Supported databases and JDBC drivers Download</a></li>
<li><a href="https://juejin.im/post/5d04675051882518e845cb8f" target="_blank" rel="noopener">在mac上DbVisualizer图形化客户端配置连接Hive | Blog</a></li>
<li><a href="https://github.com/timveil/hive-jdbc-uber-jar/releases" target="_blank" rel="noopener">hive-jdbc-uber-jar | github</a></li>
</ul>
<ol>
<li><p>下载 <code>dbvis_macos_11_0_jre.dmg</code> 并执行安装</p>
</li>
<li><p>也可以下载 <code>.tar.gz</code> 包进行安装 </p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">gunzip</span> <span class="selector-tag">dbvis_unix_11_0</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">xf</span> <span class="selector-tag">dbvis_unix_11_0</span><span class="selector-class">.tar</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>点击 Docker 中 DbVisualizer图标启动，或使用如下脚本启动</li>
</ol>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">DbVisualizer/dbvis.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>从 <a href="https://github.com/timveil/hive-jdbc-uber-jar/releases" target="_blank" rel="noopener">hive-jdbc-uber-jar | github</a> 下载 <code>hive-jdbc-uber-jar</code>，放置到 <code>/Users/lbs/.dbvis/jdbc</code> 路径下，并导入到 DbVisualizer 配置中</li>
</ol>
<ol start="5">
<li>在 DbVisualizer 的偏好设置中的 <code>Specify overridden Java VM Prperties here</code> 中添加如下设置</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">-Dsun<span class="selector-class">.security</span><span class="selector-class">.krb5</span><span class="selector-class">.debug</span>=true</span><br><span class="line">-Djavax<span class="selector-class">.security</span><span class="selector-class">.auth</span><span class="selector-class">.useSubjectCredsOnly</span>=false</span><br></pre></td></tr></table></figure>



<h2 id="Hive交互式模式-CLI"><a href="#Hive交互式模式-CLI" class="headerlink" title="Hive交互式模式 CLI"></a>Hive交互式模式 CLI</h2><p>运行 <code>hive</code> 或者 <code>hive shell</code> 可以进入Hive Shell。Hive的交互模式遵循下述规则。</p>
<ol>
<li><code>quit</code>,<code>exit</code>:  退出交互式shell</li>
<li><code>reset</code>: 重置配置为默认值</li>
<li><code>set &lt;key&gt;=&lt;value&gt;</code> : 修改特定变量的值(如果变量名拼写错误，不会报错)</li>
<li><code>set</code> :  输出用户覆盖的 hive配置变量</li>
<li><code>set -v</code> : 输出所有Hadoop和Hive的配置变量</li>
<li><code>add FILE[S] *</code>, <code>add JAR[S] *</code>, <code>add ARCHIVE[S] *</code> : 添加 一个或多个 file, jar, archives到分布式缓存</li>
<li><code>list FILE[S]</code>, <code>list JAR[S]</code>, <code>list ARCHIVE[S]</code> : 输出已经添加到分布式缓存的资源</li>
<li><code>list FILE[S] *</code>, <code>list JAR[S] *</code>,<code>list ARCHIVE[S] *</code> : 检查给定的资源是否添加到分布式缓存</li>
<li><code>delete FILE[S] *</code>, <code>delete JAR[S] *</code>, <code>delete ARCHIVE[S] *</code> : 从分布式缓存删除指定的资源</li>
<li><code>! &lt;command&gt;</code> :  从 Hive shell 执行一个 shell 命令</li>
<li><code>dfs &lt;dfs command&gt;</code> :  从 Hive shell 执行一个 dfs 命令</li>
<li><code>&lt;query string&gt;</code> : 执行一个 Hive 查询，然后输出结果到标准输出</li>
<li><code>source FILE &lt;filepath&gt;</code>:  在 CLI 里执行一个 hive 脚本文件</li>
<li><code>!clear;</code>: 清除命令行</li>
<li><code>show tables;</code>： 展示数据表</li>
<li><code>desc tableName</code>：展示一个数据表的结构</li>
</ol>
<p>和SQL类似，HiveQL一般是大小写不敏感的（除了字符串比较以外），因此 <code>show tables;</code> 等同于 <code>SHOW TABLES;</code>。制表符（Tab）会自动补全 Hive 的关键字和函数。</p>
<p>下面给出一个简单的 Hive Shell 操作 Demo，详情参考 <a href="http://blog.fens.me/hadoop-hive-intro/" target="_blank" rel="noopener">Hive安装及使用攻略 | 粉丝日志</a>。</p>
<ul>
<li>创建本地数据文件(文本以tab分隔)</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">~ vi /home/cos/demo/t_hive.txt</span><br><span class="line"></span><br><span class="line"><span class="number">16</span>      <span class="number">2</span>       <span class="number">3</span></span><br><span class="line"><span class="number">61</span>      <span class="number">12</span>      <span class="number">13</span></span><br><span class="line"><span class="number">41</span>      <span class="number">2</span>       <span class="number">31</span></span><br><span class="line"><span class="number">17</span>      <span class="number">21</span>      <span class="number">3</span></span><br><span class="line"><span class="number">71</span>      <span class="number">2</span>       <span class="number">31</span></span><br><span class="line"><span class="number">1</span>       <span class="number">12</span>      <span class="number">34</span></span><br><span class="line"><span class="number">11</span>      <span class="number">2</span>       <span class="number">34</span></span><br></pre></td></tr></table></figure>

<ul>
<li>进入Hive Shell，创建新表</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">#创建新表</span><br><span class="line">hive&gt; <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_hive (a <span class="type">int</span>, b <span class="type">int</span>, c <span class="type">int</span>) <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">'\t'</span>;</span><br><span class="line">OK</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.489</span> seconds</span><br></pre></td></tr></table></figure>


<ul>
<li>查看表</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">hive&gt; <span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line">OK</span><br><span class="line">t_hive</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.099</span> seconds</span><br></pre></td></tr></table></figure>


<ul>
<li>正则匹配表名</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">hive&gt;<span class="keyword">show</span> <span class="keyword">tables</span> <span class="string">'*t*'</span>;</span><br><span class="line">OK</span><br><span class="line">t_hive</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.065</span> seconds</span><br></pre></td></tr></table></figure>


<ul>
<li>查看表数据</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">hive&gt; select * <span class="keyword">from</span> t_hive;</span><br><span class="line">OK</span><br><span class="line"><span class="number">16</span>      <span class="number">2</span>       <span class="number">3</span></span><br><span class="line"><span class="number">61</span>      <span class="number">12</span>      <span class="number">13</span></span><br><span class="line"><span class="number">41</span>      <span class="number">2</span>       <span class="number">31</span></span><br><span class="line"><span class="number">17</span>      <span class="number">21</span>      <span class="number">3</span></span><br><span class="line"><span class="number">71</span>      <span class="number">2</span>       <span class="number">31</span></span><br><span class="line"><span class="number">1</span>       <span class="number">12</span>      <span class="number">34</span></span><br><span class="line"><span class="number">11</span>      <span class="number">2</span>       <span class="number">34</span></span><br><span class="line">Time taken: <span class="number">0.264</span> seconds</span><br></pre></td></tr></table></figure>

<ul>
<li>查看表结构</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">hive&gt; <span class="keyword">desc</span> t_hive;</span><br><span class="line">OK</span><br><span class="line">a       <span class="type">int</span></span><br><span class="line">b       <span class="type">int</span></span><br><span class="line">c       <span class="type">int</span></span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.1</span> seconds</span><br></pre></td></tr></table></figure>
<ul>
<li>修改表，增加一个字段</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">hive&gt; <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_hive <span class="keyword">ADD</span> <span class="keyword">COLUMNS</span> (new_col String);</span><br><span class="line">OK</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.186</span> seconds</span><br><span class="line">hive&gt; <span class="keyword">desc</span> t_hive;</span><br><span class="line">OK</span><br><span class="line">a       <span class="type">int</span></span><br><span class="line">b       <span class="type">int</span></span><br><span class="line">c       <span class="type">int</span></span><br><span class="line">new_col string</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.086</span> seconds</span><br></pre></td></tr></table></figure>


<ul>
<li>删除表</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">hive&gt; <span class="keyword">DROP</span> <span class="keyword">TABLE</span> t_hadoop;</span><br><span class="line">OK</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.767</span> seconds</span><br><span class="line"></span><br><span class="line">hive&gt; <span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line">OK</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.064</span> seconds</span><br></pre></td></tr></table></figure>


<h2 id="Beeline"><a href="#Beeline" class="headerlink" title="Beeline"></a>Beeline</h2><h3 id="HiveServer2"><a href="#HiveServer2" class="headerlink" title="HiveServer2"></a>HiveServer2</h3><p>Hive 内置了 <code>HiveServer</code> 和 <code>HiveServer2</code> 服务，两者都允许客户端使用多种编程语言进行连接，但是 HiveServer 不能处理多个客户端的并发请求，所以产生了 <code>HiveServer2</code>。</p>
<p><code>HiveServer2</code>（<code>HS2</code>）允许远程客户端可以使用各种编程语言向 Hive 提交请求并检索结果，支持多客户端并发访问和身份验证。HS2 是由多个服务组成的单个进程，其包括基于 Thrift 的 Hive 服务（TCP 或 HTTP）和用于 Web UI 的 Jetty Web 服务器。</p>
<p>HiveServer2 拥有自己的 CLI(<code>Beeline</code>)，Beeline 是一个基于 SQLLine 的 JDBC 客户端。由于 HiveServer2 是 Hive 开发维护的重点 (Hive0.15 后就不再支持 hiveserver)，所以 Hive CLI 已经不推荐使用了，官方更加推荐使用 Beeline。</p>
<ul>
<li><a href="https://juejin.im/post/5d8593905188254009777049" target="_blank" rel="noopener">Hive CLI 和 Beeline 命令行的基本使用</a></li>
</ul>
<h3 id="Beeline-参数"><a href="#Beeline-参数" class="headerlink" title="Beeline 参数"></a>Beeline 参数</h3><p>Beeline 拥有更多可使用参数，可以使用 <code>beeline --help</code> 查看，完整参数如下</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"> // ...</span></span><br><span class="line"><span class="comment"> // ...</span></span><br><span class="line"> </span><br><span class="line">Example:</span><br><span class="line"> <span class="number">1.</span> Connect <span class="keyword">using</span> simple authentication <span class="built_in">to</span> HiveServer2 <span class="keyword">on</span> <span class="title">localhost</span>:<span class="title">10000</span></span><br><span class="line"> $ beeline -u jdbc:hive2://localhost:<span class="number">10000</span> username password</span><br><span class="line"></span><br><span class="line"> <span class="number">2.</span> Connect <span class="keyword">using</span> simple authentication <span class="built_in">to</span> HiveServer2 <span class="keyword">on</span> <span class="title">hs</span>.<span class="title">local</span>:<span class="title">10000</span> <span class="title">using</span> -<span class="title">n</span> <span class="title">for</span> <span class="title">username</span> <span class="title">and</span> -<span class="title">p</span> <span class="title">for</span> <span class="title">password</span></span><br><span class="line"> $ beeline -n username -p password -u jdbc:hive2://hs2.<span class="built_in">local</span>:<span class="number">10012</span></span><br><span class="line"></span><br><span class="line"> <span class="number">3.</span> Connect <span class="keyword">using</span> Kerberos authentication <span class="keyword">with</span> hive/localhost@mydomain.com <span class="keyword">as</span> HiveServer2 principal</span><br><span class="line"> $ beeline -u <span class="string">"jdbc:hive2://hs2.local:10013/default;principal=hive/localhost@mydomain.com"</span></span><br><span class="line"></span><br><span class="line"> <span class="number">4.</span> Connect <span class="keyword">using</span> SSL connection <span class="built_in">to</span> HiveServer2 <span class="keyword">on</span> <span class="title">localhost</span> <span class="title">at</span> <span class="title">10000</span></span><br><span class="line"> $ beeline <span class="string">"jdbc:hive2://localhost:10000/default;ssl=true;sslTrustStore=/usr/local/truststore;trustStorePassword=mytruststorepassword"</span></span><br><span class="line"></span><br><span class="line"> <span class="number">5.</span> Connect <span class="keyword">using</span> LDAP authentication</span><br><span class="line"> $ beeline -u jdbc:hive2://hs2.<span class="built_in">local</span>:<span class="number">10013</span>/default &lt;ldap-username&gt; &lt;ldap-password&gt;</span><br></pre></td></tr></table></figure>


<p>在 Hive CLI 中支持的参数，Beeline 都支持，常用的参数如下。更多参数说明可以参见官方文档 <a href="https://cwiki.apache.org/confluence/display/Hive/HiveServer2+Clients#HiveServer2Clients-Beeline%E2%80%93NewCommandLineShell" target="_blank" rel="noopener">Beeline Command Options</a>。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-u <database URL></td>
<td>数据库地址</td>
</tr>
<tr>
<td>-n <username></td>
<td>用户名</td>
</tr>
<tr>
<td>-p <password></td>
<td>密码</td>
</tr>
<tr>
<td>-d <driver class></td>
<td>驱动 (可选)</td>
</tr>
<tr>
<td>-e <query></td>
<td>执行 SQL 命令</td>
</tr>
<tr>
<td>-f <file></td>
<td>执行 SQL 脚本</td>
</tr>
</tbody></table>
<p>例如，使用用户名和密码连接 Hive</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $ beeline -u jdbc:hive2://localhost:10000  -n username -p password </span></span><br><span class="line">$ beeline -u <span class="string">jdbc:</span><span class="string">hive2:</span><span class="comment">//localhost:10000  -n hive -p Hive113459...</span></span><br></pre></td></tr></table></figure>

<h2 id="Ambari"><a href="#Ambari" class="headerlink" title="Ambari"></a>Ambari</h2><ul>
<li><a href="http://ambari.apache.org/1.2.2/installing-hadoop-using-ambari/content/index.html" target="_blank" rel="noopener">Ambari User Guide</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-bigdata-ambari/index.html" target="_blank" rel="noopener">Ambari——大数据平台的搭建利器</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-bigdata-ambari2/" target="_blank" rel="noopener">Ambari——大数据平台的搭建利器之进阶篇</a></li>
</ul>
<p>和Hive进行交互的方式主要有2种：命令行和Ambari视图。</p>
<p>就 Ambari 的作用来说，就是创建、管理、监视 Hadoop 的集群，但是这里的 Hadoop 是广义，指的是 Hadoop 整个生态圈（例如 Hive，Hbase，Sqoop，Zookeeper 等），而并不仅是特指 Hadoop。用一句话来说，Ambari 就是为了让 Hadoop 以及相关的大数据软件更容易使用的一个工具。</p>
<p>Ambari 自身也是一个分布式架构的软件，主要由两部分组成：<code>Ambari Server</code> 和 <code>Ambari Agent</code>。简单来说，</p>
<ul>
<li>用户通过 Ambari Server 通知 Ambari Agent 安装对应的软件</li>
<li>Agent 会定时地发送各个机器每个软件模块的状态给 Ambari Server</li>
<li>最终这些状态信息会呈现在 Ambari 的 GUI，方便用户了解到集群的各种状态，并进行相应的维护</li>
</ul>
<h2 id="Hive实战Demo"><a href="#Hive实战Demo" class="headerlink" title="Hive实战Demo"></a>Hive实战Demo</h2><ul>
<li><a href="http://blog.fens.me/hadoop-hive-10g/" target="_blank" rel="noopener">Hive导入10G数据的测试 | 粉丝日志</a></li>
<li><a href="http://blog.fens.me/finance-rhive-repurchase/" target="_blank" rel="noopener">用RHive从历史数据中提取逆回购信息 | 粉丝日志</a></li>
</ul>
<h2 id="Hive架构"><a href="#Hive架构" class="headerlink" title="Hive架构"></a>Hive架构</h2><p>尽管Hive使用起来类似SQL，但它仍然不是SQL，尤其体现在处理速度方面。底层的Hive查询仍然是以 MapReduce 作业的形式运行。MapReduce是批处理，而SQL则是一种交互式处理语音。</p>
<h3 id="HCatalog"><a href="#HCatalog" class="headerlink" title="HCatalog"></a>HCatalog</h3><p>HCatalog 提供了一个统一的元数据服务，允许不同的工具如 Pig、MapReduce 等通过 HCatalog 直接访问存储在 HDFS 上的底层文件。</p>
<p>HCatalog 本质上是数据访问工具（如Hive或Pig）和底层文件之间的抽象层。</p>
<h2 id="Hive-数据类型"><a href="#Hive-数据类型" class="headerlink" title="Hive 数据类型"></a>Hive 数据类型</h2><ul>
<li><a href="https://cwiki.apache.org/confluence/display/Hive#Home-UserDocumentation" target="_blank" rel="noopener">User Documentation - Apache Hive</a></li>
</ul>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul>
<li>tinyint/smallint/int/bigint：整数类型</li>
<li>float/double：浮点数类型</li>
<li>boolean：布尔类型</li>
<li>string：字符串类型</li>
</ul>
<p><code>string</code> 类型下又包括 变长字符串 <code>VARCHAR</code> 和 定长字符串 <code>CHAR</code>。下面给出例子，说明两者区别</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">hive &gt; <span class="keyword">create</span> <span class="keyword">table</span> test1</span><br><span class="line">     &gt; (vname <span class="type">varchar</span>(<span class="number">20</span>), cname <span class="type">char</span>(<span class="number">20</span>));</span><br><span class="line">     &gt; <span class="keyword">desc</span> test1;</span><br><span class="line">     </span><br><span class="line">vname   <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">cname   <span class="type">char</span>(<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<p>上述例子中，<code>varchar(20)</code> 表示最大长度为20，实际长度可能不足20。<code>char(20)</code> 表示长度固定为20。</p>
<h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><ul>
<li>Array：数组，由一系列相同数据类型的元素组成</li>
<li>Map：集合，包含 <code>key-&gt;value</code> 键值对，可以通过 <code>key</code> 来访问元素</li>
<li>Struct：结构类型，可以包含不同数据类型的元素，这些元素可以通过 “点语法” 的方式访问</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">hive&gt; create table student</span><br><span class="line">    &gt; (sid <span class="built_in">int</span>,</span><br><span class="line">    &gt; sname <span class="built_in">string</span>,</span><br><span class="line">    &gt; grade1 <span class="built_in">array<span class="keyword">&lt;<span class="built_in">float</span>&gt;</span></span>,</span><br><span class="line">    &gt; grade2 map&lt;<span class="built_in">string</span>,<span class="built_in">float</span>&gt;</span><br><span class="line">    &gt; info struct&lt;name:<span class="built_in">string</span>, age:<span class="built_in">int</span>&gt;);</span><br><span class="line">OK</span><br><span class="line">Time taken: <span class="number">0.246</span> seconds</span><br><span class="line"></span><br><span class="line">hive&gt; desc student;</span><br><span class="line">OK</span><br><span class="line">sid                 	<span class="built_in">int</span></span><br><span class="line">sname               	<span class="built_in">string</span></span><br><span class="line">grade1               	<span class="built_in">array<span class="keyword">&lt;<span class="built_in">float</span>&gt;</span></span></span><br><span class="line">grade2                  map&lt;<span class="built_in">string</span>,<span class="built_in">float</span>&gt;</span><br><span class="line">info                    struct&lt;name:<span class="built_in">string</span>, age:<span class="built_in">int</span>&gt;</span><br><span class="line">Time taken: <span class="number">0.077</span> seconds, Fetched: <span class="number">5</span> row(s)</span><br></pre></td></tr></table></figure>


<h3 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h3><ul>
<li>Date：从 Hive 0.12.0 开始支持</li>
<li>Timestamp：从 Hive 0.8.0 开始支持</li>
</ul>
<h2 id="Hive-文件格式"><a href="#Hive-文件格式" class="headerlink" title="Hive 文件格式"></a>Hive 文件格式</h2><p>Hive 支持4种文件格式</p>
<ol>
<li><code>TextFile</code> （默认格式）：基于行列混合的思想</li>
<li><code>SequenceFile</code> ：基于行存储</li>
<li><code>RCFile</code> ：基于行存储</li>
<li>自定义</li>
</ol>
<p>基于 HDFS 的行存储具备快速数据加载和动态负载的高适应能力，因为行存储保证了相同记录的所有域都在同一个集群节点。但是它不能满足快速的查询响应时间的要求，因为当查询仅仅针对所有列中的少数几列时，他就不能跳过不需要的列，直接定位到所需的列。此外，行存储也不易获得一个较高的压缩比。</p>
<h3 id="TextFile"><a href="#TextFile" class="headerlink" title="TextFile"></a>TextFile</h3><p>TextFile 是默认格式，数据不做压缩，磁盘开销大，数据解析开销大。可结合 Gzip，Bzip2使用。但使用这方式，Hive 不会对数据进行切分，从而无法对数据进行并行操作。</p>
<h3 id="SequenceFile"><a href="#SequenceFile" class="headerlink" title="SequenceFile"></a>SequenceFile</h3><p>SequenceFile 是Hadoop API 提供的一种二进制文件支持，其具有使用方便，可分割，可压缩的特点。 SequenceFile 支持三种压缩选择：<code>NONE</code>, <code>RECORD</code>, <code>BLOCK</code>。<code>RECORD</code> 压缩率较低，一般建议使用 <code>BLOCK</code> 压缩。</p>
<h3 id="RCFile"><a href="#RCFile" class="headerlink" title="RCFile"></a>RCFile</h3><p>RCFile 是 Facebook 开发的一个集行存储和列存储的优点于一身，压缩比更高，读取列更快。</p>
<p>RCFile 存储结构遵循“先水平划分，再垂直划分”的设计理念。RCFile保证同一行的数据位于同一节点，因此元组重构的开销很低。其次，像列存储一样，RCFile 能够利用列维度的数据压缩，并且能跳过不必要的列读取。</p>
<blockquote>
<p>在 RC File 的基础上，进一步改进，引入了 ORC （<code>Optimized Record Columnar</code>），ORC 主要在压缩编码、查询性能上进行了升级。</p>
</blockquote>
<h3 id="自定义文件格式"><a href="#自定义文件格式" class="headerlink" title="自定义文件格式"></a>自定义文件格式</h3><p>当用户的数据文件格式不能被当前Hive识别的时候，可以自定义文件格式，通过实现 <code>InputFormat</code> 和 <code>OutputFormat</code> 自定义输入/输出格式。</p>
<h2 id="Hive的数据存储"><a href="#Hive的数据存储" class="headerlink" title="Hive的数据存储"></a>Hive的数据存储</h2><p>Hive 的存储是建立在 Hadoop 文件系统之上的。Hive 本身没有专门的数据存储格式，也不能为数据建立索引，因此用户可以非常自由地组织 Hive 中的表，只需要在创建表的时候告诉 Hive 数据中的列分隔符就可以解析数据了。</p>
<p>例如，打开 <code>http://localhost:50070/</code>，选择顶部分类栏中的 <code>Utilities -&gt; Browse the file system</code>，可以查看到 Hive 中创建的数据库表对应的文件（存储在 <code>/user/hive/warehouse</code> 路径下）。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/BigData2020/hadoop-hive-hdfs-1.png" alt=""></p>
<h3 id="Hive的数据模型"><a href="#Hive的数据模型" class="headerlink" title="Hive的数据模型"></a>Hive的数据模型</h3><p>Hive 中主要包括 4 种数据模型</p>
<ol>
<li>表（Table）</li>
<li>外部表（External Table）</li>
<li>分区（Partition）</li>
<li>桶（Bucket）</li>
</ol>
<p>Hive 的表和数据库中的表在概念上没有什么本质区别，在 Hive 中每个表都有一个对应的存储目录。而外部表指向已经在 HDFS 中存在的数据，也可以创建分区。</p>
<p>Hive 中的每个分区都对应数据库中相应分区列的一个索引，但是其对分区的组织方式和传统关系数据库不同。</p>
<p>桶在指定列进行 Hash 计算时，会根据哈希值切分数据，使每个桶对应一个文件。</p>
<h4 id="表"><a href="#表" class="headerlink" title="表"></a>表</h4><p>表可以细分为</p>
<ol>
<li>Table 内部表</li>
<li>Partition 分区表</li>
<li>External Table 外部表</li>
<li>Bucket Table 桶表</li>
</ol>
<h4 id="视图-View"><a href="#视图-View" class="headerlink" title="视图 View"></a>视图 View</h4><ul>
<li>视图是一种虚表，是一个逻辑概念，Hive 暂不支持物化视图</li>
<li>视图可以跨越多张表</li>
<li>视图建立在已有表的基础上，视图赖以建立的这些表称为基表</li>
<li>视图可以简化复杂的查询</li>
<li>视图 VIEW 是只读的，不支持 <code>LOAD/INSERT/ALTER</code>。可以使用 <code>ALTER VIEW</code> 改变 VIEW 定义</li>
<li>Hive 支持迭代视图</li>
</ul>
<h2 id="Hive-数据操作"><a href="#Hive-数据操作" class="headerlink" title="Hive 数据操作"></a>Hive 数据操作</h2><blockquote>
<p>在执行操作前，请确保 <code>localhost:50070</code> 页面访问到的 <code>Live Node</code> 个数大于0。</p>
</blockquote>
<h3 id="向表中装载数据"><a href="#向表中装载数据" class="headerlink" title="向表中装载数据"></a>向表中装载数据</h3><ul>
<li><a href="https://blog.csdn.net/jclian91/article/details/78481673" target="_blank" rel="noopener">Hive之导入外部数据 | CSDN</a></li>
<li><a href="http://www.tracefact.net/tech/067.html" target="_blank" rel="noopener">Hive 写入数据到Hive表(命令行)</a></li>
</ul>
<h4 id="Demo-Insert插入数据"><a href="#Demo-Insert插入数据" class="headerlink" title="Demo-Insert插入数据"></a>Demo-Insert插入数据</h4><ol>
<li>创建 <code>hiveDemo</code> 数据库并使用该数据库</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> datbase <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> hiveDemo;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"><span class="keyword">use</span> hiveDemo;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>建表/查看/删除 数据表</li>
</ol>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">hive&gt; Create Table golds<span class="constructor">_log(<span class="params">user_id</span> <span class="params">bigint</span>, <span class="params">accounts</span> <span class="params">string</span>, <span class="params">change_type</span> <span class="params">string</span>, <span class="params">golds</span> <span class="params">bigint</span>, <span class="params">log_time</span> <span class="params">int</span>)</span>;</span><br><span class="line"></span><br><span class="line">hive&gt; show tables;</span><br><span class="line"></span><br><span class="line">hive&gt; drop table golds_log;</span><br><span class="line"></span><br><span class="line">hive&gt; desc golds_log;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用 <code>Insert...Values</code> 语句写入数据</li>
</ol>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">hive&gt; Insert into table golds_log values</span><br><span class="line">(<span class="number">3645356</span>,'wds<span class="number">765432</span>1(<span class="number">417175</span>2)','新人注册奖励',<span class="number">1700</span>,<span class="number">1526027152</span>),</span><br><span class="line">(<span class="number">2016869</span>,'dqyx<span class="number">12345678</span>9(<span class="number">237669</span>9)','参加一场比赛',<span class="number">1140</span>,<span class="number">1526027152</span>),</span><br><span class="line">(<span class="number">3630468</span>,'dke<span class="number">377661</span>1(<span class="number">415606</span>4)','大转盘奖励',<span class="number">1200</span>,<span class="number">1526027152</span>),</span><br><span class="line">(<span class="number">995267</span>,'a<span class="number">25441318</span>9(<span class="number">122941</span>7)','妞妞拼十翻牌',<span class="number">200</span>,<span class="number">1526027152</span>),</span><br><span class="line">(<span class="number">795276</span>,'li<span class="number">876286</span>6(<span class="number">971402</span>)','妞妞拼十翻牌',<span class="number">1200</span>,<span class="number">1526027152</span>);</span><br></pre></td></tr></table></figure>



<p>正常情况下可以看到下面的结果输出，说明在执行 <code>Insert...values</code> 语句时，底层是在执行 MapReduce 作业。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Query ID = lbs_20200422053833_55b98d5a-ba4c<span class="number">-470</span>d<span class="number">-909</span>a<span class="number">-098213</span>d1d937</span><br><span class="line">Total jobs = <span class="number">3</span></span><br><span class="line">Launching Job <span class="number">1</span> <span class="keyword">out</span> of <span class="number">3</span></span><br><span class="line">Number of reduce tasks determined at compile time: <span class="number">1</span></span><br><span class="line">In order to change the average load <span class="keyword">for</span> a reducer (<span class="keyword">in</span> bytes):</span><br><span class="line">  <span class="keyword">set</span> hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line">  <span class="keyword">set</span> hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line">In order to <span class="keyword">set</span> a constant number of reducers:</span><br><span class="line">  <span class="keyword">set</span> mapreduce.job.reduces=&lt;number&gt;</span><br><span class="line">Starting Job = job_1587504428431_0001, Tracking URL = http:<span class="comment">//localhost:8088/proxy/application_1587504428431_0001/</span></span><br><span class="line">Kill Command = /Library/hadoop<span class="number">-2.10</span><span class="number">.0</span>/bin/mapred job  -kill job_1587504428431_0001</span><br><span class="line">Hadoop job information <span class="keyword">for</span> Stage<span class="number">-1</span>: number of mappers: <span class="number">1</span>; number of reducers: <span class="number">1</span></span><br><span class="line"><span class="number">2020</span><span class="number">-04</span><span class="number">-22</span> <span class="number">05</span>:<span class="number">39</span>:<span class="number">14</span>,<span class="number">966</span> Stage<span class="number">-1</span> map = <span class="number">0</span>%,  reduce = <span class="number">0</span>%</span><br><span class="line"><span class="number">2020</span><span class="number">-04</span><span class="number">-22</span> <span class="number">05</span>:<span class="number">39</span>:<span class="number">21</span>,<span class="number">154</span> Stage<span class="number">-1</span> map = <span class="number">100</span>%,  reduce = <span class="number">0</span>%</span><br><span class="line"><span class="number">2020</span><span class="number">-04</span><span class="number">-22</span> <span class="number">05</span>:<span class="number">39</span>:<span class="number">27</span>,<span class="number">296</span> Stage<span class="number">-1</span> map = <span class="number">100</span>%,  reduce = <span class="number">100</span>%</span><br><span class="line">Ended Job = job_1587504428431_0001</span><br><span class="line">Stage<span class="number">-4</span> <span class="keyword">is</span> selected by condition resolver.</span><br><span class="line">Stage<span class="number">-3</span> <span class="keyword">is</span> filtered <span class="keyword">out</span> by condition resolver.</span><br><span class="line">Stage<span class="number">-5</span> <span class="keyword">is</span> filtered <span class="keyword">out</span> by condition resolver.</span><br><span class="line">Moving data to directory hdfs:<span class="comment">//localhost:9000/user/hive/warehouse/hivedemo.db/golds_log/.hive-staging_hive_2020-04-22_05-38-33_916_330193107719508203-1/-ext-10000</span></span><br><span class="line">Loading data to table hivedemo.golds_log</span><br><span class="line">MapReduce Jobs Launched: </span><br><span class="line">Stage-Stage<span class="number">-1</span>: Map: <span class="number">1</span>  Reduce: <span class="number">1</span>   HDFS Read: <span class="number">20647</span> HDFS Write: <span class="number">764</span> SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: <span class="number">0</span> msec</span><br><span class="line">OK</span><br><span class="line">Time taken: <span class="number">54.82</span> seconds</span><br></pre></td></tr></table></figure>




<p>此时在 <code>http://localhost:50070/</code> 页面查看 <code>Utillities -&gt; Browser the file system</code>，在 <code>/user/hive/warehouse/hivedemo.db/golds_log</code> 路径下可以看到一个 <code>000000_0</code> 的文件，下载到本地，查看其内容为</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/BigData2020/hadoop-namenode-manage-web-1.png" alt=""></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">3645356 </span>wds7654321(<span class="number">4171752</span>) 新人注册奖励 <span class="number">1700</span> <span class="number">1526027152</span></span><br><span class="line"><span class="symbol">2016869 </span>dqyx123456789(<span class="number">2376699</span>) 参加一场比赛 <span class="number">1140</span> <span class="number">1526027152</span></span><br><span class="line"><span class="symbol">3630468 </span>dke3776611(<span class="number">4156064</span>) 大转盘奖励 <span class="number">1200</span> <span class="number">1526027152</span></span><br><span class="line"><span class="symbol">995267 </span>a254413189(<span class="number">1229417</span>) 妞妞拼十翻牌 <span class="number">200</span> <span class="number">1526027152</span></span><br><span class="line"><span class="symbol">795276 </span>li8762866(<span class="number">971402</span>) 妞妞拼十翻牌 <span class="number">1200</span> <span class="number">1526027152</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>000000_0</code> 文件是一个普通的文本文件（Hive中默认的文件存储格式），可以用 VSCode 打开。</p>
</blockquote>
<ol start="4">
<li>继续执行2次 <code>Insert...values</code> 命令，再次访问 <code>http://localhost:50070/explorer.html#/user/hive/warehouse/hivedemo.db/golds_log</code> 页面，可以发现有3个文件，即<strong>每次任务都生成了单独的数据文件。</strong></li>
</ol>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/BigData2020/hadoop-namenode-manage-web-2.png" alt=""></p>
<p><strong>Hive中，每次执行 <code>Insert</code> 语句（底层执行 MapReduce 任务）都会生成独立的数据文件。对于 HDFS 来说，优势是存储少量大文件，不是存储大量小文件。</strong></p>
<p>而对于我们的应用而言，每 10 分钟就会同步一次数据到 Hive 仓库，如此一来会生成无数的小文件，系统的运行速度会越来越慢。所以第一个问题就是：如何合并小文件？</p>
<h4 id="Demo-合并数据库小文件"><a href="#Demo-合并数据库小文件" class="headerlink" title="Demo-合并数据库小文件"></a>Demo-合并数据库小文件</h4><p>在建表的时候，我们没有指定表存储的文件类型（<code>file format</code>），默认的文件类型是 <code>Textfile</code>，所以，当我们下载生成的 <code>000000_0</code> 文件后，使用编辑器可以直接查看其内容。</p>
<p>Hive 提供了一个 <code>ALTER TABLE table_name CONCATENATE</code> 语句，用于合并小文件。但是只支持 <code>RCFILE</code> 和 <code>ORC</code>文件类型。</p>
<p>因此，如果想合并小文件，可以删除表，然后再使用下面的命令重建</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">hive&gt; drop <span class="keyword">table</span> golds_log;</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">hive&gt; Create Table golds<span class="constructor">_log(<span class="params">user_id</span> <span class="params">bigint</span>, <span class="params">accounts</span> <span class="params">string</span>, <span class="params">change_type</span> <span class="params">string</span>, <span class="params">golds</span> <span class="params">bigint</span>, <span class="params">log_time</span> <span class="params">int</span>)</span></span><br><span class="line">STORED AS RCFile;</span><br></pre></td></tr></table></figure>



<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">hive&gt; Insert into table golds_log values</span><br><span class="line">(<span class="number">3645356</span>,'wds<span class="number">765432</span>1(<span class="number">417175</span>2)','新人注册奖励',<span class="number">1700</span>,<span class="number">1526027152</span>),</span><br><span class="line">(<span class="number">2016869</span>,'dqyx<span class="number">12345678</span>9(<span class="number">237669</span>9)','参加一场比赛',<span class="number">1140</span>,<span class="number">1526027152</span>),</span><br><span class="line">(<span class="number">3630468</span>,'dke<span class="number">377661</span>1(<span class="number">415606</span>4)','大转盘奖励',<span class="number">1200</span>,<span class="number">1526027152</span>),</span><br><span class="line">(<span class="number">995267</span>,'a<span class="number">25441318</span>9(<span class="number">122941</span>7)','妞妞拼十翻牌',<span class="number">200</span>,<span class="number">1526027152</span>),</span><br><span class="line">(<span class="number">795276</span>,'li<span class="number">876286</span>6(<span class="number">971402</span>)','妞妞拼十翻牌',<span class="number">1200</span>,<span class="number">1526027152</span>);</span><br></pre></td></tr></table></figure>

<p>重复上面的过程，执行 3 次 <code>insert</code> 语句，每次插入 5 条数据。刷新 WebUI，会看到和前面一样产生 3 个文件。</p>
<blockquote>
<p>Tip: 如果此时再将 <code>000000_0</code> 文件下载下来，用文本编辑器或者 VSCode 打开查看，发现已经是乱码了。因为它已经不再是文本文件了。</p>
</blockquote>
<p>接下来，执行下面的语句，对文件进行合并</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">hive&gt; alter <span class="keyword">table</span> golds_log <span class="comment">concatenate</span>;</span><br></pre></td></tr></table></figure>

<p>输出结果如下</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Starting Job = job_1587504428431_0006, Tracking URL = http:<span class="comment">//localhost:8088/proxy/application_1587504428431_0006/</span></span><br><span class="line">Kill Command = /Library/hadoop<span class="number">-2.10</span><span class="number">.0</span>/bin/mapred job  -kill job_1587504428431_0006</span><br><span class="line">Hadoop job information <span class="keyword">for</span> <span class="literal">null</span>: number of mappers: <span class="number">1</span>; number of reducers: <span class="number">0</span></span><br><span class="line"><span class="number">2020</span><span class="number">-04</span><span class="number">-22</span> <span class="number">06</span>:<span class="number">10</span>:<span class="number">40</span>,<span class="number">875</span> <span class="literal">null</span> map = <span class="number">0</span>%,  reduce = <span class="number">0</span>%</span><br><span class="line"><span class="number">2020</span><span class="number">-04</span><span class="number">-22</span> <span class="number">06</span>:<span class="number">10</span>:<span class="number">47</span>,<span class="number">012</span> <span class="literal">null</span> map = <span class="number">100</span>%,  reduce = <span class="number">0</span>%</span><br><span class="line">Ended Job = job_1587504428431_0006</span><br><span class="line">Loading data to table hivedemo.golds_log</span><br><span class="line">MapReduce Jobs Launched: </span><br><span class="line">Stage-<span class="literal">null</span>: Map: <span class="number">1</span>   HDFS Read: <span class="number">3137</span> HDFS Write: <span class="number">632</span> SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: <span class="number">0</span> msec</span><br><span class="line">OK</span><br><span class="line">Time taken: <span class="number">43.978</span> seconds</span><br></pre></td></tr></table></figure>



<p>刷新WebUI，会发现文件已经合并了，只有一个文件存在。</p>
<p>最后，使用 <code>SELECT</code> 语句查看数据表的内容。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">hive&gt; select * <span class="keyword">from</span>  golds_log;</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line"><span class="number">3645356</span>	wds7654321(<span class="number">4171752</span>)	新人注册奖励	<span class="number">1700</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">2016869</span>	dqyx123456789(<span class="number">2376699</span>)	参加一场比赛	<span class="number">1140</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">3630468</span>	dke3776611(<span class="number">4156064</span>)	大转盘奖励	<span class="number">1200</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">995267</span>	a254413189(<span class="number">1229417</span>)	妞妞拼十翻牌	<span class="number">200</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">795276</span>	li8762866(<span class="number">971402</span>)	妞妞拼十翻牌	<span class="number">1200</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">3645356</span>	wds7654321(<span class="number">4171752</span>)	新人注册奖励	<span class="number">1700</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">2016869</span>	dqyx123456789(<span class="number">2376699</span>)	参加一场比赛	<span class="number">1140</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">3630468</span>	dke3776611(<span class="number">4156064</span>)	大转盘奖励	<span class="number">1200</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">995267</span>	a254413189(<span class="number">1229417</span>)	妞妞拼十翻牌	<span class="number">200</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">795276</span>	li8762866(<span class="number">971402</span>)	妞妞拼十翻牌	<span class="number">1200</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">3645356</span>	wds7654321(<span class="number">4171752</span>)	新人注册奖励	<span class="number">1700</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">2016869</span>	dqyx123456789(<span class="number">2376699</span>)	参加一场比赛	<span class="number">1140</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">3630468</span>	dke3776611(<span class="number">4156064</span>)	大转盘奖励	<span class="number">1200</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">995267</span>	a254413189(<span class="number">1229417</span>)	妞妞拼十翻牌	<span class="number">200</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">795276</span>	li8762866(<span class="number">971402</span>)	妞妞拼十翻牌	<span class="number">1200</span>	<span class="number">1526027152</span></span><br><span class="line">Time taken: <span class="number">0.133</span> seconds, Fetched: <span class="number">15</span> row(s)</span><br></pre></td></tr></table></figure>


<h4 id="Demo-Load-导入外部数据"><a href="#Demo-Load-导入外部数据" class="headerlink" title="Demo-Load 导入外部数据"></a>Demo-Load 导入外部数据</h4><p>下面给出一个实例，如何将本地数据文件 <code>test.txt</code> 导入到 Hive 数据表中。</p>
<ol>
<li>本地数据文件 <code>test.txt</code> 内容如下</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">3645356</span>|wds7654321(<span class="number">4171752</span>)|新人注册奖励|<span class="number">1700</span>|<span class="number">1526027152</span></span><br><span class="line"><span class="number">2016869</span>|dqyx123456789(<span class="number">2376699</span>)|参加一场比赛|<span class="number">1140</span>|<span class="number">1526027152</span></span><br><span class="line"><span class="number">3630468</span>|dke3776611(<span class="number">4156064</span>)|大转盘奖励|<span class="number">1200</span>|<span class="number">1526027152</span></span><br><span class="line"><span class="number">3642022</span>|黑娃<span class="number">123456</span>(<span class="number">4168266</span>)|新人注册奖励|<span class="number">500</span>|<span class="number">1526027152</span></span><br><span class="line"><span class="number">2016869</span>|dqyx123456789(<span class="number">2376699</span>)|大转盘奖励|<span class="number">1500</span>|<span class="number">1526027152</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建数据表，与本地 <code>test.txt</code> 的数据类型一致</li>
</ol>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">hive&gt; Create Table golds<span class="constructor">_log(<span class="params">user_id</span> <span class="params">bigint</span>, <span class="params">accounts</span> <span class="params">string</span>, <span class="params">change_type</span> <span class="params">string</span>, <span class="params">golds</span> <span class="params">bigint</span>, <span class="params">log_time</span> <span class="params">int</span>)</span></span><br><span class="line">ROW FORMAT DELIMITED FIELDS TERMINATED BY <span class="character">'|'</span>;</span><br></pre></td></tr></table></figure>
<p>上面最重要的一句就是 <code>ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;|&#39;</code>，说明表的字段由符号 <code>&quot;|&quot;</code> 进行分隔。</p>
<blockquote>
<p>Tip: <code>test.txt</code> 中包含有中文，确保文件格式是 <code>utf-8</code>（<code>GB2312</code> 导入后会有乱码）</p>
</blockquote>
<ol start="3">
<li>查看数据表的结构</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">describe</span> golds_log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">describe</span> formatted student1;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看数据表内容（此时为空）</li>
</ol>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student1;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>导入本地数据</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">hive&gt; <span class="keyword">load</span> data <span class="keyword">local</span> inpath <span class="string">'/Users/lbs/Downloads/test.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> golds_log;</span><br><span class="line"></span><br><span class="line">Loading data <span class="keyword">to</span> <span class="keyword">table</span> hivedemo.golds_log</span><br><span class="line">OK</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.139</span> seconds</span><br></pre></td></tr></table></figure>

<p>你会发现使用 <code>load</code> 语句写入数据比 <code>insert</code> 语句要快许多倍，因为 HIVE 并不对 <code>scheme</code> 进行校验，仅仅是将数据文件挪到 HDFS 系统上，也没有执行 MapReduce 作业。所以从导入数据的角度而言，使用 load 要优于使用 insert…values。</p>
<ol start="6">
<li>再次数据表内容</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">hive&gt; select * <span class="keyword">from</span> golds_log;</span><br><span class="line">OK</span><br><span class="line"><span class="number">3645356</span>	wds7654321(<span class="number">4171752</span>)	新人注册奖励	<span class="number">1700</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">2016869</span>	dqyx123456789(<span class="number">2376699</span>)	参加一场比赛	<span class="number">1140</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">3630468</span>	dke3776611(<span class="number">4156064</span>)	大转盘奖励	<span class="number">1200</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">3642022</span>	黑娃<span class="number">123456</span>(<span class="number">4168266</span>)	新人注册奖励	<span class="number">500</span>	<span class="number">1526027152</span></span><br><span class="line"><span class="number">2016869</span>	dqyx123456789(<span class="number">2376699</span>)	大转盘奖励	<span class="number">1500</span>	<span class="number">1526027152</span></span><br><span class="line">Time taken: <span class="number">0.087</span> seconds, Fetched: <span class="number">5</span> row(s)</span><br></pre></td></tr></table></figure>


<ol start="7">
<li>反复导入 3 次后，打开 Web UI，刷新后，发现和使用 Insert 语句时一样，每次 load 语句都会生成一个数据文件，同样存在小文件的问题。</li>
</ol>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/BigData2020/hadoop-namenode-manage-web-3.png" alt=""></p>
<p>和前面的方法一样，我们可以将表的存储类型改为 RCFile，然后再进行合并，但是因为使用 load 语句的时候，要导入的文件类型是 txt，和表的存储类型不一致，所以会报错。</p>
<p>这时候，只能曲线救国了：将主表创建为 RCFile 类型，再创建一张临时表，类型是 Textfile，然后 load 时导入到临时表，然后再使用下一节要介绍的 <code>Insert...select</code> 语句，将数据从临时表导入到主表。</p>
<h4 id="Demo-使用-Insert…Select-语句写入数据"><a href="#Demo-使用-Insert…Select-语句写入数据" class="headerlink" title="Demo-使用 Insert…Select 语句写入数据"></a>Demo-使用 Insert…Select 语句写入数据</h4><ol>
<li>使用下面的语句创建一张临时表，临时表的名称为 <code>golds_log_tmp</code>。临时表在当前会话(<code>session</code>)结束后会被 HIVE 自动删除，临时表可以保存在SSD、内存或者是文件系统上。</li>
</ol>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">hive&gt; Create TEMPORARY Table golds<span class="constructor">_log_tmp(<span class="params">user_id</span> <span class="params">bigint</span>, <span class="params">accounts</span> <span class="params">string</span>, <span class="params">change_type</span> <span class="params">string</span>, <span class="params">golds</span> <span class="params">bigint</span>, <span class="params">log_time</span> <span class="params">int</span>)</span></span><br><span class="line">ROW FORMAT DELIMITED  FIELDS TERMINATED BY <span class="character">'|'</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用下面的语句创建主表</li>
</ol>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">hive&gt; drop <span class="keyword">table</span> golds_log;</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">hive&gt; Create Table golds<span class="constructor">_log(<span class="params">user_id</span> <span class="params">bigint</span>, <span class="params">accounts</span> <span class="params">string</span>, <span class="params">change_type</span> <span class="params">string</span>, <span class="params">golds</span> <span class="params">bigint</span>, <span class="params">log_time</span> <span class="params">int</span>)</span></span><br><span class="line">STORED AS RCFile;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用下面的语句将数据导入到临时表</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">hive&gt; <span class="keyword">load</span> data <span class="keyword">local</span> inpath <span class="string">'/Users/lbs/Downloads/test.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> golds_log_tmp;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用insert…select语句将数据从临时表转移到主表</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">hive&gt; Insert <span class="built_in">int</span>o table golds_log select * <span class="keyword">from</span> golds_log_tmp;</span><br><span class="line"></span><br><span class="line">Query ID = lbs_20200422063734_475e168a<span class="number">-5016</span><span class="number">-4</span>ba7-a67f<span class="number">-9</span>c7f76373f98</span><br><span class="line">Total jobs = <span class="number">1</span></span><br><span class="line">Launching Job <span class="number">1</span> <span class="keyword">out</span> of <span class="number">1</span></span><br><span class="line">Number of reduce tasks determined at compile time: <span class="number">1</span></span><br><span class="line">In order to change the average load <span class="keyword">for</span> a reducer (<span class="keyword">in</span> bytes):</span><br><span class="line">  <span class="keyword">set</span> hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line">  <span class="keyword">set</span> hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line">In order to <span class="keyword">set</span> a constant number of reducers:</span><br><span class="line">  <span class="keyword">set</span> mapreduce.job.reduces=&lt;number&gt;</span><br><span class="line">Starting Job = job_1587504428431_0007, Tracking URL = http:<span class="comment">//localhost:8088/proxy/application_1587504428431_0007/</span></span><br><span class="line">Kill Command = /Library/hadoop<span class="number">-2.10</span><span class="number">.0</span>/bin/mapred job  -kill job_1587504428431_0007</span><br><span class="line">Hadoop job information <span class="keyword">for</span> Stage<span class="number">-1</span>: number of mappers: <span class="number">1</span>; number of reducers: <span class="number">1</span></span><br><span class="line"><span class="number">2020</span><span class="number">-04</span><span class="number">-22</span> <span class="number">06</span>:<span class="number">38</span>:<span class="number">10</span>,<span class="number">330</span> Stage<span class="number">-1</span> map = <span class="number">0</span>%,  reduce = <span class="number">0</span>%</span><br><span class="line"><span class="number">2020</span><span class="number">-04</span><span class="number">-22</span> <span class="number">06</span>:<span class="number">38</span>:<span class="number">16</span>,<span class="number">479</span> Stage<span class="number">-1</span> map = <span class="number">100</span>%,  reduce = <span class="number">0</span>%</span><br><span class="line"><span class="number">2020</span><span class="number">-04</span><span class="number">-22</span> <span class="number">06</span>:<span class="number">38</span>:<span class="number">21</span>,<span class="number">572</span> Stage<span class="number">-1</span> map = <span class="number">100</span>%,  reduce = <span class="number">100</span>%</span><br><span class="line">Ended Job = job_1587504428431_0007</span><br><span class="line">Stage<span class="number">-4</span> <span class="keyword">is</span> selected by condition resolver.</span><br><span class="line">Stage<span class="number">-3</span> <span class="keyword">is</span> filtered <span class="keyword">out</span> by condition resolver.</span><br><span class="line">Stage<span class="number">-5</span> <span class="keyword">is</span> filtered <span class="keyword">out</span> by condition resolver.</span><br><span class="line">Moving data to directory hdfs:<span class="comment">//localhost:9000/user/hive/warehouse/hivedemo.db/golds_log/.hive-staging_hive_2020-04-22_06-37-34_112_939503175258871139-1/-ext-10000</span></span><br><span class="line">Loading data to table hivedemo.golds_log</span><br><span class="line">MapReduce Jobs Launched: </span><br><span class="line">Stage-Stage<span class="number">-1</span>: Map: <span class="number">1</span>  Reduce: <span class="number">1</span>   HDFS Read: <span class="number">18494</span> HDFS Write: <span class="number">794</span> SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: <span class="number">0</span> msec</span><br><span class="line">OK</span><br><span class="line">Time taken: <span class="number">48.647</span> seconds</span><br></pre></td></tr></table></figure>

<p>需要注意的是，<code>insert...select</code> 语句底层也会执行一个 MapReduce 作业，速度会比较慢。</p>
<ol start="5">
<li>在多次执行 <code>insert...select</code> 后，<code>golds_log</code> 下仍然会生成多个小文件，此时，只要执行一下合并小文件的语句就可以了</li>
</ol>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">hive&gt; alter <span class="keyword">table</span> golds_log <span class="comment">concatenate</span>;</span><br></pre></td></tr></table></figure>



<h2 id="Hive-数据查询"><a href="#Hive-数据查询" class="headerlink" title="Hive 数据查询"></a>Hive 数据查询</h2><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><p>Hive的数据表分为2种：内部表和外部表</p>
<ol>
<li>内部表：Hive创建并通过 LOAD DATA INPATH 进数据库的表，这种表可以理解为数据和表结构都保存在一起的数据表。当通过 <code>DROP TABLE table_name</code> 删除元数据中表结构的同时，表中的数据也同样会从 HDFS 中被删除。</li>
<li>外部表：在表结构创建以前，数据已经保存在HDFS中，通过创建表结构，将数据格式化到表的结构里。当通过 <code>DROP TABLE table_name</code> 操作的时候，Hive 仅仅删除元数据的表结构，而不删除HDFS上的文件。所以，相比内部表，外部表可以更放心地大胆使用。</li>
</ol>
<ul>
<li>创建表时，<code>LIKE</code> 允许用户复制现有的表结构，但不是复制数据</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">LIKE</span> existing_table_name</span><br></pre></td></tr></table></figure>

<ul>
<li>创建表时，使用 <code>EXTERNAL</code> 声明外部表</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> tablename <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tablename</span><br></pre></td></tr></table></figure>

<ul>
<li>数据表在删除时候，内部表会连数据一起删除，而外部表只删除表结构，数据还是保留的。</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="built_in">table_name</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在表查询时候，使用 <code>ALL</code> 和 <code>DISTINCT</code> 选项区分对重复记录的处理。默认是 <code>ALL</code>,表示查询所有记录，<code>DISTINCT</code> 表示去掉重复的记录。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> age, grade <span class="keyword">FROM</span> <span class="keyword">table</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ALL</span> age, grade <span class="keyword">FROM</span> <span class="keyword">table</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> age, grade <span class="keyword">FROM</span> <span class="keyword">table</span>;</span><br></pre></td></tr></table></figure>


<ul>
<li>Hive 不支持 <code>HAVING</code> 子句，可以将 HAVING 子句转化为一个子查询。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//Hive 不支持 HAVING 子句</span><br><span class="line"><span class="keyword">SELECT</span>  col1 <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> col1 <span class="keyword">HAVING</span> <span class="keyword">SUM</span>(col2) &gt; <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//可以改为下述子查询格式  Hive支持下述命名</span><br><span class="line"><span class="keyword">SELECT</span>  col1 <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> col1, <span class="keyword">SUM</span>(col2) <span class="keyword">AS</span> col2 <span class="keyword">sum</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">GROUP</span> BU col1) table2 <span class="keyword">WHERE</span> table2.col2sum &gt; <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<h3 id="视图操作"><a href="#视图操作" class="headerlink" title="视图操作"></a>视图操作</h3><p>视图 VIEW 是只读的，不支持 <code>LOAD/INSERT/ALTER</code>。可以使用 <code>ALTER VIEW</code> 改变 VIEW 定义</p>
<p>下面介绍下视图VIEW常见的操作语句</p>
<ul>
<li>创建 VIEW </li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">VIEW</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] view_name</span><br></pre></td></tr></table></figure>

<ul>
<li>删除 VIEW </li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] view_name</span><br></pre></td></tr></table></figure>


<h3 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h3><p>索引是标准的数据库技术。Hive 0.7 版本之后支持索引。</p>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>BigData</tag>
        <tag>Hadoop</tag>
        <tag>Hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop入门篇——伪分布模式安装 &amp; WordCount词频统计</title>
    <url>/2020/04/21/hadoop-basic-1/</url>
    <content><![CDATA[<ul>
<li>本文主要记录Mac下如何进行Hadoop伪分布模式安装，并通过词频统计Demo程序(WordCount)理解MapReduce的原理。</li>
</ul>
<a id="more"></a>



<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul>
<li>2020/03/23，撰写</li>
<li>2020/03/28，添加《Hadoop 权威指南》阅读笔记</li>
<li>2020/03/29，添加《Hadoop 应用开发技术详解》阅读笔记</li>
<li>2020/04/21，添加 Hadoop 伪分布式配置</li>
</ul>
<h2 id="学习资料汇总"><a href="#学习资料汇总" class="headerlink" title="学习资料汇总"></a>学习资料汇总</h2><ul>
<li><a href="https://hadoop.apache.org/" target="_blank" rel="noopener">Hadoop官网</a></li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://www.zhihu.com/question/19795366" target="_blank" rel="noopener">零基础学习 Hadoop 该如何下手？ | 知乎</a></li>
<li><a href="http://blog.fens.me/hadoop-family-roadmap/" target="_blank" rel="noopener">Hadoop家族学习路线图 | Blog</a></li>
<li><a href="https://fuhailin.github.io/Hadoop-on-MacOS/" target="_blank" rel="noopener">在Mac上配置Hadoop娱乐环境 | Blog</a></li>
</ul>
<h3 id="《Hadoop权威指南》随书资料"><a href="#《Hadoop权威指南》随书资料" class="headerlink" title="《Hadoop权威指南》随书资料"></a>《Hadoop权威指南》随书资料</h3><ul>
<li>随书源码：<a href="http://www.hadoopbook.com/code.html" target="_blank" rel="noopener">Source Code</a></li>
<li>随书数据集：<a href="http://www.hadoopbook.com/code.html" target="_blank" rel="noopener">Full Dataset</a></li>
</ul>
<h2 id="Hadoop基础"><a href="#Hadoop基础" class="headerlink" title="Hadoop基础"></a>Hadoop基础</h2><h3 id="Hadoop和Spark"><a href="#Hadoop和Spark" class="headerlink" title="Hadoop和Spark"></a>Hadoop和Spark</h3><p>Hadoop和Spark是两种不同的大数据处理框架，如下图所示。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/BigData2020/bigdata-basic-0.png" alt=""></p>
<ul>
<li>上图中的蓝色部分是Hadoop生态系统组件，黄色部分是Spark生态组件。</li>
<li>虽然它们是两种不同的大数据处理框架，但它们不是互斥的。Spark与Hadoop 中的 MapReduce 是一种相互共生的关系。</li>
<li>Hadoop 提供了 Spark 许多没有的功能，比如分布式文件系统，而 Spark 提供了实时内存计算，速度非常快。</li>
</ul>
<p>Hadoop 通常包括2个部分：存储和处理。存储部分就是Hadoop的分布式文件系统（HDFS），处理指的是MapReduce（MP）。</p>
<h3 id="Hadoop-安装和配置"><a href="#Hadoop-安装和配置" class="headerlink" title="Hadoop 安装和配置"></a>Hadoop 安装和配置</h3><ul>
<li>ref-1：<a href="https://fuhailin.github.io/Hadoop-on-MacOS/" target="_blank" rel="noopener">在Mac上配置Hadoop娱乐环境 | Blog</a></li>
<li>ref-2：<a href="https://zhuanlan.zhihu.com/p/33117305" target="_blank" rel="noopener">Mac OS X 上搭建 Hadoop 开发环境指南 | 知乎</a></li>
<li>ref-3: <a href="https://segmentfault.com/a/1190000009103629" target="_blank" rel="noopener">Mac环境下Hadoop的安装与配置 | Segmentfault</a></li>
</ul>
<h4 id="Hadoop-安装模式"><a href="#Hadoop-安装模式" class="headerlink" title="Hadoop 安装模式"></a>Hadoop 安装模式</h4><p>Hadoop 安装模式分为3种，分别是单机模式，伪分布模式和全分布模式。默认安装是单机模式。可以通过配置文件 <code>core-site.xml</code>，将默认的单机模式更改为伪分布模式。</p>
<blockquote>
<p>关于Hadoop 3种安装模式和如何使用虚拟机进行分布式安装，可以参考《Hadoop应用技术详解》书籍的第2章节——Hadoop安装。</p>
</blockquote>
<blockquote>
<p>Hadoop 的运行方式是由配置文件决定的，因此如果需要从伪分布式模式切换回非分布式模式，需要删除 <code>core-site.xml</code> 中的配置项。</p>
</blockquote>
<p>下面简单记录，如何通过修改配置文件，在 Mac 上搭建伪分布模式 Hadoop 环境。</p>
<h4 id="Hadoop-安装步骤"><a href="#Hadoop-安装步骤" class="headerlink" title="Hadoop 安装步骤"></a>Hadoop 安装步骤</h4><p>Hadoop的安装和配置步骤如下（具体细节参考上述参考链接）</p>
<ol>
<li>安装Java。</li>
<li>Mac设置中，进入“共享”设置页面，允许远程登录，使用 <code>ssh localhost</code> 进行验证。</li>
<li>下载Hadoop源码，在 <a href="https://hadoop.apache.org/" target="_blank" rel="noopener">Hadoop官网</a> 可下载，此处选择下载 <code>hadoop 2.10.0</code>。将下载的 <code>.tar.gz</code> 压缩包解压并放置到 <code>/Library/hadoop-2.10.0</code> 路径。</li>
<li>设置Hadoop环境变量</li>
</ol>
<p>(1) 打开配置文件</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">vim ~<span class="string">/.bash_profile</span></span><br></pre></td></tr></table></figure>

<p>(2) 设置环境变量</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">HADOOP_HOME</span>=/Library/hadoop-2.10.0</span><br><span class="line"><span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$&#123;HADOOP_HOME&#125;/bin</span><br><span class="line"></span><br><span class="line"><span class="attribute">HADOOP_CONF_DIR</span>=/Library/hadoop-2.10.0/etc/hadoop</span><br><span class="line"></span><br><span class="line"><span class="attribute">HADOOP_COMMON_LIB_NATIVE_DIR</span>=/Library/hadoop-2.10.0/lib/native</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> HADOOP_HOME</span><br><span class="line"><span class="builtin-name">export</span> PATH</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> HADOOP_CONF_DIR</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span> HADOOP_COMMON_LIB_NATIVE_DIR</span><br></pre></td></tr></table></figure>

<p>(3) 使配置文件生效，并验证Hadoop版本号</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">source ~<span class="string">/.bash_profile</span></span><br><span class="line"></span><br><span class="line">hadoop <span class="keyword">version</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>修改 Hadoop 的配置文件</li>
</ol>
<p>需要修改的 Hadoop 配置文件都在目录 <code>etc/hadoop</code> 下，包括</p>
<ul>
<li><code>hadoop-env.sh</code></li>
<li><code>core-site.xml</code></li>
<li><code>hdfs-site.xml</code></li>
<li><code>mapred-site.xml</code></li>
<li><code>yarn-site.xml</code></li>
</ul>
<p>下面逐步进行修改</p>
<p>(1) 修改 <code>hadoop-env.sh</code> 文件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/Library/Java/JavaVirtualMachines/jdk1.8.0_231.jdk/Contents/Home</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_HOME</span>=/Library/hadoop-2.10.0</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_CONF_DIR</span>=/Library/hadoop-2.10.0/etc/hadoop</span><br></pre></td></tr></table></figure>

<p>(2) 修改 <code>core-site.xml</code> 文件</p>
<p>设置 Hadoop 的临时目录和文件系统，<code>localhost:9000</code> 表示本地主机。如果使用远程主机，要用相应的 IP 地址来代替，填写远程主机的域名，则需要到 <code>/etc/hosts</code> 文件中做 DNS 映射。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--localhost:9000 表示本地主机--&gt;</span>&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--用来指定hadoop运行时产生文件的存放目录  自己创建--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/Users/lbs/devfiles/hadoop/hadoop-2.10.0/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Directories for software develop and save temporary files.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>(3) 修改 <code>hdfs-site.xml</code> 文件</p>
<p><code>hdfs-site.xml</code> 指定了 HDFS 的默认参数副本数，因为仅运行在一个节点上（伪分布模式），所以这里的副本数为1。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--不是root用户也可以写文件到hdfs--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span>    <span class="comment">&lt;!--关闭防火墙--&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--把路径换成本地的name位置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/Users/lbs/devfiles/hadoop/hadoop-2.10.0/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">  <span class="comment">&lt;!--在本地新建一个存放hadoop数据的文件夹，然后将路径在这里配置一下--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/Users/lbs/devfiles/hadoop/hadoop-2.10.0/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>(4) 修改 <code>mapred-site.xml</code> 文件</p>
<p>复制 <code>mapred-site.xml.template</code> 模板文件，并修改为 <code>mapred-site.xml</code> 文件，然后将 <code>yarn</code> 设置成数据处理框架，并设置 JobTracker 的主机名与端口。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定mapreduce运行在yarn上--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>(5) 修改 <code>yarn-site.xml</code> 文件</p>
<p>配置数据的处理框架 <code>yarn</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h4><p>(1) 第一次启动Hadoop，需要对 NameNode 进行格式化，后续启动不再需要执行此步骤。</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">hadoop namenode -<span class="built_in">format</span></span><br></pre></td></tr></table></figure>

<p>(2) 启动 HDFS：进入Hadoop 安装目录下的 <code>sbin</code> 目录，并启动HDFS（需要设置Mac允许远程登录，过程中共需要3次输入密码）</p>
<blockquote>
<p>Tip: 初次安装和启动时，可以执行 <code>./start-all.sh</code>，进行必要的初始化安装</p>
</blockquote>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/Library/hadoop-2.10.0/sbin</span></span><br><span class="line"></span><br><span class="line"><span class="string">./start-dfs.sh</span></span><br></pre></td></tr></table></figure>

<p>若出现下述信息，表示启动成功</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">lbsMacBook-Pro:sbin lbs$ ./start-dfs.sh</span><br><span class="line">Starting namenodes on [localhost]</span><br><span class="line">Password:</span><br><span class="line">localhost: namenode running as process 12993. Stop it first.</span><br><span class="line">Password:</span><br><span class="line">localhost: datanode running as process 32400. Stop it first.</span><br><span class="line">Starting secondary namenodes [0.0.0.0]</span><br><span class="line">Password:</span><br><span class="line">0.0.0.0:<span class="built_in"> Connection </span>closed by 127.0.0.1<span class="built_in"> port </span>22</span><br></pre></td></tr></table></figure>

<p>需要注意的是，在<code>log</code>中会显示警告</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WARN util.NativeCodeLoader: Unable to <span class="keyword">load</span> <span class="keyword">native</span>-hadoop <span class="keyword">library</span> <span class="keyword">for</span> your platform... <span class="keyword">using</span> builtin-<span class="keyword">java</span> classes <span class="keyword">where</span> applicabled的</span><br></pre></td></tr></table></figure>

<p>上述提醒是关于 Hadoop 本地库的——Hadoop本地库是为了提高效率或者某些不能用Java实现的功能组件库。可以参考 <a href="http://rockyfeng.me/hadoop_native_library_mac.html" target="_blank" rel="noopener">Mac OSX 下 Hadoop 使用本地库提高效率</a> 了解详情。</p>
<p>停止 Hadoop 方法如下</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/Library/hadoop-2.10.0/sbin</span></span><br><span class="line"></span><br><span class="line"><span class="string">./sbin/stop-dfs.sh</span></span><br></pre></td></tr></table></figure>




<p>(3) 在终端执行 <code>jps</code>，若看到如下信息，证明 Hadoop 可以成功启动。<strong>看到 <code>DataNode</code>，<code>NameNode</code> 和 <code>SecondaryNameNode</code> 信息，表明启动的是一个伪分布模式Hadoop。</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">lbsMacBook-Pro:sbin lbs$ jps</span><br><span class="line"></span><br><span class="line"><span class="number">32400</span> DataNode</span><br><span class="line"><span class="number">12993</span> NameNode</span><br><span class="line"><span class="number">30065</span> BootLanguagServerBootApp</span><br><span class="line"><span class="number">13266</span> SecondaryNameNode</span><br><span class="line"><span class="number">30039</span> org.eclipse.equinox.launcher_1<span class="number">.5</span><span class="number">.700</span>.v20200207<span class="number">-2156.</span>jar</span><br><span class="line"><span class="number">35019</span> ResourceManager</span><br><span class="line"><span class="number">35117</span> NodeManager</span><br><span class="line"><span class="number">32926</span> RunJar</span><br><span class="line"><span class="number">35199</span> Jps</span><br></pre></td></tr></table></figure>

<p>也可以访问 <code>http://localhost:50070/dfshealth.html#tab-overview</code> 来查看 Hadoop的启动情况。<strong>看到 <code>Live Node</code> 参数，证明伪分布模式 Hadoop 启动成功。</strong></p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/BigData2020/hadoop-jps-live-node-1.png" alt=""></p>
<p>(4) 启动 yarn：进入Hadoop 安装目录下的 <code>sbin</code> 目录，并启动 yarn</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/Library/hadoop-2.10.0/sbin</span></span><br><span class="line"></span><br><span class="line"><span class="string">./start-yarn.sh</span></span><br></pre></td></tr></table></figure>


<p>至此，Hadoop的安装，配置和启动就完成啦！接下来可以通过一些 shell 命令来操作 Hadoop 下的文件了，例如</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">hadoop <span class="built_in">fs</span> -ls /　　　　　　　 查看根目录下的文件及文件夹</span><br><span class="line">hadoop <span class="built_in">fs</span> -<span class="built_in">mkdir</span> /test      在根目录下创建一个文件夹 testdata</span><br><span class="line">hadoop <span class="built_in">fs</span> -rm /.../...      移除某个文件</span><br><span class="line">hadoop <span class="built_in">fs</span> -rmr /...         移除某个空的文件夹</span><br></pre></td></tr></table></figure>



<h4 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h4><h5 id="Unable-to-load-native-hadoop-library-for-your-platform"><a href="#Unable-to-load-native-hadoop-library-for-your-platform" class="headerlink" title="Unable to load native-hadoop library for your platform"></a>Unable to load native-hadoop library for your platform</h5><p>在启动 HDFS时，若看到如下警告</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">./<span class="literal">start</span>-dfs.sh</span><br></pre></td></tr></table></figure>


<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">lbsMacBook-Pro:~ lbs$ cd /Library/hadoop-2.10.0/sbin</span><br><span class="line"></span><br><span class="line">lbsMacBook-Pro:sbin lbs$ ./<span class="keyword">start</span>-dfs.sh</span><br><span class="line"></span><br><span class="line"><span class="number">20</span>/<span class="number">03</span>/<span class="number">23</span> <span class="number">08</span>:<span class="number">46</span>:<span class="number">43</span> WARN util.NativeCodeLoader: Unable <span class="keyword">to</span> <span class="keyword">load</span> <span class="keyword">native</span>-hadoop <span class="keyword">library</span> <span class="keyword">for</span> your platform... <span class="keyword">using</span> builtin-<span class="keyword">java</span> classes <span class="keyword">where</span> applicable</span><br><span class="line"><span class="keyword">Starting</span> namenodes <span class="keyword">on</span> [localhost]</span><br><span class="line"><span class="keyword">Password</span>:</span><br><span class="line">localhost: namenode running <span class="keyword">as</span> process <span class="number">93155.</span> <span class="keyword">Stop</span> it first.</span><br><span class="line"><span class="keyword">Password</span>:</span><br><span class="line">localhost: datanode running <span class="keyword">as</span> process <span class="number">93262.</span> <span class="keyword">Stop</span> it first.</span><br><span class="line"><span class="keyword">Starting</span> secondary namenodes [<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>]</span><br><span class="line"><span class="keyword">Password</span>:</span><br><span class="line"><span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>: secondarynamenode running <span class="keyword">as</span> process <span class="number">93404.</span> <span class="keyword">Stop</span> it first.</span><br></pre></td></tr></table></figure>

<p>上述提醒是关于 Hadoop 本地库的——Hadoop本地库是为了提高效率或者某些不能用Java实现的功能组件库。可以参考 <a href="http://rockyfeng.me/hadoop_native_library_mac.html" target="_blank" rel="noopener">Mac OSX 下 Hadoop 使用本地库提高效率</a> 了解详情。</p>
<h2 id="《Hadoop-应用开发技术详解》-学习笔记"><a href="#《Hadoop-应用开发技术详解》-学习笔记" class="headerlink" title="《Hadoop 应用开发技术详解》 学习笔记"></a>《Hadoop 应用开发技术详解》 学习笔记</h2><h3 id="MapReduce快速入门-WordCount"><a href="#MapReduce快速入门-WordCount" class="headerlink" title="MapReduce快速入门-WordCount"></a>MapReduce快速入门-WordCount</h3><ul>
<li><a href="https://www.jianshu.com/p/35ef70dfb651" target="_blank" rel="noopener">Intellij 开发Hadoop环境搭建 - WordCount | 简书</a></li>
<li><a href="https://www.cnblogs.com/airnew/p/9540982.html" target="_blank" rel="noopener">使用IDEA编写第一个MapReduce程序</a></li>
<li><a href="https://www.polarxiong.com/archives/Hadoop-Intellij%E7%BB%93%E5%90%88Maven%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C%E5%92%8C%E8%B0%83%E8%AF%95MapReduce%E7%A8%8B%E5%BA%8F-%E6%97%A0%E9%9C%80%E6%90%AD%E8%BD%BDHadoop%E5%92%8CHDFS%E7%8E%AF%E5%A2%83.html" target="_blank" rel="noopener">Intellij结合Maven本地运行和调试MapReduce程序</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/43042078" target="_blank" rel="noopener">一起学Hadoop——第一个MapReduce程序</a></li>
</ul>
<h4 id="工程创建"><a href="#工程创建" class="headerlink" title="工程创建"></a>工程创建</h4><ol>
<li>使用IDEA创建一个基于Maven的工程——WordCount</li>
<li>在 <code>pom.xml</code> 中添加如下依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.lbs0912<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wordcount<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加 apache 镜像源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>apache<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加如下依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建 <code>WordMapper</code> 类</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package wordcount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> WordMapper extends Mapper&lt;<span class="keyword">Object</span>, <span class="type">Text</span>, <span class="type">Text</span>, IntWritable&gt; &#123;</span><br><span class="line">    IntWritable one = <span class="built_in">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="type">Text</span> word = <span class="built_in">new</span> Text();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> map(<span class="keyword">Object</span> key, <span class="type">Text</span> <span class="keyword">value</span>, Context context) throws IOException, InterruptedException &#123;</span><br><span class="line">        StringTokenizer itr = <span class="built_in">new</span> StringTokenizer(<span class="keyword">value</span>.toString());</span><br><span class="line">        <span class="keyword">while</span> (itr.hasMoreTokens()) &#123;</span><br><span class="line">            word.<span class="keyword">set</span>(itr.nextToken());</span><br><span class="line">            context.<span class="keyword">write</span>(word, one);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ol start="4">
<li>创建 <code>WordReducer</code> 类</li>
</ol>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wordcount;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.<span class="type">IntWritable</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.<span class="type">Text</span>;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.<span class="type">Reducer</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">WordReducer</span> <span class="keyword">extends</span> <span class="title">Reducer&lt;Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable&gt;</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">IntWritable</span> result = <span class="keyword">new</span> <span class="type">IntWritable</span>();</span><br><span class="line"></span><br><span class="line">    public void reduce(<span class="type">Text</span>	key, <span class="type">Iterable</span>&lt;<span class="type">IntWritable</span>&gt; values, <span class="type">Context</span> context) <span class="keyword">throws</span> <span class="type">IOException</span>,<span class="type">InterruptedException</span> &#123;</span><br><span class="line">        int sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">IntWritable</span> <span class="keyword">val</span>:values) &#123;</span><br><span class="line">            sum += <span class="keyword">val</span>.get();</span><br><span class="line">        &#125;</span><br><span class="line">        result.set(sum);</span><br><span class="line">        context.write(key,result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ol start="5">
<li>创建 <code>WordMain</code> 驱动类</li>
</ol>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package wordcount;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.conf.Configuration;</span><br><span class="line">import org.apache.hadoop.fs.Path;</span><br><span class="line">import org.apache.hadoop.io.IntWritable;</span><br><span class="line">import org.apache.hadoop.io.Text;</span><br><span class="line">import org.apache.hadoop.mapreduce.Job;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line">import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line">import org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> WordMain &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) throws Exception &#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> <span class="constructor">Configuration()</span>;</span><br><span class="line">        String<span class="literal">[]</span> otherArgs = <span class="keyword">new</span> <span class="constructor">GenericOptionsParser(<span class="params">conf</span>, <span class="params">args</span>)</span>.get<span class="constructor">RemainingArgs()</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里必须有输入/输出</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (otherArgs.length != <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>err.println(<span class="string">"Usage: WordCount &lt;in&gt; &lt;out&gt;"</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>exit(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Job job = <span class="keyword">new</span> <span class="constructor">Job(<span class="params">conf</span>, <span class="string">"wordcount"</span>)</span>;</span><br><span class="line">        job.set<span class="constructor">JarByClass(WordMain.<span class="params">class</span>)</span>;       <span class="comment">//主类</span></span><br><span class="line">        job.set<span class="constructor">MapperClass(WordMapper.<span class="params">class</span>)</span>;     <span class="comment">//Mapper</span></span><br><span class="line">        job.set<span class="constructor">CombinerClass(WordReducer.<span class="params">class</span>)</span>;  <span class="comment">//作业合成类</span></span><br><span class="line">        job.set<span class="constructor">ReducerClass(WordReducer.<span class="params">class</span>)</span>;    <span class="comment">//Reducer</span></span><br><span class="line">        job.set<span class="constructor">OutputKeyClass(Text.<span class="params">class</span>)</span>;       <span class="comment">//设置作业输出数据的关键类</span></span><br><span class="line">        job.set<span class="constructor">OutputValueClass(IntWritable.<span class="params">class</span>)</span>;  <span class="comment">//设置作业输出值类</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">FileInputFormat</span>.</span></span>add<span class="constructor">InputPath(<span class="params">job</span>, <span class="params">new</span> Path(<span class="params">otherArgs</span>[0])</span>);   <span class="comment">//文件输入</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">FileOutputFormat</span>.</span></span>set<span class="constructor">OutputPath(<span class="params">job</span>, <span class="params">new</span> Path(<span class="params">otherArgs</span>[1])</span>);  <span class="comment">//文件输出</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>exit(job.wait<span class="constructor">ForCompletion(<span class="params">true</span>)</span> ? <span class="number">0</span> : <span class="number">1</span>);   <span class="comment">//等待完成退出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h4 id="IDEA中直接运行程序"><a href="#IDEA中直接运行程序" class="headerlink" title="IDEA中直接运行程序"></a>IDEA中直接运行程序</h4><ul>
<li><a href="https://www.jianshu.com/p/35ef70dfb651" target="_blank" rel="noopener">Intellij 开发Hadoop环境搭建 - WordCount | 简书</a></li>
</ul>
<p>选择 <code>Run -&gt; Edit Configurations</code>, 在程序参数栏目中输入 <code>input/ output</code>，如下图所示</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/BigData2020/hadoop-wordcount-2.png" alt=""></p>
<p>在 <code>input</code> 目录中添加统计单词个数的测试的文件 <code>wordcount1.txt</code></p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">Hello，i love coding</span><br><span class="line">are you ok?</span><br><span class="line">Hello, i love hadoop</span><br><span class="line">are you ok?</span><br></pre></td></tr></table></figure>

<p>再次运行程序，会看到如下的 <code>output</code> 目录结构</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">- input</span><br><span class="line">- output</span><br><span class="line">    <span class="string">| - ._SUCCESS.crc</span></span><br><span class="line">    <span class="string">| - .part-r-00000.crc</span></span><br><span class="line">    <span class="string">| - ._SUCCESS</span></span><br><span class="line">    <span class="string">| - part-r-00000</span></span><br></pre></td></tr></table></figure>

<p>打开 <code>part-r-00000</code> 文件，即可看到单词出现次数的统计结果</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Hello,	<span class="number">1</span></span><br><span class="line">Hello，i	<span class="number">1</span></span><br><span class="line">are	<span class="number">2</span></span><br><span class="line">coding	<span class="number">1</span></span><br><span class="line">hadoop	<span class="number">1</span></span><br><span class="line">i	<span class="number">1</span></span><br><span class="line">love	<span class="number">2</span></span><br><span class="line">ok?	<span class="number">2</span></span><br><span class="line">you	<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，由于Hadoop的设定，下次运行程序前，需要先删除output文件目录。</p>
<h4 id="导出jar包运行程序"><a href="#导出jar包运行程序" class="headerlink" title="导出jar包运行程序"></a>导出jar包运行程序</h4><ol>
<li>在 <code>File -&gt; Project Structure</code> 选项中，为工程添加 <code>Artifacts</code>，选择 <code>WordMain</code> 类</li>
</ol>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/BigData2020/hadoop-wordcount-0.png" alt=""></p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/BigData2020/hadoop-wordcount-1.png" alt=""></p>
<ol start="2">
<li>选择 <code>Build -&gt; Build Artifacts...</code>，生成 <code>.jar</code> 文件</li>
</ol>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/BigData2020/hadoop-wordcount-3.png" alt=""></p>
<ol start="3">
<li>进入HDFS系统目录(不是其余文件系统目录)，执行下述命令</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">hadoop jar WordCount.jar <span class="keyword">input</span>/ <span class="keyword">out</span>/</span><br></pre></td></tr></table></figure>




<h3 id="HDFS分布式文件系统详解"><a href="#HDFS分布式文件系统详解" class="headerlink" title="HDFS分布式文件系统详解"></a>HDFS分布式文件系统详解</h3><h4 id="认识HDFS"><a href="#认识HDFS" class="headerlink" title="认识HDFS"></a>认识HDFS</h4><p>HDFS（<code>Hadoop Distributed File System</code>）是一个用在普通硬件设备上的分布式文件系统。 HDFS 具有高容错性（<code>fault-tolerant</code>）和高吞吐量（<code>high throughput</code>），适合有超大数据集的应用程序，可以实现通过流的形式访问文件系统中的数据。</p>
<p>运行在HDFS之上的应用程序必须流式地访问它们的数据集，它不是典型的运行在常规的文件系统之上的常规程序。HDFS的设计适合批量处理，而不是用户交互式的，重点是数据吞吐量，而不是数据访问的反应时间。</p>
<p>HDFS以块序列的形式存储每一个文件，文件中除了最后一个块的其他块都是相同的大小。</p>
<h4 id="HDFS架构"><a href="#HDFS架构" class="headerlink" title="HDFS架构"></a>HDFS架构</h4><p>HDFS 为Hadoop 这个分布式计算框架一共高性能，高可靠，高可扩展的存储服务。HDFS是一个典型的主从架构，一个HDFS集群是由一个主节点（<code>Namenode</code>）和一定数目的从节点（<code>Datanodes</code>）组成。</p>
<ul>
<li>Namenode 是一个中心服务器，负责管理文件系统的名字空间（<code>namespace</code>）以及客户端对文件的访问。同时确定块和数据节点的映射。<ul>
<li>提供名称查询服务，它是一个 Jetty 服务器</li>
<li>保存 <code>metadata</code> 信息，包括文件 <code>owership</code> 和 <code>permissions</code>，文件包含有哪些块，<code>Block</code> 保存在哪个 <code>DataNode</code> 等</li>
<li>NameNode 的 <code>metadata</code> 信息在启动后会加载到内存中</li>
</ul>
</li>
<li>Datanode一般是一个节点一个，负责管理它所在节点上的存储。<strong>DataNode 通常以机架的形式组织，机架通过一个交换机将所有系统连接起来。</strong> DataNode的功能包括<ul>
<li>保存Block，每个块对应一个元数据信息文件</li>
<li>启动DataNode线程的时候会向NameNode汇报Block信息</li>
<li>通过向NameNode发送心跳保持与其联系（3秒一次）</li>
</ul>
</li>
</ul>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/BigData2020/hadoop-hdfs-architecture-1.png" alt=""></p>
<ul>
<li>机架（<code>Rack</code>）：一个 Block 的三个副本通常会保存到两个或者两个以上的机架中，进行防灾容错</li>
<li>数据块（<code>Block</code>）是 HDFS 文件系统基本的存储单位，Hadoop 1.X 默认大小是 64MB，Hadoop 2.X 默认大小是 128MB。HDFS上的文件系统被划分为块大小的多个分块（<code>Chunk</code>）作为独立的存储单元。和其他文件系统不同的是，HDFS上小于一个块大小的文件不会占据整个块的空间。使用块抽象而非整个文件作为存储单元，大大简化了存储子系统的设计。</li>
<li>辅助元数据节点（<code>SecondaryNameNode</code>）负责镜像备份，日志和镜像的定期合并。</li>
</ul>
<blockquote>
<p>使用 <code>hadoop fsk / -files -blocks</code> 可以显示块的信息。</p>
</blockquote>
<p>Block 数据块大小设置的考虑因素包括</p>
<ol>
<li>减少文件寻址时间</li>
<li>减少管理快的数据开销，因每个快都需要在 NameNode 上有对应的记录</li>
<li>对数据块进行读写，减少建立网络的连接成本</li>
</ol>
<h4 id="块备份原理"><a href="#块备份原理" class="headerlink" title="块备份原理"></a>块备份原理</h4><p>Block 是 HDFS 文件系统的最小组成单元，它通过一个 <code>Long</code> 整数被唯一标识。每个 Block 会有多个副本，默认有3个副本。为了数据的安全和高效，Hadoop 默认对3个副本的存放策略如下图所示</p>
<ul>
<li>第1块：在本地机器的HDFS目录下存储一个 Block</li>
<li>第2块：不同 Rack 的某个 DataNode 上存储一个 Block</li>
<li>第3块：在该机器的同一个 Rack 下的某台机器上存储一个Block</li>
</ul>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/BigData2020/hadoop-hdfs-architecture-block-1.png" alt=""></p>
<p>这样的策略可以保证对该 Block 所属文件的访问能够优先在本 Rack 下找到。如果整个 Rack 发生了异常，也可以在另外的 Rack 找到该 Block 的副本。这样足够高效，并且同时做到了数据的容错。</p>
<h4 id="Hadoop的RPC机制"><a href="#Hadoop的RPC机制" class="headerlink" title="Hadoop的RPC机制"></a>Hadoop的RPC机制</h4><p>RPC（<code>Remote Procedure Call</code>）即远程过程调用机制会面临2个问题</p>
<ol>
<li>对象调用方式</li>
<li>序列/反序列化机制</li>
</ol>
<p>RPC 架构如下图所示。Hadoop 自己实现了简单的 RPC 组件，依赖于 <code>Hadoop Writable</code> 类型的支持。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/BigData2020/hadoop-hdfs-architecture-rpc-1.png" alt=""></p>
<p><code>Hadoop Writable</code> 接口要求每个实现类多要确保将本类的对象正确序列化（<code>writeObject</code>）和反序列化（<code>readObject</code>）。因此，Hadoop RPC 使用 Java 动态代理和反射实现对象调用方式，客户端到服务器数据的序列化和反序列化由 Hadoop框架或用户自己来实现，也就是数据组装定制的。</p>
<blockquote>
<p>Hadoop RPC = 动态代理 + 定制的二进制流</p>
</blockquote>
<h3 id="开源数据库HBase"><a href="#开源数据库HBase" class="headerlink" title="开源数据库HBase"></a>开源数据库HBase</h3><h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><ul>
<li>HBase 是一个可伸缩的分布式的，面向列的开源数据库，是一个适合于非结构化数据存储的数据库。需要注意的是，HBase 是基于列的而不是基于行的模式。</li>
<li>利用 HBase 技术可以在廉价 PC Server上搭建大规模结构化存储集群。</li>
<li>HBase 是 Google Bigtable 的开源实现，与 Google Bigtable 利用GFS作为其文件存储系统类似， HBase 利用 Hadoop HDFS 作为其文件存储系统。Google 运行 MapReduce 来处理 Bigtable 中的海量数据，HBase 同样利用 Hadoop MapReduce 来处理海量数据。Google Bigtable 利用 Chubby 作为协同服务，HBase 利用 Zookeeper 作为对应。</li>
</ul>
<p>HBase 的特点如下</p>
<ol>
<li>大：一个表可以有上亿行，上百万列</li>
<li>面向列：面向列（族）的存储和权限控制，列（族）独立检索</li>
<li>稀疏：对于为空（NULL）的列，并不占用存储空间，因此，表可以设计的非常稀疏。</li>
<li></li>
</ol>
<h2 id="Hadoop-实战Demo"><a href="#Hadoop-实战Demo" class="headerlink" title="Hadoop 实战Demo"></a>Hadoop 实战Demo</h2><blockquote>
<p>有句话说得好，“大数据胜于算法”，意思是说对于某些应用（例如根据以往的偏好来推荐电影和音乐），不论算法有多牛，基于小数据的推荐效果往往都不如基于大量可用数据的一般算法的推荐效果。 —— 《Hadoop 权威指南》</p>
</blockquote>
<ul>
<li><a href="http://blog.fens.me/hadoop-mapreduce-recommend/" target="_blank" rel="noopener">用Hadoop构建电影推荐系统 | 粉丝日志</a></li>
<li><a href="http://blog.fens.me/hadoop-mahout-recommend-job/" target="_blank" rel="noopener">用Mahout构建职位推荐引擎 | 粉丝日志</a></li>
</ul>
]]></content>
      <categories>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>BigData</tag>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode题解-005</title>
    <url>/2020/02/28/leetcode-005/</url>
    <content><![CDATA[<ul>
<li>记录LeetCode题目笔记，汇总LeetCode解答记录</li>
</ul>
<a id="more"></a>



<h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><ul>
<li>2020/02/23，撰写</li>
<li>2020/02/28，整理完成</li>
</ul>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul>
<li><a href="https://leetcode-cn.com/problems/sum-of-two-integers/" target="_blank" rel="noopener">LeetCode-371. 两整数之和</a></li>
<li><a href="https://leetcode-cn.com/problems/detect-capital/" target="_blank" rel="noopener">LeetCode-520. 检测大写字母</a></li>
<li><a href="https://leetcode-cn.com/problems/nim-game/" target="_blank" rel="noopener">LeetCode-292. Nim 游戏</a></li>
<li><a href="https://leetcode-cn.com/problems/rising-temperature/" target="_blank" rel="noopener">LeetCode-197. 上升的温度</a></li>
<li><a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">LeetCode-136. 只出现一次的数字</a></li>
</ul>
<h2 id="371-两整数之和"><a href="#371-两整数之和" class="headerlink" title="371. 两整数之和"></a>371. 两整数之和</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode-cn.com/problems/sum-of-two-integers/" target="_blank" rel="noopener">LeetCode-371. 两整数之和</a></li>
</ul>
<h3 id="Approach-1-位运算"><a href="#Approach-1-位运算" class="headerlink" title="Approach 1-位运算"></a>Approach 1-位运算</h3><h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>利用位运算求解。</p>
<ul>
<li>情况1：无进位的加法</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>+<span class="number">2</span>=<span class="number">7</span></span><br><span class="line"> 加法            情况<span class="number">1</span>：无进位加法</span><br><span class="line">  <span class="number">0101</span>               <span class="number">0101</span>                      </span><br><span class="line">+ <span class="number">0010</span>          XOR  <span class="number">0010</span></span><br><span class="line">--------         ----------</span><br><span class="line">  <span class="number">0111</span>               <span class="number">0111</span></span><br></pre></td></tr></table></figure>

<p>如上所示，在无进位的情况下，加法可以使用异或运算 <code>XOR</code> 替代。</p>
<p>情况2：有进位的加法</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>+<span class="number">7</span>=<span class="number">12</span></span><br><span class="line"></span><br><span class="line"> 加法        情况<span class="number">2</span>           情况<span class="number">2</span>           情况<span class="number">1</span>：无进位加法</span><br><span class="line">  <span class="number">0101</span>         <span class="number">0101</span>   进位carry <span class="number">1010</span>      进位carry <span class="number">0100</span>    </span><br><span class="line">+ <span class="number">0111</span>     XOR <span class="number">0111</span>  |--&gt; XOR   <span class="number">0010</span>    |--&gt; XOR   <span class="number">1000</span></span><br><span class="line">--------   --------  |       --------   |        --------</span><br><span class="line">  <span class="number">1100</span>         <span class="number">0010</span> --          <span class="number">1000</span> ----           <span class="number">1100</span></span><br></pre></td></tr></table></figure>
<p>在有进位的情况下，若发生进位，则对应的位上a和b的二进制值均为1。利用与运算可以求解到进位的数值。由于要进位，因此再将与操作的结果向左移动一位即可。即 <code>carry = (a&amp;b)&lt;&lt;1</code>。</p>
<p>得到进位数值，就可以转换为 <code>情况1：无进位的加法</code> 求解。</p>
<p>综上，求解思路可以总结为</p>
<ul>
<li>异或求解无进位情况下的和，<code>sum = a^b</code>（情况1）</li>
<li>判断进位 <code>carry</code>，若不为0，则为情况2，<code>carry = (a&amp;b)&lt;&lt;1</code>，问题转化为了求解 <code>carry</code> 和 <code>sum</code>的和</li>
</ul>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>C++：</li>
</ul>
<p>递归函数实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">int</span> sum = a^b;</span><br><span class="line">        <span class="keyword">int</span> carry = (a&amp;b)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//or</span></span><br><span class="line">        <span class="comment">//leetcode 中文版不支持负值左移动，需要改为无符号数</span></span><br><span class="line">        <span class="comment">//int carry = (unsigned int)(a&amp;b)&lt;&lt;1;</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> getSum(sum,carry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者将其简写为1行</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (b==<span class="number">0</span>)? a: getSum(a^b,(a&amp;b)&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>迭代实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> carry;</span><br><span class="line">        <span class="keyword">while</span>(b)&#123;</span><br><span class="line">            carry = a &amp; b; </span><br><span class="line">            a = a ^ b;   <span class="comment">//sum</span></span><br><span class="line">            b = carry &lt;&lt;<span class="number">1</span>;  <span class="comment">//carry</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//or</span></span><br><span class="line">            <span class="comment">//leetcode 中文版不支持负值左移动，需要改为无符号数</span></span><br><span class="line">            <span class="comment">// b = (unsigned int)carry&lt;&lt;1;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>





<h2 id="520-检测大写字母"><a href="#520-检测大写字母" class="headerlink" title="520. 检测大写字母"></a>520. 检测大写字母</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode-cn.com/problems/detect-capital/" target="_blank" rel="noopener">LeetCode-520. 检测大写字母</a></li>
</ul>
<p>给定一个单词，你需要判断单词的大写使用是否正确。</p>
<p>我们定义，在以下情况时，单词的大写用法是正确的</p>
<pre><code>1. 全部字母都是大写，比如&quot;USA&quot;。
2. 单词中所有字母都不是大写，比如&quot;leetcode&quot;。
3. 如果单词不只含有一个字母，只有首字母大写，比如 &quot;Google&quot;。</code></pre><p>否则，我们定义这个单词没有正确使用大写字母。</p>
<p>示例 1</p>
<pre><code>输入: &quot;USA&quot;
输出: True</code></pre><p>示例 2</p>
<pre><code>输入: &quot;FlaG&quot;
输出: False</code></pre><p>注意: 输入是由大写和小写拉丁字母组成的非空单词。</p>
<h3 id="Approach-1-ASCII码值"><a href="#Approach-1-ASCII码值" class="headerlink" title="Approach 1-ASCII码值"></a>Approach 1-ASCII码值</h3><h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>使用字母的ASCII值进行判断。</p>
<p>大写字母的ASCII值范围是<code>65~90</code>，小写字母的ASCII值范围是<code>97~122</code>。</p>
<p>总结判断逻辑如下</p>
<ol>
<li>若字母长度为1，直接返回 true</li>
<li>如果（第一个字母小写） 或者 （第一个字母大写且第2个字母小写），若后续字母全部小写，则符合条件，大写使用正确</li>
<li>如果前2个字母大写，若后续字母全部大写，则符合条件，大写使用正确</li>
</ol>
<h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java 实现1： 使用 <code>charAt(index)</code> 实现</li>
</ul>
<p>Java中，<code>charAt(index)</code> 函数可以返回字符串中指定索引值处（<code>index</code>）的字母，函数返回类型是 <code>char</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">detectCapitalUse</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> wordLength = word.length();</span><br><span class="line">        <span class="comment">//由于后续for循环中使用到了word[i]且i初始值为1，因此要先对wordLength=1的情况进行判断</span></span><br><span class="line">        <span class="keyword">if</span>(wordLength == <span class="number">1</span>)&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;       </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(word.charAt(<span class="number">0</span>) &gt;= <span class="number">97</span> || (word.charAt(<span class="number">0</span>) &lt;= <span class="number">90</span> &amp;&amp; word.charAt(<span class="number">1</span>) &gt;= <span class="number">97</span>))&#123;</span><br><span class="line">            <span class="comment">//第1个字母小写 或者第1个字母大写并且第2个字母小写</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;wordLength;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(word.charAt(i) &lt;= <span class="number">90</span>)&#123;  <span class="comment">//后续字母中出现大写字母</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//前两个字母均大写</span></span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;wordLength;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(word.charAt(i) &gt;= <span class="number">97</span>)&#123;  <span class="comment">//后续字母中出现小写字母</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>Java 实现2： 使用 <code>codePointAt(index)</code> 实现</li>
</ul>
<p>Java中，<code>codePointAt(index)</code> 函数可以返回字符串中指定索引值处（<code>index</code>）字母的ASCII值，函数返回类型是 <code>int</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Java</span></span><br><span class="line"> String word = <span class="string">"LiuBaoshuai"</span>;</span><br><span class="line"> <span class="keyword">char</span> myChar = charAt(word[<span class="number">3</span>]);   <span class="comment">// B</span></span><br><span class="line"> Character.codePointAt(word,<span class="number">3</span>);   <span class="comment">// 66</span></span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">detectCapitalUse</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> wordLength = word.length();</span><br><span class="line">        <span class="keyword">if</span>(wordLength == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Character.codePointAt(word,<span class="number">0</span>) &gt;= <span class="number">97</span> || (Character.codePointAt(word,<span class="number">0</span>) &lt;= <span class="number">90</span> &amp;&amp; Character.codePointAt(word,<span class="number">1</span>) &gt;= <span class="number">97</span>))&#123;</span><br><span class="line">            <span class="comment">//第1个字母小写 或者第1个字母大写并且第2个字母消息</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;wordLength;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Character.codePointAt(word,i) &lt;= <span class="number">90</span>)&#123;  <span class="comment">//后续字母中出现大写字母</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//前两个字母均大写</span></span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;wordLength;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Character.codePointAt(word,i) &gt;= <span class="number">97</span>)&#123;  <span class="comment">//后续字母中出现小写字母</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">detectCapitalUse</span><span class="params">(<span class="built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> wordLength = word.length();   <span class="comment">//.length()</span></span><br><span class="line">	    <span class="keyword">int</span> codeFirst = (<span class="keyword">int</span>)word[<span class="number">0</span>];</span><br><span class="line">	     <span class="comment">//由于后续for循环中使用到了word[i]且i初始值为1，因此要先对wordLength=1的情况进行判断</span></span><br><span class="line">        <span class="keyword">if</span>(wordLength == <span class="number">1</span>)&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;       </span><br><span class="line">        &#125;</span><br><span class="line">		<span class="keyword">if</span>(codeFirst &lt;= <span class="number">90</span>)&#123;   <span class="comment">//首字母大写   </span></span><br><span class="line">			<span class="keyword">if</span>((<span class="keyword">int</span>)word[<span class="number">1</span>] &lt;= <span class="number">90</span>)&#123;  <span class="comment">//第2个字母大写</span></span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;wordLength;i++)&#123;</span><br><span class="line">					<span class="keyword">int</span> code = (<span class="keyword">int</span>)word[i];</span><br><span class="line">					<span class="keyword">if</span>(code &gt;= <span class="number">97</span>)&#123;    <span class="comment">//后续字母中有小写</span></span><br><span class="line">						<span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">//TESt</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;  <span class="comment">//第2个字母小写</span></span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;wordLength;i++)&#123;</span><br><span class="line">					<span class="keyword">int</span> code = (<span class="keyword">int</span>)word[i];</span><br><span class="line">					<span class="keyword">if</span>(code &lt;= <span class="number">90</span>)&#123;   <span class="comment">//后续字母中出现大写</span></span><br><span class="line">						<span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">//TesT</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;  <span class="comment">//首字母小写  </span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;wordLength;i++)&#123;</span><br><span class="line">			    <span class="keyword">int</span> code = (<span class="keyword">int</span>)word[i];</span><br><span class="line">				<span class="keyword">if</span>(code &lt;= <span class="number">90</span>)&#123;  <span class="comment">//检测到大写字母</span></span><br><span class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="Approach-2-直接使用内置大小写判断函数"><a href="#Approach-2-直接使用内置大小写判断函数" class="headerlink" title="Approach 2-直接使用内置大小写判断函数"></a>Approach 2-直接使用内置大小写判断函数</h3><h4 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h4><p>也可以直接使用语音内置的大小写判断函数实现。</p>
<h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">detectCapitalUse</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> wordLength = word.length();</span><br><span class="line">        <span class="keyword">if</span>(wordLength == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(Character.isLowerCase(word.charAt(<span class="number">0</span>)) || (Character.isUpperCase(word.charAt(<span class="number">0</span>)) &amp;&amp; Character.isLowerCase(word.charAt(<span class="number">1</span>))))&#123;</span><br><span class="line">            <span class="comment">//首字母小写 或者第1个字母大写并且第2个字母小写 </span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;wordLength;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Character.isUpperCase(word.charAt(i))) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;wordLength;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Character.isLowerCase(word.charAt(i))) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">detectCapitalUse</span><span class="params">(<span class="built_in">string</span> word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> wordLength = word.length();</span><br><span class="line">        <span class="keyword">if</span>(wordLength &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">islower</span>(word[<span class="number">0</span>]) || (<span class="built_in">isupper</span>(word[<span class="number">0</span>]) &amp;&amp; <span class="built_in">islower</span>(word[<span class="number">1</span>])))&#123;  </span><br><span class="line">         <span class="comment">//首字母小写 或者第1个字母大写并且第2个字母小写    </span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;wordLength;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">isupper</span>(word[i]))&#123;  <span class="comment">//后续出现大写字母</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">// gooGle   GooGle</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span>&#123;   <span class="comment">//前两个字母均大写</span></span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;wordLength;i++)&#123;</span><br><span class="line">                 <span class="keyword">if</span>(<span class="built_in">islower</span>(word[i]))&#123;</span><br><span class="line">                     <span class="keyword">return</span> <span class="literal">false</span>;      <span class="comment">//GOOgle</span></span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Approach-3-正则匹配实现"><a href="#Approach-3-正则匹配实现" class="headerlink" title="Approach 3-正则匹配实现"></a>Approach 3-正则匹配实现</h3><h4 id="Analysis-3"><a href="#Analysis-3" class="headerlink" title="Analysis"></a>Analysis</h4><p>总结判断逻辑如下</p>
<ol>
<li>若字母长度为1，直接返回 true</li>
<li>如果（第一个字母小写） 或者 （第一个字母大写且第2个字母小写），若后续字母全部小写，则符合条件，大写使用正确</li>
<li>如果前2个字母大写，若后续字母全部大写，则符合条件，大写使用正确</li>
</ol>
<h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java 实现1： 正则匹配</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">detectCapitalUse</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> word.matches(<span class="string">"[A-Z]+|[a-z]+|[A-Z][a-z]+"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>Java 实现2： 正则匹配</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">detectCapitalUse</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> word.equals(word.toUpperCase()) || </span><br><span class="line">               word.equals(word.toLowerCase()) ||</span><br><span class="line">               Character.isUpperCase(word.charAt(<span class="number">0</span>)) &amp;&amp; </span><br><span class="line">               word.substring(<span class="number">1</span>).equals(word.substring(<span class="number">1</span>).toLowerCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<h2 id="292-Nim-游戏"><a href="#292-Nim-游戏" class="headerlink" title="292. Nim 游戏"></a>292. Nim 游戏</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode-cn.com/problems/nim-game/" target="_blank" rel="noopener">LeetCode-292. Nim 游戏</a></li>
</ul>
<p>你和你的朋友，两个人一起玩 Nim 游戏：桌子上有一堆石头，每次你们轮流拿掉 <code>1-3</code> 块石头。 拿掉最后一块石头的人就是获胜者。你作为先手。</p>
<p>你们是聪明人，每一步都是最优解。 </p>
<p>编写一个函数，来判断你是否可以在给定石头数量的情况下赢得游戏。</p>
<p>示例</p>
<pre><code>输入: 4
输出: false 
解释: 如果堆中有 4 块石头，那么你永远不会赢得比赛； 
因为无论你拿走 1 块、2 块 还是 3 块石头，最后一块石头总是会被你的朋友拿走。</code></pre><h3 id="Approach-1-数值分析"><a href="#Approach-1-数值分析" class="headerlink" title="Approach 1-数值分析"></a>Approach 1-数值分析</h3><h4 id="Analysis-4"><a href="#Analysis-4" class="headerlink" title="Analysis"></a>Analysis</h4><p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/leetcode/leetcode-292-nim-game.png" alt="leetcode-292-nim-game.png"></p>
<p>如上图所示</p>
<ol>
<li>当石头总数为4时，A（先取者）一定是会输的；</li>
<li>当石头总数为5/6/7时，如果A首先拿走1/2/3个石头，那么B将面对剩下4个石头的情况，转化为了情况1，此时B一定是会输的；</li>
<li>当石头总数为8个时，无论A首先拿走几个，B都可以留下4个石头给A，转化为情况1，因此A一定是会输的；</li>
<li>当石头总数为9/10/11个时，A可以首先拿走1/2/3个，给B留下8个石头，转化为情况3，此时B一定是会输的</li>
</ol>
<p>从上述分析可以看到，当有一方面对的石头数目是4个或者4的倍数，那么他一定是会输的。</p>
<h4 id="Solutiuon"><a href="#Solutiuon" class="headerlink" title="Solutiuon"></a>Solutiuon</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (n%<span class="number">4</span> != <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n%<span class="number">4</span> != <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="197-上升的温度-SQL"><a href="#197-上升的温度-SQL" class="headerlink" title="197. 上升的温度(SQL)"></a>197. 上升的温度(SQL)</h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode-cn.com/problems/rising-temperature/" target="_blank" rel="noopener">LeetCode-197. 上升的温度</a></li>
</ul>
<p>给定一个 Weather 表，编写一个 SQL 查询，来查找与之前（昨天的）日期相比温度更高的所有日期的 Id。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">+<span class="comment">---------+------------------+------------------+</span></span><br><span class="line">| Id(INT) | RecordDate(DATE) | Temperature(INT) |</span><br><span class="line">+<span class="comment">---------+------------------+------------------+</span></span><br><span class="line">|       1 |       2015-01-01 |               10 |</span><br><span class="line">|       2 |       2015-01-02 |               25 |</span><br><span class="line">|       3 |       2015-01-03 |               20 |</span><br><span class="line">|       4 |       2015-01-04 |               30 |</span><br><span class="line">+<span class="comment">---------+------------------+------------------+</span></span><br></pre></td></tr></table></figure>

<p>例如，根据上述给定的 Weather 表格，返回如下 Id:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">+<span class="comment">----+</span></span><br><span class="line">| Id |</span><br><span class="line">+<span class="comment">----+</span></span><br><span class="line">|  2 |</span><br><span class="line">|  4 |</span><br><span class="line">+<span class="comment">----+</span></span><br></pre></td></tr></table></figure>


<h3 id="Approach-1-DATEDIFF实现"><a href="#Approach-1-DATEDIFF实现" class="headerlink" title="Approach 1-DATEDIFF实现"></a>Approach 1-DATEDIFF实现</h3><h4 id="Analysis-5"><a href="#Analysis-5" class="headerlink" title="Analysis"></a>Analysis</h4><p><code>DATEDIFF(A,B)</code> 函数可以返回 A 和 B 之间的天数</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">DATEDIFF('<span class="number">2007</span><span class="number">-12</span><span class="number">-31</span>','<span class="number">2007</span><span class="number">-12</span><span class="number">-30</span>');   # <span class="number">1</span></span><br><span class="line">DATEDIFF('<span class="number">2010</span><span class="number">-12</span><span class="number">-30</span>','<span class="number">2010</span><span class="number">-12</span><span class="number">-31</span>');   # <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<p>本题中，查询的条件有2个</p>
<ol>
<li>与之前的日期相差为 1</li>
<li>比之前的温度高</li>
</ol>
<h4 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> b.Id</span><br><span class="line"><span class="keyword">FROM</span> Weather <span class="keyword">as</span> a,Weather <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.Temperature &lt; b.Temperature <span class="keyword">and</span> <span class="keyword">DATEDIFF</span>(a.RecordDate,b.RecordDate) = <span class="number">-1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Approach-2-TO-DAYS实现"><a href="#Approach-2-TO-DAYS实现" class="headerlink" title="Approach 2-TO_DAYS实现"></a>Approach 2-TO_DAYS实现</h3><h4 id="Analysis-6"><a href="#Analysis-6" class="headerlink" title="Analysis"></a>Analysis</h4><p><code>TO_DAYS(A)</code> 函数返回了第0年和第A年之间的天数</p>
<h4 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> b.Id</span><br><span class="line"><span class="keyword">FROM</span> Weather <span class="keyword">as</span> a,Weather <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.Temperature &lt; b.Temperature <span class="keyword">and</span> <span class="keyword">TO_DAYS</span>(b.RecordDate) - <span class="keyword">TO_DAYS</span>(a.RecordDate) = <span class="number">1</span></span><br></pre></td></tr></table></figure>



<h2 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136. 只出现一次的数字"></a>136. 只出现一次的数字</h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">LeetCode-136. 只出现一次的数字</a></li>
</ul>
<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p>说明</p>
<pre><code>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</code></pre><p>示例 1</p>
<pre><code>输入: [2,2,1]   
输出: 1</code></pre><p>示例 2</p>
<pre><code>输入: [4,1,2,1,2]
输出: 4</code></pre><h3 id="Approach-1-异或实现"><a href="#Approach-1-异或实现" class="headerlink" title="Approach 1-异或实现"></a>Approach 1-异或实现</h3><h4 id="Analysis-7"><a href="#Analysis-7" class="headerlink" title="Analysis"></a>Analysis</h4><p>使用异或XOR实现。将数组中所有的数值进行XOR操作，出现2次的数进行异或返回值是0，不会影响最后的结果。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> ^ N = N</span><br><span class="line">N ^ N = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>因此，如果 N 是只出现一次的数字的话</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">N1 ^ N1 ^ N2 ^ N2 ^..............^ Nx ^ Nx ^ N</span><br><span class="line">= (N1^N1) ^ (N2^N2) ^..............^ (Nx^Nx) ^ N</span><br><span class="line">= <span class="number">0</span> ^ <span class="number">0</span> ^ ..........^ <span class="number">0</span> ^ N</span><br><span class="line">= N</span><br></pre></td></tr></table></figure>


<h4 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="keyword">if</span>(length==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;length;i++)&#123;</span><br><span class="line">                nums[<span class="number">0</span>] = nums[<span class="number">0</span>] ^ nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.size();i++)&#123;</span><br><span class="line">            result = result ^ nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode题解-003</title>
    <url>/2020/02/23/leetcode-003/</url>
    <content><![CDATA[<ul>
<li>记录LeetCode题目笔记，汇总LeetCode解答记录</li>
</ul>
<a id="more"></a>



<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul>
<li><a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="noopener">LeetCode-191. Number of 1 Bits （位1的个数）</a></li>
<li><a href="https://leetcode.com/problems/counting-bits/" target="_blank" rel="noopener">LeetCode-338. Counting Bits（比特位计数）</a></li>
<li><a href="https://leetcode.com/problems/longest-palindrome/" target="_blank" rel="noopener">LeetCode-409. Longest Palindrome （最长回文串）</a></li>
<li><a href="https://leetcode.com/problems/rectangle-area/?tab=Description" target="_blank" rel="noopener">LeetCode-223. Rectangle Area（矩形面积）</a></li>
<li><a href="https://leetcode.com/problems/number-complement/" target="_blank" rel="noopener">LeetCode-476. Number Complement（数字的补数）</a></li>
</ul>
<h2 id="191-Number-of-1-Bits（位1的个数）"><a href="#191-Number-of-1-Bits（位1的个数）" class="headerlink" title="191. Number of 1 Bits（位1的个数）"></a>191. Number of 1 Bits（位1的个数）</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="noopener">LeetCode-191. Number of 1 Bits（位1的个数）</a></li>
</ul>
<p>本问题中，计数了一个无符号整数的位，结果称为 <code>pop count</code>，或 <a href="https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F/7110799?fr=aladdin" target="_blank" rel="noopener">汉明权重</a>。</p>
<h3 id="Approach-1：除K取余法"><a href="#Approach-1：除K取余法" class="headerlink" title="Approach 1：除K取余法"></a>Approach 1：除K取余法</h3><h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>除K取余法，利用 <code>num%2</code> 和 <code>num/2</code> 不断取出数字的二进制数值。</li>
<li>需要注意的是，在如Java语言中，不能使用 <code>while(num&gt;0)</code> 进行判断。因为Java编译器使用二进制补码记法来表示有符号整数。例如输入 <code>11111111111111111111111111111101</code>， 会被作为 <code>-3</code> 处理。</li>
<li>因此，在Java中应该避免取模和除法操作，使用 <code>(num&amp;1) == 1</code> 代替 <code>num%2</code>；使用无符号右移 <code>num &gt;&gt;&gt; 1</code> 代替 <code>num/2</code>。</li>
<li>在C++中，若使用无符号类型 <code>uint32_t</code> 作为输入类型，可以直接使用 <code>while(num&gt;0)</code> 作为循环判断。</li>
</ul>
<blockquote>
<p>Java 中，<code>&gt;&gt;&gt;</code> 为无符号右移，<code>&gt;&gt;</code> 为有符号右移。</p>
</blockquote>
<ul>
<li>时间复杂度：<code>O(1)</code>。运行时间依赖于数字 <code>n</code> 的位数。本题中是一个32位数字，因此时间复杂度位为 <code>O(1)</code>。</li>
<li>空间复杂度：<code>O(1)</code>，没有使用额外的空间。</li>
</ul>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123; <span class="comment">//输入类型为无符号类型，因此可以直接使用n&gt;0进行判断</span></span><br><span class="line">            total += n%<span class="number">2</span>;</span><br><span class="line">            n /=<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//  n = n &gt;&gt;1; //也可使用移位操作</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>Java</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> hammingWeight(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((n&amp;<span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">                total++; <span class="comment">//不要使用取模操作</span></span><br><span class="line">            &#125;</span><br><span class="line">            n = n &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">//会有负数情况，因此应该使用无符号右移</span></span><br><span class="line">            <span class="comment">//Java 中，`&gt;&gt;&gt;` 为无符号右移，`&gt;&gt;` 为有符号右移。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者采用如下实现</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> hammingWeight(<span class="built_in">int</span> n) &#123;</span><br><span class="line">    <span class="built_in">int</span> bits = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> mask = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123; <span class="comment">//最大32位</span></span><br><span class="line">        <span class="keyword">if</span> ((n &amp; mask) != <span class="number">0</span>) &#123;</span><br><span class="line">            bits++;</span><br><span class="line">        &#125;</span><br><span class="line">        mask &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bits;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Approach-2：位操作小技巧-n-amp-n-1"><a href="#Approach-2：位操作小技巧-n-amp-n-1" class="headerlink" title="Approach 2：位操作小技巧 - n&amp;(n-1)"></a>Approach 2：位操作小技巧 - n&amp;(n-1)</h3><h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>对前面的算法进行优化。</p>
<p>不再检查数字的每一个位，而是不断把数字最后一个 <code>1</code> 反转，并把计数加1。当数字变成 <code>0</code> 的时候偶，我们就知道它没有 <code>1</code> 的位了，此时返回计数。</p>
<p>这里关键的想法是<strong>对于任意数字 <code>n</code> ，将 <code>n</code> 和 <code>n - 1</code> 做与运算，不断循环，最后一定会把 <code>1</code> 的位变成 <code>0</code>。</strong></p>
<p>为什么？考虑 <code>n</code> 和 <code>n - 1</code> 的二进制表示。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/leetcode/leetcode-191-method-1.png" alt=""></p>
<p><strong>在二进制表示中，数字 <code>n</code> 中最低位的 <code>1</code> 总是对应 <code>n - 1</code> 中的 <code>0</code>。因此，将 <code>n</code> 和 <code>n - 1</code> 与运算总是能把 <code>n</code> 中最低位的 <code>1</code> 变成 <code>0</code> ，并保持其他位不变。</strong></p>
<p>使用这个小技巧，代码变得非常简单。</p>
<ul>
<li>时间复杂度：<code>O(1)</code>。运行时间依赖于数字 <code>n</code> 的位数。本题中是一个32位数字，因此时间复杂度位为 <code>O(1)</code>。</li>
<li>空间复杂度：<code>O(1)</code>，没有使用额外的空间。</li>
</ul>
<h4 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> hammingWeight(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">            sum++;</span><br><span class="line">            n = n&amp;(n<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Approach-3：字符串长度-正则匹配"><a href="#Approach-3：字符串长度-正则匹配" class="headerlink" title="Approach 3：字符串长度+正则匹配"></a>Approach 3：字符串长度+正则匹配</h3><h4 id="Analysic"><a href="#Analysic" class="headerlink" title="Analysic"></a>Analysic</h4><blockquote>
<p>JS中，<code>toString(radix)</code> 方法可以将数字转换为基于 <code>radix</code> 的进制数（若 <code>radix</code> 缺省，则默认转换为 10 进制数）。</p>
</blockquote>
<ul>
<li>首先，使用 <code>toString(2)</code> 方法，将数字转换为 2 进制字符串</li>
<li>然后，使用正则匹配，滤除字符串中的 <code>0</code>，得到新的字符串</li>
<li>最后，新字符串的长度即数字中 <code>1</code> 的个数</li>
</ul>
<h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>JS</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;number&#125; n - a positive integer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hammingWeight = <span class="function"><span class="keyword">function</span><span class="params">(n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n.toString(<span class="number">2</span>).replace(/<span class="number">0</span>/g,<span class="string">''</span>).length; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="Approach-4：使用内置函数"><a href="#Approach-4：使用内置函数" class="headerlink" title="Approach 4：使用内置函数"></a>Approach 4：使用内置函数</h3><h4 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li><p>Java中，函数 <a href="https://www.tutorialspoint.com/java/lang/integer_bitcount.htm" target="_blank" rel="noopener">Integer.bitCount()</a> 可以返回数字中2进制格式下 <code>1</code> 的个数。</p>
<blockquote>
<p>The <code>java.lang.Integer.bitCount()</code> method returns the number of one-bits in the two’s complement binary representation of the specified int value i. This is sometimes referred to as the <code>population count</code>.</p>
</blockquote>
</li>
<li><p>类似的，C++内置的 <code>__builtin_popcount()</code> 函数也可以返回数字中2进制格式下 <code>1</code> 的个数。</p>
</li>
</ul>
<h4 id="Method-1"><a href="#Method-1" class="headerlink" title="Method"></a>Method</h4><ul>
<li>C++</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">class</span> <span class="selector-tag">Solution</span> &#123;</span><br><span class="line"><span class="attribute">public</span>:</span><br><span class="line">    int <span class="built_in">hammingWeight</span>(uint32_t n) &#123;</span><br><span class="line">       return <span class="built_in">__builtin_popcount</span>(n);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>Java</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line">    public <span class="built_in">int</span> hamming<span class="constructor">Weight(<span class="params">int</span> <span class="params">n</span>)</span> &#123;</span><br><span class="line">        return <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>bit<span class="constructor">Count(<span class="params">n</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="338-Counting-Bits（比特位计数）"><a href="#338-Counting-Bits（比特位计数）" class="headerlink" title="338. Counting Bits（比特位计数）"></a>338. Counting Bits（比特位计数）</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode.com/problems/counting-bits/" target="_blank" rel="noopener">LeetCode-338. Counting Bits（比特位计数）</a></li>
</ul>
<h3 id="Approach-1-Pop-count"><a href="#Approach-1-Pop-count" class="headerlink" title="Approach 1-Pop count"></a>Approach 1-Pop count</h3><h4 id="Analysis-3"><a href="#Analysis-3" class="headerlink" title="Analysis"></a>Analysis</h4><p>本问题可以看做 <a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="noopener">LeetCode- 191. Number of 1 Bits</a> 的后续。</p>
<p><code>191. Number of 1 Bits</code> 问题中，计数了一个无符号整数的位，结果称为 <code>pop count</code>，或 <a href="https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F/7110799?fr=aladdin" target="_blank" rel="noopener">汉明权重</a>。</p>
<p>现在，我们先默认这个概念。假设我们有函数 <code>int popcount(int x)</code>，可以返回一个给定非负整数的位计数。我们只需要在 <code>[0, num]</code> 范围内循环并将结果存到一个列表中。</p>
<ul>
<li>时间复杂度：<code>O(nk)</code>。对于每个整数 <code>x</code>，我们需要 <code>O(k)</code> 次操作，其中 <code>k</code> 是 <code>x</code> 的位数。</li>
<li>空间复杂度：<code>O(n)</code>。 </li>
</ul>
<h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>[] countBits(<span class="built_in">int</span> num) &#123;</span><br><span class="line">        <span class="built_in">int</span>[] ans = new <span class="built_in">int</span>[num+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;= num;i++)&#123;</span><br><span class="line">            ans[i] = popCount(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> popCount(<span class="built_in">int</span> x) &#123;</span><br><span class="line">        <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            x = x&amp;(x<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>C++</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="built_in">int</span>&gt; countBits(<span class="built_in">int</span> num) &#123;</span><br><span class="line">        vector&lt;<span class="built_in">int</span>&gt; res(num+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;=num;i++)&#123;</span><br><span class="line">            res[i] = popCount(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">int</span> popCount(<span class="built_in">int</span> num)&#123;</span><br><span class="line">        <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(num)&#123;</span><br><span class="line">            count ++;</span><br><span class="line">            num &amp;= num<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Approach-2-动态规划-最高有效位"><a href="#Approach-2-动态规划-最高有效位" class="headerlink" title="Approach 2-动态规划+最高有效位"></a>Approach 2-动态规划+最高有效位</h3><h4 id="Analysis-4"><a href="#Analysis-4" class="headerlink" title="Analysis"></a>Analysis</h4><p>利用已有的计数结果来生成新的计数结果。</p>
<p>假设有一个整数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x = (1001011101)_2 = (605)_&#123;10&#125;</span><br></pre></td></tr></table></figure>


<p>我们已经计算了从 <code>0</code> 到 <code>x - 1</code> 的全部结果。</p>
<p>我们知道，<code>x</code> 与 我们计算过的一个数只有一位之差</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&apos; = (1011101)_2 = (93)_&#123;10&#125;</span><br></pre></td></tr></table></figure>

<p>它们只在最高有效位上不同。</p>
<p>让我们以二进制形式检查 <code>[0, 3]</code> 的范围</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(0) = (0)_2</span><br><span class="line"></span><br><span class="line">(1) = (1)_2</span><br><span class="line"></span><br><span class="line">(2) = (10)_2</span><br><span class="line"></span><br><span class="line">(3) = (11)_2</span><br><span class="line"></span><br><span class="line">(4) = (100)_2</span><br><span class="line"></span><br><span class="line">(5) = (101)_2</span><br></pre></td></tr></table></figure>

<p>可以看出， <code>2</code> 和 <code>3</code> 的二进制形式可以通过给 <code>0</code> 和 <code>1</code> 的二进制形式在前面加上 <code>1</code> 来得到。因此，它们的 <code>pop count</code> 只相差 1。</p>
<p>类似的，我们可以使用 <code>[0, 3]</code> 作为蓝本来得到 <code>[4, 7]</code>，使用 <code>[0, 7]</code> 作为蓝本来得到 <code>[8, 15]</code>，即根据区间 <code>[0, b)</code> 的结果去产生区间 <code>[b, 2b)</code> 的结果，其中 <code>b</code> 为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b = 2^m &gt; x （m=0,1,2...）</span><br></pre></td></tr></table></figure>

<p>总之，对于 <code>pop count P(x)</code>，我们有以下的状态转移函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">P(x + b) = P(x) + 1, b = 2^m &gt; x （m=0,1,2...）</span><br></pre></td></tr></table></figure>


<ul>
<li>时间复杂度：<code>O(n)</code>。对每个整数 <code>x</code>，只需要常数时间。</li>
<li>空间复杂度：<code>O(n)</code>。需要 <code>O(n)</code> 的空间来存储结果。</li>
</ul>
<h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>[] countBits(<span class="built_in">int</span> num) &#123;</span><br><span class="line">        <span class="built_in">int</span>[] res = new <span class="built_in">int</span>[num+<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">int</span> i=<span class="number">0</span>,b=<span class="number">1</span>; <span class="comment">//边界条件</span></span><br><span class="line">        <span class="keyword">while</span>(b&lt;=num)&#123;</span><br><span class="line">            <span class="comment">// generate [b, 2b) or [b, num) from [0, b)</span></span><br><span class="line">            <span class="keyword">while</span>(i&lt;b &amp;&amp; i+b &lt;= num)&#123;</span><br><span class="line">                res[i+b] = res[i]+<span class="number">1</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            i = <span class="number">0</span>;   <span class="comment">// reset i</span></span><br><span class="line">            b &lt;&lt;= <span class="number">1</span>; <span class="comment">// b = 2b</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Approach-3-动态规划-最低有效位"><a href="#Approach-3-动态规划-最低有效位" class="headerlink" title="Approach 3-动态规划+最低有效位"></a>Approach 3-动态规划+最低有效位</h3><h4 id="Analysis-5"><a href="#Analysis-5" class="headerlink" title="Analysis"></a>Analysis</h4><p>只要 <code>x&#39;</code> 小于 <code>x</code>，且它们的 <code>pop count</code> 之间存在函数关系，就可以写出状态转移函数。</p>
<p>遵循上一方法的相同原则，我们还可以通过最低有效位来获得状态转移函数。</p>
<p>观察 <code>x</code> 和 <code>x&#39; = x / 2</code> 的关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x=(1001011101)_2=(605)_&#123;10&#125;</span><br><span class="line"></span><br><span class="line">x&apos; = (100101110)_2 = (302)_&#123;10&#125;</span><br></pre></td></tr></table></figure>
<p>可以发现 <code>x&#39;</code> 与 <code>x</code> 只有一位不同，这是因为 <code>x&#39;</code> 可以看做 <code>x</code> 移除最低有效位的结果。</p>
<p>这样，我们就有了下面的状态转移函数</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">P(<span class="name">x</span>) = P(<span class="name">x/2</span>) + (<span class="name">x</span> mod <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>例如</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">P(<span class="number">0</span>) = <span class="number">0</span>;            <span class="comment">//00   边界条件</span></span><br><span class="line">P(<span class="number">1</span>) = P(<span class="number">0</span>) + <span class="number">1</span>;     <span class="comment">//001   000</span></span><br><span class="line">P(<span class="number">2</span>) = P(<span class="number">1</span>) + <span class="number">0</span>;     <span class="comment">//010   001</span></span><br><span class="line">P(<span class="number">3</span>) = P(<span class="number">1</span>) + <span class="number">1</span>;     <span class="comment">//011   001</span></span><br><span class="line">P(<span class="number">4</span>) = P(<span class="number">2</span>) + <span class="number">0</span>;     <span class="comment">//100   010 </span></span><br><span class="line">P(<span class="number">5</span>) = P(<span class="number">2</span>) + <span class="number">1</span>;     <span class="comment">//101   010</span></span><br><span class="line">P(<span class="number">6</span>) = P(<span class="number">3</span>) + <span class="number">1</span>;     <span class="comment">//110   011</span></span><br></pre></td></tr></table></figure>


<h4 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>[] countBits(<span class="built_in">int</span> num) &#123;</span><br><span class="line">        <span class="built_in">int</span>[] res = new <span class="built_in">int</span>[num+<span class="number">1</span>];</span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">0</span>;  <span class="comment">//边界条件</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;=num;i++)&#123;</span><br><span class="line">            res[i] = res[i/<span class="number">2</span>] + (i%<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="409-Longest-Palindrome（最长回文串）"><a href="#409-Longest-Palindrome（最长回文串）" class="headerlink" title="409. Longest Palindrome（最长回文串）"></a>409. Longest Palindrome（最长回文串）</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode.com/problems/longest-palindrome/" target="_blank" rel="noopener">LeetCode-409. Longest Palindrome （最长回文串）</a></li>
</ul>
<h3 id="Approach-1-Map计数"><a href="#Approach-1-Map计数" class="headerlink" title="Approach 1-Map计数"></a>Approach 1-Map计数</h3><h4 id="Analysis-6"><a href="#Analysis-6" class="headerlink" title="Analysis"></a>Analysis</h4><p>使用 <code>Map</code> 数据结构统计每个字符串出现的次数。遍历 <code>Map</code> 字典，回文串长度增加 <code>2*(map[i]/2)</code>。同时，对出现次数对2取模，若为1，表示回文串中有出现单次的字符，设置标志位 <code>hasSingle = true</code>，最后记得对出现次数加1。</p>
<ul>
<li>时间复杂度： <code>O(n)</code>，<code>n</code>为字符串的长度，至少遍历每个字符一次。</li>
<li>空间复杂度： <code>O(1)</code>，需要开辟额外空间来计数，字母最多为26个。</li>
</ul>
<h4 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>C++</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">int</span> longestPalindrome(<span class="built_in">string</span> s) &#123;</span><br><span class="line">        map&lt;char,<span class="built_in">int</span>&gt; dataInfo;</span><br><span class="line">        <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">bool</span> hasSingel = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            dataInfo[s[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;dataInfo.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dataInfo[i]%<span class="number">2</span> !=<span class="number">0</span>)&#123;</span><br><span class="line">                hasSingel = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count += <span class="number">2</span>*(dataInfo[i]/<span class="number">2</span>);   <span class="comment">//处理 'CCC'情况</span></span><br><span class="line">        &#125;</span><br><span class="line">        count = hasSingel? count+<span class="number">1</span>:count;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>Java</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> longestPalindrome(String s) &#123;</span><br><span class="line">        char[] chas = s.toCharArray();</span><br><span class="line">        Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; chas.length; i++) &#123;</span><br><span class="line">            map.put(chas[i], map.getOrDefault(chas[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> cnt : map.values()) &#123;</span><br><span class="line">            result += cnt / <span class="number">2</span> * <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (cnt % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; result % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                result++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>










<h2 id="223-Rectangle-Area（矩形面积）"><a href="#223-Rectangle-Area（矩形面积）" class="headerlink" title="223. Rectangle Area（矩形面积）"></a>223. Rectangle Area（矩形面积）</h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode.com/problems/rectangle-area/?tab=Description" target="_blank" rel="noopener">LeetCode-223. Rectangle Area（矩形面积）</a></li>
</ul>
<h3 id="Approach-1-面积拆分求解"><a href="#Approach-1-面积拆分求解" class="headerlink" title="Approach 1-面积拆分求解"></a>Approach 1-面积拆分求解</h3><h4 id="Analysis-7"><a href="#Analysis-7" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>根据上图，可以确定计算的面积值为两个矩形面积的和再减去重合部分的面积，即 <code>resultArea = recArea1 + recArea2 - repetitionArea</code></li>
<li>重合部分定点坐标的确定<ul>
<li>Bottom Left Point Coordinate: <code>(max(A,E), max(B,F))</code></li>
<li>Top Right Point Coordinate: <code>(min(C,G), min(D,H))</code></li>
</ul>
</li>
<li>易忽略点<blockquote>
<p>Due to the total bits of “int” is 32, we prefer to use “w2&lt;=w1” to “(int) w2-w1” to judge the return value. The data of ”(int) w2-w1” may overflow the range of integer.(For example, w2&gt;0 and w1&lt;0)</p>
</blockquote>
</li>
</ul>
<h4 id="Slove"><a href="#Slove" class="headerlink" title="Slove"></a>Slove</h4><ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">computeArea</span><span class="params">(<span class="keyword">int</span> A, <span class="keyword">int</span> B, <span class="keyword">int</span> C, <span class="keyword">int</span> D, <span class="keyword">int</span> E, <span class="keyword">int</span> F, <span class="keyword">int</span> G, <span class="keyword">int</span> H)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> area_1 = (C - A)*(D - B);</span><br><span class="line">		<span class="keyword">int</span> area_2 = (G - E)*(H - F);</span><br><span class="line">		<span class="comment">//Calculate the overlap area</span></span><br><span class="line">		<span class="keyword">int</span> w1 = max(A, E);</span><br><span class="line">		<span class="keyword">int</span> h1 = max(B, F);</span><br><span class="line">		<span class="keyword">int</span> w2 = min(C, G);</span><br><span class="line">		<span class="keyword">int</span> h2 = min(D, H);</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">if</span> ((w2&lt;=w1) || (h2&lt;=h1)) <span class="comment">//没有重合部分</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> area_1 + area_2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> area_1 + area_2 - ((h2-h1)*(w2-w1));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在计算过程上进行优化，有如下代码实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">computeArea</span><span class="params">(<span class="keyword">int</span> A, <span class="keyword">int</span> B, <span class="keyword">int</span> C, <span class="keyword">int</span> D, <span class="keyword">int</span> E, <span class="keyword">int</span> F, <span class="keyword">int</span> G, <span class="keyword">int</span> H)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = max(A,E), right = max(min(C,G), left);</span><br><span class="line">        <span class="keyword">int</span> bottom = max(B,F), top = max(min(D,H), bottom);</span><br><span class="line">        <span class="keyword">return</span> (C-A)*(D-B) - (right-left)*(top-bottom) + (G-E)*(H-F);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>JS</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> computeArea = <span class="function"><span class="keyword">function</span>(<span class="params">A, B, C, D, E, F, G, H</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="built_in">Math</span>.max(A,E), right = <span class="built_in">Math</span>.max(<span class="built_in">Math</span>.min(C,G), left);</span><br><span class="line">    <span class="keyword">var</span> bottom = <span class="built_in">Math</span>.max(B,F), top = <span class="built_in">Math</span>.max(<span class="built_in">Math</span>.min(D,H), bottom);</span><br><span class="line">    <span class="keyword">return</span> (C-A)*(D-B) - (right-left)*(top-bottom) + (G-E)*(H-F);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">computeArea</span><span class="params">(<span class="keyword">int</span> A, <span class="keyword">int</span> B, <span class="keyword">int</span> C, <span class="keyword">int</span> D, <span class="keyword">int</span> E, <span class="keyword">int</span> F, <span class="keyword">int</span> G, <span class="keyword">int</span> H)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = Math.max(A,E), right = Math.max(Math.min(C,G), left);</span><br><span class="line">        <span class="keyword">int</span> bottom = Math.max(B,F), top = Math.max(Math.min(D,H), bottom);</span><br><span class="line">        <span class="keyword">return</span> (C-A)*(D-B) - (right-left)*(top-bottom) + (G-E)*(H-F);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="476-Number-Complement-数字的补数"><a href="#476-Number-Complement-数字的补数" class="headerlink" title="476. Number Complement (数字的补数)"></a>476. Number Complement (数字的补数)</h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode.com/problems/number-complement/" target="_blank" rel="noopener">LeetCode-476. Number Complement (数字的补数)</a></li>
</ul>
<p>给定一个正整数，输出它的补数。补数是对该数的二进制表示取反。</p>
<p>注意</p>
<pre><code>1. 给定的整数保证在32位带符号整数的范围内。
2. 你可以假定二进制数不包含前导零位。</code></pre><p>示例 1</p>
<pre><code>输入: 5
输出: 2
解释: 5的二进制表示为101（没有前导零位），其补数为010。所以你需要输出2。</code></pre><p>示例 2</p>
<pre><code>输入: 1
输出: 0
解释: 1的二进制表示为1（没有前导零位），其补数为0。所以你需要输出0。</code></pre><h3 id="Approach-1-寻找最高位为1的位置"><a href="#Approach-1-寻找最高位为1的位置" class="headerlink" title="Approach 1-寻找最高位为1的位置"></a>Approach 1-寻找最高位为1的位置</h3><h4 id="Analysis-8"><a href="#Analysis-8" class="headerlink" title="Analysis"></a>Analysis</h4><p>分析题目可知，只需对每个位的二进制数值（没有前导零位时）进行翻转即可。</p>
<p>但数值实际存储中，是包含前导零位的。如果直接对 num 进行取反操作，会把符号位取反，并且把最高位为 1 之前的所有位数都取反。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">不含前导零位时，<span class="number">5</span> = <span class="number">101</span>，取反操作得到<span class="number">010</span>，即十进制数值<span class="number">2</span></span><br><span class="line">含有前导零位时（次数以<span class="number">8</span>位为例），<span class="number">5</span> = <span class="number">0000</span>,<span class="number">0101</span>，取反操作得到<span class="number">1111</span>,<span class="number">1010</span></span><br></pre></td></tr></table></figure>


<p>因此，对每位翻转（或取反，或和1进行异或）的起始位置是从最高位的1开始的，前面的 0 是不能被翻转的。可以考虑从高位往低位遍历，当遇到第1个1后，记录最高位为1的位置，之后再进行翻转操作（异或实现）。</p>
<h4 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findComplement</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num&lt;=<span class="number">0</span>) <span class="keyword">return</span> num;</span><br><span class="line">        <span class="keyword">int</span> highestOneBit = <span class="number">0</span>; <span class="comment">//最高位1的位数</span></span><br><span class="line">        <span class="keyword">int</span> tmp = num;</span><br><span class="line">        <span class="keyword">while</span>(tmp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            highestOneBit += <span class="number">1</span>;</span><br><span class="line">            tmp &gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=highestOneBit<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            num = num ^(<span class="number">1</span>&lt;&lt;i);  <span class="comment">//异或操作</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Approach-2-创建每位都是1的二进制数值"><a href="#Approach-2-创建每位都是1的二进制数值" class="headerlink" title="Approach 2-创建每位都是1的二进制数值"></a>Approach 2-创建每位都是1的二进制数值</h3><h4 id="Analysis-9"><a href="#Analysis-9" class="headerlink" title="Analysis"></a>Analysis</h4><p>在不含前导零位时，把 <code>num</code> 和同位数的且每位都是1的二进制数进行与操作，即可得到结果。</p>
<p>因此，问题转化为求解一个和 <code>num</code> 位数一样且每位都是1的二进制数值 <code>mask</code>，最后进行异或操作（<code>mask ^ num</code>）即可。</p>
<p>例如，<code>5 = 101</code>，因此 <code>mask = 111</code>，进行异或操作 <code>mask ^ num = 111 ^ 101 = 010</code>。</p>
<p>得到每位都是1的二进制，如 <code>111</code>，可以通过<code>1000</code> 减去 1 得到。</p>
<h4 id="Solution-7"><a href="#Solution-7" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findComplement</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = num;</span><br><span class="line">        <span class="keyword">int</span> mask = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(temp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            mask &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            temp &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mask -= <span class="number">1</span>;   <span class="comment">//1000-1 得到111</span></span><br><span class="line">        <span class="keyword">return</span> mask ^ num;  <span class="comment">//异或</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Approach-3-转换为字符串-正则匹配"><a href="#Approach-3-转换为字符串-正则匹配" class="headerlink" title="Approach 3-转换为字符串+正则匹配"></a>Approach 3-转换为字符串+正则匹配</h3><h4 id="Analysis-10"><a href="#Analysis-10" class="headerlink" title="Analysis"></a>Analysis</h4><p>此处给出JS实现的特解</p>
<ol>
<li>先将 num 转化为二进制字符串</li>
<li>借助正则表达式查找，将字符串中的 0 替换成1</li>
<li>再将该字符串值转化成整数 <code>int</code></li>
<li>最后将该值和 <code>num</code>进行异或操作</li>
</ol>
<h4 id="Solution-8"><a href="#Solution-8" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>JS</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; num</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findComplement = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = num.toString(<span class="number">2</span>).replace(<span class="regexp">/0/g</span>,<span class="number">1</span>);  <span class="comment">//转换为11..11</span></span><br><span class="line">    <span class="keyword">return</span> (num) ^ <span class="built_in">parseInt</span>(str,<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode题解-004</title>
    <url>/2020/02/23/leetcode-004/</url>
    <content><![CDATA[<ul>
<li>记录LeetCode题目笔记，汇总LeetCode解答记录</li>
</ul>
<a id="more"></a>



<h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><ul>
<li>2020/02/23，撰写</li>
<li>2020/02/23，整理完成</li>
</ul>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul>
<li><a href="https://leetcode.com/problems/number-of-steps-to-reduce-a-number-to-zero/" target="_blank" rel="noopener">LeetCode-1342. Number of Steps to Reduce a Number to Zero（将数字变成 0 的操作次数）</a></li>
<li><a href="https://leetcode-cn.com/problems/subtract-the-product-and-sum-of-digits-of-an-integer/" target="_blank" rel="noopener">LeetCode-1281. 整数的各位积和之差</a></li>
<li><a href="https://leetcode-cn.com/problems/power-of-three/" target="_blank" rel="noopener">LeetCode-326. 3的幂</a></li>
<li><a href="https://leetcode-cn.com/problems/power-of-two/" target="_blank" rel="noopener">LeetCode-231. 2的幂</a></li>
<li><a href="https://leetcode-cn.com/problems/power-of-four/" target="_blank" rel="noopener">LeetCode-342. 4的幂</a></li>
</ul>
<h2 id="1342-Number-of-Steps-to-Reduce-a-Number-to-Zero（将数字变成-0-的操作次数）"><a href="#1342-Number-of-Steps-to-Reduce-a-Number-to-Zero（将数字变成-0-的操作次数）" class="headerlink" title="1342. Number of Steps to Reduce a Number to Zero（将数字变成 0 的操作次数）"></a>1342. Number of Steps to Reduce a Number to Zero（将数字变成 0 的操作次数）</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode.com/problems/number-of-steps-to-reduce-a-number-to-zero/" target="_blank" rel="noopener">LeetCode-1342. Number of Steps to Reduce a Number to Zero（将数字变成 0 的操作次数）</a></li>
</ul>
<h3 id="Approach-1"><a href="#Approach-1" class="headerlink" title="Approach 1"></a>Approach 1</h3><h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>题目较为简单，直接求解即可，不再赘述。</p>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfSteps</span> <span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            sum++;</span><br><span class="line">            num = (num%<span class="number">2</span> == <span class="number">0</span>) ? num&gt;&gt;<span class="number">1</span>:num-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="1281-整数的各位积和之差"><a href="#1281-整数的各位积和之差" class="headerlink" title="1281. 整数的各位积和之差"></a>1281. 整数的各位积和之差</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode-cn.com/problems/subtract-the-product-and-sum-of-digits-of-an-integer/" target="_blank" rel="noopener">LeetCode-1281. 整数的各位积和之差</a></li>
</ul>
<h3 id="Approach-1-1"><a href="#Approach-1-1" class="headerlink" title="Approach 1"></a>Approach 1</h3><h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>题目较为简单，直接求解即可，不再赘述。</p>
<p>通过取模运算得到数字 <code>n</code> 的最后一位，依次进行乘法和加法运算。</p>
<ul>
<li>时间复杂度：<code>O(log N)</code>。整数 N 的位数如下公式所示。根据换底公式，它和时间复杂度中常用的以 2 为底的 <code>log</code> 只相差一个常数，因此时间复杂度可以表示为 <code>O(log N)</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">⌈log10(N+1)⌉</span><br></pre></td></tr></table></figure>

<ul>
<li>空间复杂度：<code>O(1)</code></li>
</ul>
<h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> subtractProductAndSum(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">int</span> mul = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> add = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            mul *= n%<span class="number">10</span>;</span><br><span class="line">            add += n%<span class="number">10</span>;</span><br><span class="line">            n = n/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mul-add;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="326-3的幂"><a href="#326-3的幂" class="headerlink" title="326. 3的幂"></a>326. 3的幂</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode-cn.com/problems/power-of-three/" target="_blank" rel="noopener">LeetCode-326. 3的幂</a></li>
</ul>
<h3 id="Approach-1-循环迭代"><a href="#Approach-1-循环迭代" class="headerlink" title="Approach 1-循环迭代"></a>Approach 1-循环迭代</h3><h4 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h4><p>常规基本方法，使用循环求解。</p>
<p>如果数字 <code>num</code> 是3的幂，则对 <code>num</code> 不断除3，并对3取模都是0，直到 <code>num=1</code> 停止。</p>
<p>需要注意，1是3的0次幂，在判断时候不要忘记对1的处理。</p>
<ul>
<li>时间复杂度：如下，<code>b</code> 表示进制基数，此处为3</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O(log_&#123;b&#125;(N))</span><br></pre></td></tr></table></figure>

<ul>
<li>空间复杂度：<code>O(1)</code></li>
</ul>
<h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (n % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            n /= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;  <span class="comment">//1是3的0次幂</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">3</span> &amp;&amp; n != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//1是3的0次幂</span></span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n = n/<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h3 id="Approach-2-基准转换"><a href="#Approach-2-基准转换" class="headerlink" title="Approach 2-基准转换"></a>Approach 2-基准转换</h3><h4 id="Analysis-3"><a href="#Analysis-3" class="headerlink" title="Analysis"></a>Analysis</h4><p>对于10的次幂，其10进制格式为1，10，100，1000……</p>
<p>对于2的次幂，其2进制格式为1，10，100，1000……</p>
<p>类比可得，</p>
<p>对于3的次幂，其3进制格式为1，10，100，1000……</p>
<p>因此，对于给定的数字，如果其3进制格式可以表示为 <code>^10*$</code> （即以数字1开头，以0个或者多个0结尾），则该数字就是3的次幂。</p>
<ul>
<li>时间复杂度：如下，<code>b</code> 表示进制基数，此处为3</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O(log_&#123;b&#125;(N))</span><br></pre></td></tr></table></figure>


<ul>
<li>空间复杂度：如下，<code>b</code> 表示进制基数，此处为3。此处，我们使用2个附加变量，一个是正则表达式的字符串（常量大小），一个是以3为基数表示数字的字符串，大小为 <code>O(log3(N))</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O(log_&#123;b&#125;(N))</span><br></pre></td></tr></table></figure>


<h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<blockquote>
<p>Java 内置的 <code>Integer.toString(number,base)</code>可以将数字转换为 <code>base</code> 进制的字符串</p>
<p>Java 内置的 <code>matches</code> 方法可以用于正则匹配</p>
</blockquote>
<p>本方法中，使用Java内置的字符串转换和正则匹配实现，相比于方法1的迭代求解，内存消耗方面两种方法基本一样，但是该方法的执行用时（37ms）是大于迭代求解的（17ms）。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    public boolean is<span class="constructor">PowerOfThree(<span class="params">int</span> <span class="params">n</span>)</span> &#123;</span><br><span class="line">        return <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">n</span>, 3)</span>.matches(<span class="string">"^10*$"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Approach-3-换底公式"><a href="#Approach-3-换底公式" class="headerlink" title="Approach 3-换底公式"></a>Approach 3-换底公式</h3><h4 id="Analysis-4"><a href="#Analysis-4" class="headerlink" title="Analysis"></a>Analysis</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n=3^i</span><br><span class="line"></span><br><span class="line">i = log_&#123;3&#125;(n) = log_&#123;b&#125;(n)/log_&#123;b&#125;(3)</span><br></pre></td></tr></table></figure>

<p>如果 n 是3的次幂，即可以表示为 <code>3^i</code>的形式。如上所示，可以根据换底公式求解出 <code>i</code>。</p>
<p>因此若 <code>i</code> 是整数，则可以判断 n 是3的次幂。</p>
<ul>
<li>时间复杂度：<code>Unknown</code>。消耗时间的运算主要是 <code>Math.log</code>，它限制了我们算法的时间复杂性。实现依赖于我们使用的语言和编译器。</li>
<li>空间复杂度： <code>O(1)</code>。没有使用任何额外的内存。<code>epsilon</code> 变量可以是内联的。</li>
</ul>
<p><strong>需要注意的是，这个解决方案是有问题的，因为如果数值类型为 <code>double</code>，这意味着我们会遇到精度错误，在比较双精度数时不应使用 <code>==</code>。</strong></p>
<p>这是因为 <code>Math.log10(n)/Math.log10(3)</code> 的结果可能是 <code>5.0000001</code> 或 <code>4.9999999</code>。使用 <code>Math.log()</code> 函数而不是 <code>Math.log10()</code> 可以观察到这种效果。</p>
<p>为了解决这个问题，我们需要将结果与 <code>epsilon</code> 进行比较。</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (Math.<span class="built_in">log</span>(n) / Math.<span class="built_in">log</span>(<span class="number">3</span>) + <span class="built_in">epsilon</span>) % <span class="number">1</span> &lt;= <span class="number">2</span> * <span class="built_in">epsilon</span>;</span><br></pre></td></tr></table></figure>


<h4 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Math.log10(n) / Math.log10(<span class="number">3</span>)) % <span class="number">1</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Approach-4-整数限制"><a href="#Approach-4-整数限制" class="headerlink" title="Approach 4-整数限制"></a>Approach 4-整数限制</h3><h4 id="Analysis-5"><a href="#Analysis-5" class="headerlink" title="Analysis"></a>Analysis</h4><p>题目限定了输入数值为 <code>int</code> 类型，最大为32位，因此输入数值的最大值为 <code>2^31</code>，在此范围内3的最大次幂为 <code>3^19=1162261467</code>。</p>
<ul>
<li>因此，本题中可能返回 <code>true</code> 的数值只能是 <code>3^0</code>，<code>3^1</code> …… <code>3^19</code></li>
<li>如果使用 <code>3^19</code> 除以数值 <code>n</code>，若余数为0，则表示数值 <code>n</code>是3的次幂</li>
<li>需要注意的是，这种方式只适合基数为质数的情况。此处，3为质数，<code>3^19</code> 的约数字只有 <code>3^0</code>，<code>3^1</code> …… <code>3^19</code>。如果对于基数为偶数的情况，如 <code>4</code>，<code>4^4</code>的约数除了 <code>4^0</code>，<code>4^1</code>，<code>4^2</code>，<code>4^3</code>，<code>4^4</code>外，还有数字 <code>2</code>。</li>
</ul>
<h4 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfThree</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> ((n &gt; <span class="number">0</span>) &amp;&amp; ((<span class="number">1162261467</span> % n) == <span class="number">0</span>));</span><br><span class="line">    	<span class="comment">// or</span></span><br><span class="line">        <span class="comment">//return (n&gt;0) &amp;&amp; (Math.pow(3,19) % n ==0);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






<h2 id="231-2的幂"><a href="#231-2的幂" class="headerlink" title="231. 2的幂"></a>231. 2的幂</h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode-cn.com/problems/power-of-two/" target="_blank" rel="noopener">LeetCode-231. 2的幂</a></li>
</ul>
<p>本题同 <a href="https://leetcode-cn.com/problems/power-of-three/" target="_blank" rel="noopener">LeetCode-326. 3的幂</a>，对于相同的原理，此处不再赘述。</p>
<p>此处仅补充 <code>Approach 5-二进制位运算</code> 特解方法。</p>
<h3 id="Approach-1-循环迭代-1"><a href="#Approach-1-循环迭代-1" class="headerlink" title="Approach 1-循环迭代"></a>Approach 1-循环迭代</h3><ul>
<li>Java</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span>ean isPowerOfTwo(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;  <span class="comment">//1是2的0次幂</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Approach-2-基准转换-1"><a href="#Approach-2-基准转换-1" class="headerlink" title="Approach 2-基准转换"></a>Approach 2-基准转换</h3><ul>
<li>Java</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    public boolean is<span class="constructor">PowerOfTwo(<span class="params">int</span> <span class="params">n</span>)</span> &#123;</span><br><span class="line">        return <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">n</span>, 2)</span>.matches(<span class="string">"^10*$"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Approach-3-换底公式-1"><a href="#Approach-3-换底公式-1" class="headerlink" title="Approach 3-换底公式"></a>Approach 3-换底公式</h3><ul>
<li>Java</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span>ean isPowerOfTwo(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">return</span> (Math.log10(n) / Math.log10(<span class="number">2</span>)) % <span class="number">1</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Approach-4-整数限制-1"><a href="#Approach-4-整数限制-1" class="headerlink" title="Approach 4-整数限制"></a>Approach 4-整数限制</h3><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (n&gt;<span class="number">0</span>) &amp;&amp; (Math.pow(<span class="number">2</span>,<span class="number">32</span>) % n ==<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Approach-5-二进制位运算（特解）"><a href="#Approach-5-二进制位运算（特解）" class="headerlink" title="Approach 5-二进制位运算（特解）"></a>Approach 5-二进制位运算（特解）</h3><h4 id="Analysis-6"><a href="#Analysis-6" class="headerlink" title="Analysis"></a>Analysis</h4><p>若 <code>num</code> 是 2 的整数幂，则其二进制数值为 <code>100..00</code> 的形式，<code>num-1</code> 的二进制数值为 <code>011...1</code> 的形式。因此，<code>n &amp; (n-1)</code> 一定为0。利用该方法可以求解。</p>
<p>需要注意的是，该方法使用了位运算，因此只适用于2的次幂求解，不具有通用性。</p>
<h4 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span>ean isPowerOfTwo(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">return</span> (n&gt;<span class="number">0</span>) &amp;&amp; ((n &amp; (n<span class="number">-1</span>)) == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (n&gt;<span class="number">0</span>) &amp;&amp; ((n &amp; (n<span class="number">-1</span>)) == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>





<h2 id="342-4的幂"><a href="#342-4的幂" class="headerlink" title="342. 4的幂"></a>342. 4的幂</h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode-cn.com/problems/power-of-four/" target="_blank" rel="noopener">LeetCode-342. 4的幂</a></li>
</ul>
<p>本题同 <a href="https://leetcode-cn.com/problems/power-of-three/" target="_blank" rel="noopener">LeetCode-326. 3的幂</a>，对于相同的原理，此处不再赘述。</p>
<p>该方法只适合基数为质数的情况。此处，3为质数，<code>3^19</code> 的约数字只有 <code>3^0</code>，<code>3^1</code> …… <code>3^19</code>。如果对于基数为偶数的情况，如 <code>4</code>，<code>4^4</code>的约数除了 <code>4^0</code>，<code>4^1</code>，<code>4^2</code>，<code>4^3</code>，<code>4^4</code>外，还有数字 <code>2</code> 和数字 <code>8</code> 等。</p>
<h3 id="Approach-1-循环迭代-2"><a href="#Approach-1-循环迭代-2" class="headerlink" title="Approach 1-循环迭代"></a>Approach 1-循环迭代</h3><ul>
<li>Java</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span>ean isPowerOfFour(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (n % <span class="number">4</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            n /= <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;  <span class="comment">//1是2的0次幂</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Approach-2-基准转换-2"><a href="#Approach-2-基准转换-2" class="headerlink" title="Approach 2-基准转换"></a>Approach 2-基准转换</h3><ul>
<li>Java</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    public boolean is<span class="constructor">PowerOfFour(<span class="params">int</span> <span class="params">n</span>)</span> &#123;</span><br><span class="line">        return <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">n</span>, 4)</span>.matches(<span class="string">"^10*$"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Approach-3-换底公式-2"><a href="#Approach-3-换底公式-2" class="headerlink" title="Approach 3-换底公式"></a>Approach 3-换底公式</h3><ul>
<li>Java</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span>ean isPowerOfFour(<span class="built_in">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">return</span> (Math.log10(n) / Math.log10(<span class="number">4</span>)) % <span class="number">1</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode题解-002</title>
    <url>/2020/02/23/leetcode-002/</url>
    <content><![CDATA[<ul>
<li>记录LeetCode题目笔记，汇总LeetCode解答记录</li>
</ul>
<a id="more"></a>


<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul>
<li><a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="noopener">LeetCode-206. Reverse Linked List（反转链表）</a> - 链表操作</li>
<li><a href="https://leetcode.com/problems/merge-two-binary-trees/" target="_blank" rel="noopener">LeetCode-617. Merge Two Binary Trees</a> - 二叉树</li>
<li><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">LeetCode-104. Maximum Depth of Binary Tree（二叉树的最大深度）</a> - 遍历二叉树</li>
<li><a href="https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/" target="_blank" rel="noopener">LeetCode-1290. Convert Binary Number in a Linked List to Integer（二进制链表转整数）</a></li>
<li><a href="https://leetcode.com/problems/to-lower-case/" target="_blank" rel="noopener">LeetCode-709. To Lower Case（转换成小写字母）</a></li>
</ul>
<h2 id="206-Reverse-Linked-List（反转链表）"><a href="#206-Reverse-Linked-List（反转链表）" class="headerlink" title="206. Reverse Linked List（反转链表）"></a>206. Reverse Linked List（反转链表）</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="noopener">LeetCode-206.Reverse Linked List（反转链表）</a></li>
</ul>
<h3 id="Approach-1-迭代"><a href="#Approach-1-迭代" class="headerlink" title="Approach 1-迭代"></a>Approach 1-迭代</h3><h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>遍历列表，将当前节点的 <code>next</code> 指针改为指向前一个元素，实现对列表的反转。最后，返回新的头引用。</li>
<li>时间复杂度：<code>O(n)</code></li>
<li>空间复杂度：<code>O(1)</code></li>
</ul>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">        ListNode curr = head;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode nextTemp = curr.next;</span><br><span class="line">            curr.next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = nextTemp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        ListNode *curr = head;</span><br><span class="line">        ListNode *prev = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span>(curr != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            ListNode *tmpNext = curr-&gt;next;</span><br><span class="line">            curr-&gt;next = prev;</span><br><span class="line">            prev= curr;</span><br><span class="line">            curr = tmpNext;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>




<h3 id="Approach-2-递归"><a href="#Approach-2-递归" class="headerlink" title="Approach 2-递归"></a>Approach 2-递归</h3><h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li><a href="https://leetcode-cn.com/problems/reverse-linked-list/solution/fan-zhuan-lian-biao-by-leetcode/" target="_blank" rel="noopener">LeetCode-206.反转列表 | 官方题解</a></li>
<li>从递归角度分析该问题，假设列表的其余部分已经被反转，现考虑该如何反转</li>
<li>对于列表，假设其 $[n_{k-1},n_{m}]$ 部分已完成反转，当前对节点 $n_{k}$ 进行操作，使得 $n_{k+1}$ 的下一个节点指向 $n_{k}$，即 $n_{k}.next.next = n_{k}$。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">n_&#123;1&#125;\rightarrow ... \rightarrow n_&#123;k-1&#125; \rightarrow n_&#123;k&#125; \rightarrow n_&#123;k+1&#125; \leftarrow ... \leftarrow n_&#123;m&#125; \leftarrow null</span><br></pre></td></tr></table></figure>

<ul>
<li>需要小心的是节点 $n_{1}$ 的 <code>next</code> 指针需要指向 <code>null</code>。若忽略了这一点，链表中可能会产生循环。（使用大小为 2 的链表测试，可能会捕获此错误）</li>
<li>时间复杂度：<code>O(n)</code></li>
<li>空间复杂度：<code>O(n)</code>：由于使用递归，将会使用隐式栈空间，递归深度可能会达到 <code>n</code> 层</li>
</ul>
<h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode reverseTmpList = reverseList(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> reverseTmpList;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> head;</span><br><span class="line">       &#125;</span><br><span class="line">        ListNode *reverseTmpList = reverseList(head-&gt;next);</span><br><span class="line">        head-&gt;next-&gt;next = head;</span><br><span class="line">        head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> reverseTmpList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>








<h2 id="617-Merge-Two-Binary-Trees（合并二叉树）"><a href="#617-Merge-Two-Binary-Trees（合并二叉树）" class="headerlink" title="617. Merge Two Binary Trees（合并二叉树）"></a>617. Merge Two Binary Trees（合并二叉树）</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode.com/problems/merge-two-binary-trees/" target="_blank" rel="noopener">LeetCode-617.Merge Two Binary Trees（合并二叉树）</a></li>
</ul>
<h3 id="Approach-1-递归"><a href="#Approach-1-递归" class="headerlink" title="Approach 1-递归"></a>Approach 1-递归</h3><h4 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>使用递归方法求解</li>
<li>时间复杂度：<code>O(m)</code> 。递归方法中，共有 <code>m</code> 个节点需要遍历（<code>m</code> 为给定的两个二叉树节点数目的最小值）</li>
<li>空间复杂度：<code>O(m)</code> 。递归栈的深度，最差情况下最大值可为 <code>m</code>。递归深度平均值为 <code>log(m)</code></li>
</ul>
<h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">mergeTrees</span><span class="params">(TreeNode t1, TreeNode t2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t1 == <span class="keyword">null</span>) <span class="keyword">return</span> t2;</span><br><span class="line">        <span class="keyword">if</span>(t2 == <span class="keyword">null</span>) <span class="keyword">return</span> t1;</span><br><span class="line">        t1.val += t2.val;</span><br><span class="line">        t1.left = mergeTrees(t1.left,t2.left);</span><br><span class="line">        t1.right = mergeTrees(t1.right,t2.right);</span><br><span class="line">        <span class="keyword">return</span> t1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






<h2 id="104-Maximum-Depth-of-Binary-Tree（二叉树的最大深度）"><a href="#104-Maximum-Depth-of-Binary-Tree（二叉树的最大深度）" class="headerlink" title="104. Maximum Depth of Binary Tree（二叉树的最大深度）"></a>104. Maximum Depth of Binary Tree（二叉树的最大深度）</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">LeetCode-104. Maximum Depth of Binary Tree（二叉树的最大深度）</a></li>
</ul>
<h3 id="Approach-1-递归-1"><a href="#Approach-1-递归-1" class="headerlink" title="Approach 1-递归"></a>Approach 1-递归</h3><h4 id="Analysis-3"><a href="#Analysis-3" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>使用递归方法求解</li>
<li>时间复杂度：<code>O(n)</code> ：每个节点均遍历一次，其中 <code>n</code> 为节点数</li>
<li>空间复杂度：<code>O(n)</code>：最糟糕情况下，树是完全不平衡的，例如每个节点只有左子节点，递归将被调用 <code>n</code> 次（树的高度），最差空间复杂度为 <code>O(n)</code>。最好情况下（树是完全平衡的），树的高度为 <code>log(n)</code></li>
<li>递归栈的深度，最差情况下最大值可为 <code>m</code>。递归深度平均值为 <code>log(n)</code>，此时空间复杂度是 <code>O(log(n))</code>。</li>
</ul>
<h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line">  public <span class="built_in">int</span> max<span class="constructor">Depth(TreeNode <span class="params">root</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root<span class="operator"> == </span>null) &#123;</span><br><span class="line">      return <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">int</span> left_height = max<span class="constructor">Depth(<span class="params">root</span>.<span class="params">left</span>)</span>;</span><br><span class="line">      <span class="built_in">int</span> right_height = max<span class="constructor">Depth(<span class="params">root</span>.<span class="params">right</span>)</span>;</span><br><span class="line">      return java.lang.<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>max(left_height, right_height) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






<h2 id="1290-Convert-Binary-Number-in-a-Linked-List-to-Integer（二进制链表转整数）"><a href="#1290-Convert-Binary-Number-in-a-Linked-List-to-Integer（二进制链表转整数）" class="headerlink" title="1290. Convert Binary Number in a Linked List to Integer（二进制链表转整数）"></a>1290. Convert Binary Number in a Linked List to Integer（二进制链表转整数）</h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/" target="_blank" rel="noopener">LeetCode-1290. Convert Binary Number in a Linked List to Integer（二进制链表转整数）</a></li>
</ul>
<h3 id="Approach-1-模拟二进制转十进制-位操作"><a href="#Approach-1-模拟二进制转十进制-位操作" class="headerlink" title="Approach 1-模拟二进制转十进制+位操作"></a>Approach 1-模拟二进制转十进制+位操作</h3><h4 id="Analysis-4"><a href="#Analysis-4" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>由于链表中从高位到低位存放了数字的二进制表示，因此可以使用二进制转十进制的方法，在遍历一遍链表的同时，得到数字的十进制值。</li>
<li>时间复杂度：<code>O(n)</code>，其中 <code>n</code> 是链表中的节点个数</li>
<li>空间复杂度：<code>O(1)</code></li>
</ul>
<p>需要注意的是，在求解过程中（如下）</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">int<span class="built_in"> sum</span> = <span class="number">0</span>;</span><br><span class="line">while<span class="built_in">(head</span> != null)&#123;</span><br><span class="line">    //sum = <span class="number">2</span><span class="built_in">*sum</span> +<span class="built_in"> head</span>.val;</span><br><span class="line">   <span class="built_in"> sum</span> =<span class="built_in"> sum</span>&lt;&lt;<span class="number">1</span> |<span class="built_in"> head</span>.val;</span><br><span class="line">   <span class="built_in"> head</span> =<span class="built_in"> head</span>.<span class="keyword">next</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span><span class="built_in"> sum</span>;</span><br></pre></td></tr></table></figure>

<p>使用 <code>sum = 2*sum + head.val</code> 计算，乘法操作耗时是大于位操作的。因此，该步骤可优化为</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">//<span class="built_in">sum</span> = <span class="number">2</span>*<span class="built_in">sum</span> + head.val;</span><br><span class="line"><span class="built_in">sum</span> = <span class="built_in">sum</span>&lt;&lt;<span class="number">1</span> | <span class="type">head</span>.val;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>LeetCode平台，C++语言，使用乘法操作 <code>sum = 2*sum + head.val</code>，耗时4ms，内存消耗8.4M；使用位操作 <code>sum = sum&lt;&lt;1 | head.val;</code>，耗时0ms，内存消耗8.3M</p>
</blockquote>
<h4 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition <span class="keyword">for</span> singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode <span class="keyword">next</span>;</span><br><span class="line"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public int getDecimalValue(ListNode<span class="built_in"> head</span>) &#123;</span><br><span class="line">        int<span class="built_in"> sum</span> = <span class="number">0</span>;</span><br><span class="line">        while<span class="built_in">(head</span> != null)&#123;</span><br><span class="line">            //sum = <span class="number">2</span><span class="built_in">*sum</span> +<span class="built_in"> head</span>.val;</span><br><span class="line">           <span class="built_in"> sum</span> =<span class="built_in"> sum</span>&lt;&lt;<span class="number">1</span> |<span class="built_in"> head</span>.val;</span><br><span class="line">           <span class="built_in"> head</span> =<span class="built_in"> head</span>.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span><span class="built_in"> sum</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>C++</li>
</ul>
<figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * <span class="type">Definition</span> <span class="keyword">for</span> singly-linked <span class="built_in">list</span>.</span><br><span class="line"> * <span class="keyword">struct</span> <span class="type">ListNode</span> &#123;</span><br><span class="line"> *     <span class="built_in">int</span> <span class="keyword">val</span>;</span><br><span class="line"> *     <span class="type">ListNode</span> *next;</span><br><span class="line"> *     <span class="type">ListNode</span>(<span class="built_in">int</span> x) : <span class="keyword">val</span>(x), next(<span class="type">NULL</span>) &#123;&#125;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">class</span> <span class="type">Solution</span> &#123;</span><br><span class="line">public:</span><br><span class="line">    <span class="built_in">int</span> getDecimalValue(<span class="type">ListNode</span>* head) &#123;</span><br><span class="line">        <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(head)&#123;</span><br><span class="line">            sum = sum&lt;&lt;<span class="number">1</span> | head-&gt;<span class="keyword">val</span>;</span><br><span class="line">            head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="709-To-Lower-Case（转换成小写字母）"><a href="#709-To-Lower-Case（转换成小写字母）" class="headerlink" title="709. To Lower Case（转换成小写字母）"></a>709. To Lower Case（转换成小写字母）</h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode.com/problems/to-lower-case/" target="_blank" rel="noopener">LeetCode-709. To Lower Case（转换成小写字母）</a></li>
</ul>
<h3 id="Approach-1-ASCII编码转换"><a href="#Approach-1-ASCII编码转换" class="headerlink" title="Approach 1-ASCII编码转换"></a>Approach 1-ASCII编码转换</h3><h4 id="Analysis-5"><a href="#Analysis-5" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>使用 ASCII 编码进行大小写字母转换。大写字母 <code>A~Z</code> 的 ASCII值为 <code>65~90</code>;小写字母 <code>a~z</code> 的 ASCII值为 <code>97~122</code>。小写字母 <code>a</code> 和大写字母 <code>A</code> 的 ASCII 码差值为 32。</li>
<li>时间复杂度：<code>O(n)</code>，其中 <code>n</code> 是字符串长度</li>
<li>空间复杂度：<code>O(1)</code></li>
</ul>
<p>更进一步，观察大小写字母 ASCII 码的二进制</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">A---<span class="number">-65</span>----<span class="number">-1000001</span></span><br><span class="line">a---<span class="number">-97</span>----<span class="number">-1100001</span></span><br></pre></td></tr></table></figure>

<p>因此，在大小转换时，可使用位运算，进行或操作</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">char c = (<span class="name">char</span>)(<span class="name">str</span>.charAt(<span class="name">i</span>) | (<span class="name">char</span>)(<span class="number">32</span>))<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h4 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line">    public String <span class="keyword">to</span><span class="constructor">LowerCase(String <span class="params">str</span>)</span> &#123;</span><br><span class="line">        StringBuilder res = <span class="keyword">new</span> <span class="constructor">StringBuilder()</span>;</span><br><span class="line">        for(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;str.length<span class="literal">()</span>;i++)&#123;</span><br><span class="line">            <span class="built_in">char</span> c = (<span class="built_in">char</span>)(str.<span class="built_in">char</span><span class="constructor">At(<span class="params">i</span>)</span> <span class="pattern-match">| (<span class="built_in">char</span>)(32));</span></span><br><span class="line"><span class="pattern-match">            res.append(c);</span></span><br><span class="line"><span class="pattern-match">        &#125;</span></span><br><span class="line"><span class="pattern-match">        return res.<span class="keyword">to</span><span class="constructor">String()</span>;</span></span><br><span class="line"><span class="pattern-match">    &#125;</span></span><br><span class="line"><span class="pattern-match">&#125;</span></span><br></pre></td></tr></table></figure>

<p>上述方法，耗时0ms，内存34.2MB。如果使用Java内置的 <code>toLowerCase()</code> 方法，耗时0ms，内存34.1MB。</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String toLowerCase(String <span class="keyword">str</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">str</span>.toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>C++</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    string toLowerCase(string <span class="keyword">str</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">str</span>.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">str</span>[i] &gt;= <span class="string">'A'</span> &amp;&amp; <span class="keyword">str</span>[i] &lt;= <span class="string">'Z'</span>)&#123;</span><br><span class="line">                <span class="keyword">str</span>[i] += <span class="number">32</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">str</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划经典题目整理</title>
    <url>/2020/02/22/algorithm-dp-1/</url>
    <content><![CDATA[<ul>
<li>记录和汇总动态规划经典题目</li>
</ul>
<a id="more"></a>

<h2 id="买苹果"><a href="#买苹果" class="headerlink" title="买苹果"></a>买苹果</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://www.nowcoder.com/questionTerminal/61cfbb2e62104bc8aa3da5d44d38a6ef?toCommentId=449308" target="_blank" rel="noopener">动态规划-买苹果 | 牛客网</a></li>
<li>小易去附近的商店买苹果，奸诈的商贩使用了捆绑交易，只提供 6 个每袋和 8 个每袋的包装(包装不可拆分)。 可是小易现在只想购买恰好 <code>n</code> 个苹果，小易想购买尽量少的袋数方便携带。如果不能购买恰好 <code>n</code> 个苹果，小易将不会购买。</li>
<li>输入描述: 输入一个整数n，表示小易想购买 <code>n(1 ≤ n ≤ 100)</code> 个苹果</li>
<li>输出描述: 输出一个整数表示最少需要购买的袋数，如果不能买恰好 <code>n</code> 个苹果则输出 <code>-1</code></li>
<li>测试用例</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//input</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="Approach-1-动态规划（通解）"><a href="#Approach-1-动态规划（通解）" class="headerlink" title="Approach 1-动态规划（通解）"></a>Approach 1-动态规划（通解）</h3><h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>采用动态规划方法求解。</li>
<li>创建一个 <code>vector</code> 容器 <code>steps</code>，<code>steps[i]</code> 表示购买 <code>i</code> 个苹果所需的最小袋数。</li>
<li>初始化为 <code>steps</code> 容器为 <code>INT_MAX</code>。</li>
<li>从购买1个苹果开始遍历，若 <code>steps[i]</code> 为 <code>INT_MAX</code>，表示无法购买该个数的苹果，直接开始下次循环。</li>
<li>若 <code>steps[i]</code> 不为 <code>INT_MAX</code>，表示该个数的苹果可以购买，进行动态规划求解。</li>
<li>动态规划的转移方程为</li>
</ul>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">steps<span class="string">[i+j]</span> = min(steps<span class="string">[i]</span>+<span class="number">1</span>,steps<span class="string">[i+j]</span>)   //j为<span class="number">6</span>或<span class="number">8</span></span><br><span class="line">steps<span class="string">[0]</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>动态规划的过程如下图所示</li>
</ul>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/nowcode-buy-apple-1.png" alt="nowcode-buy-apple-1.png"></p>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> amounts;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;amounts;</span><br><span class="line">    <span class="comment">//小于6情况处理</span></span><br><span class="line">    <span class="keyword">if</span>(amounts &lt; <span class="number">6</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; steps(amounts+<span class="number">1</span>,INT_MAX);</span><br><span class="line">    steps[<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">    steps[<span class="number">8</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">6</span>;i&lt;=amounts;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(steps[i] == INT_MAX)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">6</span> &lt;= amounts)&#123;</span><br><span class="line">                steps[i+<span class="number">6</span>] = min(steps[i]+<span class="number">1</span>,steps[i+<span class="number">6</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">8</span> &lt;= amounts)&#123;</span><br><span class="line">                steps[i+<span class="number">8</span>] = min(steps[i]+<span class="number">1</span>,steps[i+<span class="number">8</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    steps[amounts] = (steps[amounts] == INT_MAX)? <span class="number">-1</span>:steps[amounts];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;steps[amounts]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="Approach-2-贪婪算法"><a href="#Approach-2-贪婪算法" class="headerlink" title="Approach 2-贪婪算法"></a>Approach 2-贪婪算法</h3><h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>采用贪婪算法求解。</li>
<li>优先选取每袋含有 8 个苹果的包装。若还有余数，则再用 6 个装的包装去购买。</li>
<li>如果不行的话，则将 8 个装的个数减去 1 个，进行回溯，再用 6 包装的去购买。</li>
<li>如果还不行的话，再次回溯，直到购买 8 包装的个数为 0。</li>
</ul>
<blockquote>
<p><strong>贪婪算法并不一定能得到最优解，但是一个可行的，较好的解。</strong> 例如，给定硬币 <code>coins=[1,2,10,25]</code>，金额总数 <code>amounts=30</code>，不限制每种币值的硬币数量，要求用所给硬币凑出所需金额，并且硬币数量最少。若采用贪婪算法求解，需要 6 枚（25+5*1）硬币。 若采用动态规划求解，所需 3 枚（10+10+10）硬币。</p>
</blockquote>
<p>下面对使用贪婪算法能否得到最优解进行分析。</p>
<ul>
<li>首先，6 和 8 都是偶数。因此，能凑出的个数也一定是偶数。程序中若苹果总数是奇数，可以直接返回 <code>-1</code>。</li>
<li>再次，偶数个苹果数对 8 取模，其结果只可能为 <code>0,2,4,6</code>。</li>
<li>若余数为 6 或者 0，则可以直接用 6 包装情况处理，不需要回溯购买 8 包装的情况。</li>
<li>若余数为 4，只需回溯 1 次即可，因为<code>8+4=12</code>, <code>12%6=0</code>。</li>
<li>若余数为 2，只需回溯 2 次即可，因为<code>8+8+2=18, 18%6=0</code>。</li>
</ul>
<p>综上，本题情况使用贪婪算法一定能得到最优解。</p>
<h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>C++</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> maxPackages(<span class="built_in">int</span> <span class="built_in">num</span>) &#123;</span><br><span class="line">    <span class="built_in">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">int</span> mul, remains;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">num</span>%<span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">//非偶数直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">num</span> % <span class="number">8</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        res += <span class="built_in">num</span> / <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        mul = <span class="built_in">num</span> / <span class="number">8</span>;  <span class="comment">//倍数</span></span><br><span class="line">        remains = <span class="built_in">num</span> % <span class="number">8</span>;</span><br><span class="line">        res += mul;</span><br><span class="line">        <span class="built_in">num</span> = <span class="built_in">num</span> % <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">while</span> (mul &gt;= <span class="number">0</span>) &#123;  <span class="comment">//回溯8包装</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">num</span> % <span class="number">6</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                res += <span class="built_in">num</span> / <span class="number">6</span>;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                mul--;  <span class="comment">//回溯  8包装购买袋数-1</span></span><br><span class="line">                res--;</span><br><span class="line">                <span class="built_in">num</span> = <span class="built_in">num</span> + <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">num</span>;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; <span class="built_in">num</span>) &#123;</span><br><span class="line">        cout &lt;&lt; maxPackages(<span class="built_in">num</span>) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Approach-3-数字分析求解"><a href="#Approach-3-数字分析求解" class="headerlink" title="Approach 3-数字分析求解"></a>Approach 3-数字分析求解</h3><h4 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>对数字特征进行分析。</li>
<li>首先，6 和 8 都是偶数。因此，<strong>能凑出的个数也一定是偶数。程序中若苹果总数是奇数，可以直接返回-1。</strong></li>
<li>再次，偶数个苹果数对 8 取模，其结果只可能为 <code>0,2,4,6</code>。</li>
<li>若余数为 6 或者 0，则可以直接用 6 包装情况处理，不需要回溯购买 8 包装的情况。</li>
<li>若余数为 4，只需回溯 1 次即可，因为 <code>8+4=12, 12%6=0</code>。</li>
<li>若余数为 2，只需回溯 2 次即可，因为 <code>8+8+2=18, 18%6=0</code>。</li>
</ul>
<p>综上，可以采用如下思路进行处理。（由于数字 6 和 8 的特征，本方法只适用于本题，不具有通用性，动态规划为本题通用解法）</p>
<ul>
<li>情况1：若 <code>num</code> 不是偶数，则直接返回 <code>-1</code></li>
<li>情况2：若 <code>num%8=0</code>，则返回 <code>num/8</code></li>
<li>情况3：若 <code>num%8 !=0</code>，则只需回溯 1 次或者 2 次 8 包装购买个数，就可以求解。<ul>
<li>回溯 1 次，其结果为 <code>n/8-1+2= n/8+1</code></li>
<li>回溯 2 次，其结果为 <code>n/8-2+3 = n/8+1</code></li>
<li>因此，可以情况3下，可以返回 <code>n/8+1</code></li>
</ul>
</li>
</ul>
<h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; num) &#123;</span><br><span class="line">        <span class="keyword">if</span>(num%<span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(num%<span class="number">8</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;num/<span class="number">8</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>+num/<span class="number">8</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="跳石板"><a href="#跳石板" class="headerlink" title="跳石板"></a>跳石板</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul>
<li><a href="https://www.nowcoder.com/questionTerminal/4284c8f466814870bae7799a07d49ec8" target="_blank" rel="noopener">跳石板 | 牛客网</a></li>
</ul>
<p>小易来到了一条石板路前，每块石板上从1挨着编号为：1、2、3…….</p>
<p>这条石板路要根据特殊的规则才能前进：对于小易当前所在的编号为K的石板，小易单次只能往前跳K的一个约数(不含1和K)步，即跳到K+X(X为K的一个非1和本身的约数)的位置。 小易当前处在编号为N的石板，他想跳到编号恰好为M的石板去，小易想知道最少需要跳跃几次可以到达。</p>
<ul>
<li>例如</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">N = <span class="number">4</span>，M = <span class="number">24</span>：</span><br><span class="line"><span class="number">4</span>-&gt;<span class="number">6</span>-&gt;<span class="number">8</span>-&gt;<span class="number">12</span>-&gt;<span class="number">18</span>-&gt;<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p>于是小易最少需要跳跃5次，就可以从4号石板跳到24号石板。</p>
<ul>
<li>输入描述</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入为一行，有两个整数N，M，以空格隔开。 (<span class="number">4</span> ≤ N ≤ <span class="number">100000</span>) (N ≤ M ≤ <span class="number">100000</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>输出描述</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输出小易最少需要跳跃的步数,如果不能到达输出<span class="number">-1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试用例</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="number">4</span> <span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="Approach-1-动态规划"><a href="#Approach-1-动态规划" class="headerlink" title="Approach 1-动态规划"></a>Approach 1-动态规划</h3><h4 id="Analysis-3"><a href="#Analysis-3" class="headerlink" title="Analysis"></a>Analysis</h4><p>采用动态规划思想求解。创建一个 <code>vector</code> 容器 <code>steps</code>，<code>steps[i]</code> 表示到达 i 号石板所需的最小步数。</p>
<ul>
<li>初始化为 <code>steps</code> 容器为 <code>INT_MAX</code>。</li>
<li>从序号 N 的石板开始逐个遍历，若 <code>steps[i]</code>为 <code>INT_MAX</code>，表示该点不可到达，直接开始下次循环。</li>
<li>若 <code>steps[i]</code> 不为 <code>INT_MAX</code>，表示该点可以到达。</li>
</ul>
<p>动态规划的转移方程为</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">steps<span class="string">[i]</span> = INT_MAX    //初始化所有值为INT_MAX</span><br><span class="line">//i为石板编号，j=<span class="number">1</span>,<span class="number">2</span>...M-<span class="number">1</span></span><br><span class="line">// 若j为i的约数，则 steps<span class="string">[i+j]</span> = steps<span class="string">[i]</span>+<span class="number">1</span></span><br><span class="line">steps<span class="string">[i+j]</span> = min(steps<span class="string">[i]</span>+<span class="number">1</span>,steps<span class="string">[i+j]</span>)   </span><br><span class="line">steps<span class="string">[N]</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure>


<h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><p>下面给出代码实现</p>
<ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,M;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; steps(M+<span class="number">1</span>,INT_MAX);</span><br><span class="line">        steps[N] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=N;i&lt;=M;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(steps[i] == INT_MAX)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;(j*j)&lt;=i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i%j == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i+j &lt;= M)&#123;</span><br><span class="line">                        steps[i+j] = min(steps[i]+<span class="number">1</span>,steps[i+j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//如果j是约数，那么(i/j)也是约数</span></span><br><span class="line">                    <span class="keyword">if</span>(i+(i/j) &lt;= M)&#123;</span><br><span class="line">                        steps[i+(i/j)] = min(steps[i]+<span class="number">1</span>,steps[i+(i/j)]);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(steps[M] == INT_MAX)&#123;</span><br><span class="line">            steps[M] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;steps[M]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/leetcode/nowcode-dp-demo2-1.png" alt=""></p>
<p>此处给出一个常规的优化项说明，上述代码在判断 <code>for</code> 循环时，限制循环终止条件为 <code>(j*j)&lt;=i</code>，对于大于 <code>sqrt(i)</code> 的约数，在同一个for循环中进行判断，即</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">for(<span class="name">int</span> j=2<span class="comment">;(j*j)&lt;=i;j++)&#123;</span></span><br><span class="line">    if(<span class="name">i</span>%j == <span class="number">0</span>)&#123;</span><br><span class="line">        if(<span class="name">i+j</span> &lt;= M)&#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">        //如果j是约数，那么(<span class="name">i/j</span>)也是约数</span><br><span class="line">        if(<span class="name">i+</span>(<span class="name">i/j</span>) &lt;= M)&#123;</span><br><span class="line">           ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述可以明显减少for循环次数，针对<code>N=4，M=24</code>的情况，上述代码会执行10次循环。如果使用下述代码，将会执行15次代码（在牛客网系统上，会被当做超时处理）</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(int <span class="built_in">j</span>=<span class="number">2</span>;<span class="built_in">j</span>&lt;<span class="built_in">i</span>;<span class="built_in">j</span>++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">i</span><span class="comment">%j == 0)&#123;</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">i</span>+<span class="built_in">j</span> &lt;= M)&#123;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Approach-2-贪婪算法-1"><a href="#Approach-2-贪婪算法-1" class="headerlink" title="Approach 2-贪婪算法"></a>Approach 2-贪婪算法</h3><h4 id="Analysis-4"><a href="#Analysis-4" class="headerlink" title="Analysis"></a>Analysis</h4><p>(本题目，使用贪婪算法并不能AC，此处给出的贪婪算法，仅作为一个示例给出，用于分析贪婪算法的使用场景)</p>
<p><strong>贪婪算法并不一定能得到最优解，但是一个可行的，较好的解。</strong></p>
<p>该问题若采用贪婪算法求解，并不会得到最优解，只会得到一个可行的，较好的解。例如，下述程序中采用了贪婪算法求解。每次都选取最大的约数前进一步。若后续发生不可到达目标点，则进行回溯，取第2大的约数作为步进值。<strong>下述程序通过率为80%，并不能AC。例如，对于N=676, M=12948情况，贪婪算法求解为13步，而动态规划算法求解为10步。</strong></p>
<p>贪婪算法并不一定能得到最优解，但是一个可行的，较好的解。例如，给定硬币coins=[1,2,10,25]，金额总数amounts=30，不限制每种币值的硬币数量，要求用所给硬币凑出所需金额，并且硬币数量最少。若采用贪婪算法求解，需要6枚（25+5*1）硬币。 若采用动态规划求解，所需3枚（10+10+10）硬币。 — 贪婪算法</p>
<h4 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 程序通过率为80%，并不能AC</span></span><br><span class="line"><span class="comment">//对于N=676, M=12948情况，贪婪算法求解为13步，而动态规划算法求解为10步。</span></span><br><span class="line"><span class="comment">// 贪婪算法并不一定能得到最优解，但是一个可行的，较好的解。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stepSearch</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> M)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N &gt; M) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (N == M) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i&lt;N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i*(N / i) == N) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">if</span> (stepSearch(N + N/i, M) != <span class="number">-1</span>) &#123;</span><br><span class="line">                res += stepSearch(N + N/i, M);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, M;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; stepSearch(N, M) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>DP</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode题解-001</title>
    <url>/2020/02/22/leetcode-001/</url>
    <content><![CDATA[<ul>
<li>记录LeetCode题目笔记，汇总LeetCode解答记录</li>
</ul>
<a id="more"></a>



<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><ul>
<li><a href="https://leetcode.com/problems/linked-list-cycle/?tab=Description" target="_blank" rel="noopener">LeetCode-141. Linked List Cycle（环形链表）</a> - 环形链表</li>
<li><a href="https://leetcode.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">LeetCode-142. Linked List Cycle II（环形链表 II）</a> - 环形链表</li>
<li><a href="https://leetcode.com/problems/add-digits/?tab=Description" target="_blank" rel="noopener">LeetCode-258. Add Digits（各位相加）</a> - 数字推导（数字根）</li>
<li><a href="https://leetcode.com/problems/hamming-distance/" target="_blank" rel="noopener">LeetCode-461. Hamming Distance（汉明距离）</a> - 位运算</li>
<li><a href="https://leetcode.com/problems/island-perimeter/?tab=Description" target="_blank" rel="noopener">LeetCode-463. Island Perimeter（岛屿的周长）</a> - 常规计算</li>
</ul>
<h2 id="141-Linked-List-Cycle（环形链表）"><a href="#141-Linked-List-Cycle（环形链表）" class="headerlink" title="141. Linked List Cycle（环形链表）"></a>141. Linked List Cycle（环形链表）</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode.com/problems/linked-list-cycle/?tab=Description" target="_blank" rel="noopener">LeetCode - 141. Linked List Cycle（环形链表）</a></li>
</ul>
<h3 id="Approach-1-Hash-Table"><a href="#Approach-1-Hash-Table" class="headerlink" title="Approach 1-Hash Table"></a>Approach 1-Hash Table</h3><h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>使用哈希表解决，时间复杂度为 <code>O(n)</code>，空间复杂度为 <code>O(n)</code>。</li>
<li>遍历链表，若遇到 <code>Null</code>，则 表明链表无环。若遍历的节点在哈希表中已存在，则表明链表有环。</li>
</ul>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>JavaScript</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hasCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> nodesSeen = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="keyword">if</span>(head === <span class="literal">null</span>  || head.next === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(head !== <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nodesSeen.has(head))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            nodesSeen.add(head);</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    Set&lt;ListNode&gt; nodesSeen = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nodesSeen.contains(head)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nodesSeen.add(head);</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h3 id="Approach-2-Two-Pointers"><a href="#Approach-2-Two-Pointers" class="headerlink" title="Approach 2-Two Pointers"></a>Approach 2-Two Pointers</h3><h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>使用快慢指针解决，时间复杂度为 <code>O(n)</code>，空间复杂度为 <code>O(1)</code>。</li>
<li>Use two pointers, walker and runner. </li>
<li>Walker moves step by step. </li>
<li>Runner moves two steps at time.</li>
<li>If the Linked List has a cycle walker and runner will meet at some point.</li>
<li>Ref <ul>
<li><a href="https://leetcode.com/problems/linked-list-cycle/solution/" target="_blank" rel="noopener">LeetCode Solution</a></li>
<li><a href="http://www.cnblogs.com/AndyJee/p/4463998.html" target="_blank" rel="noopener">LeetCode 141/142 - Linked List Cycle | CNBlogs</a></li>
</ul>
</li>
</ul>
<h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode *walker = head; <span class="comment">//moves one step each time</span></span><br><span class="line">        ListNode *runner = head; <span class="comment">//moves two step each time</span></span><br><span class="line">        <span class="keyword">while</span>(runner-&gt;next != <span class="literal">NULL</span> &amp;&amp; runner-&gt;next-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            walker = walker-&gt;next;</span><br><span class="line">            runner = runner-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(walker == runner)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>JavaScript</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hasCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> walker = <span class="keyword">new</span> ListNode();</span><br><span class="line">    <span class="keyword">var</span> runner = <span class="keyword">new</span> ListNode();</span><br><span class="line">    walker = head;</span><br><span class="line">    runner = head;</span><br><span class="line">    <span class="keyword">while</span>(runner.next!==<span class="literal">null</span> &amp;&amp; runner.next.next!==<span class="literal">null</span>) &#123;</span><br><span class="line">        walker = walker.next;</span><br><span class="line">        runner = runner.next.next;</span><br><span class="line">        <span class="keyword">if</span>(walker === runner) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>Java </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head.next;</span><br><span class="line">        <span class="keyword">while</span> (slow != fast) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fast == <span class="keyword">null</span> || fast.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Python</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">None</span> <span class="keyword">or</span> head.next == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        slow = fast = head</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            <span class="keyword">if</span> slow == fast:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>






<h2 id="142-Linked-List-Cycle-II-（环形链表II）"><a href="#142-Linked-List-Cycle-II-（环形链表II）" class="headerlink" title="142. Linked List Cycle II （环形链表II）"></a>142. Linked List Cycle II （环形链表II）</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">LeetCode - 142. Linked List Cycle II（环形链表II）</a></li>
</ul>
<h3 id="Approach-1-Two-Pointers"><a href="#Approach-1-Two-Pointers" class="headerlink" title="Approach 1-Two Pointers"></a>Approach 1-Two Pointers</h3><h4 id="Analysis-2"><a href="#Analysis-2" class="headerlink" title="Analysis"></a>Analysis</h4><p><a href="https://leetcode.com/problems/linked-list-cycle/?tab=Description" target="_blank" rel="noopener">LeetCode-141. Linked List Cycle</a>  中，完成了链表是否有环的判断。在此基础上，本题实现对环起点的判断和环长度的计算。</p>
<p>下面结合 <a href="http://www.cnblogs.com/AndyJee/p/4463998.html" target="_blank" rel="noopener">LeetCode 141/142 - Linked List Cycle | CNBlogs</a> 参考链接，对环起点的判断和环长度的计算进行分析。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/front-end-2019/leetcode-142.png" alt="leetcode-142.png"></p>
<p>设链表起点距离环的起点距离为<code>a</code>，圈长为<code>n</code>，当 <code>walker</code> 和 <code>runner</code> 相遇时，相遇点距离环起点距离为<code>b</code>，此时 <code>runner</code> 已绕环走了<code>k</code>圈，则</p>
<ul>
<li><code>walker</code> 走的距离为 <code>a+b</code>，步数为 <code>a+b</code></li>
<li><code>runner</code> 速度为 <code>walker</code> 的两倍，<code>runner</code> 走的距离为 <code>2*(a+b)</code>，步数为 <code>a+b</code></li>
<li><code>runner</code> 走的距离为 <code>a+b+k*n=2*(a+b)</code>，从而 <code>a+b=k*n</code>，<code>a=k*n-b</code></li>
<li>因此有，当 <code>walker</code> 走 <code>a</code> 步，<code>runner</code> 走 <code>(k*n-b)</code> 步。当 <code>k=1</code> 时，则为 <code>(n-b)</code> 步</li>
</ul>
<h5 id="环的起点"><a href="#环的起点" class="headerlink" title="环的起点"></a>环的起点</h5><p>令 <code>walker</code> 返回链表初始头结点，<code>runner</code> 仍在相遇点。此时，令 <code>walker</code> 和 <code>runner</code> 每次都走一步距离。当 <code>walker</code> 和 <code>runner</code> 相遇时，二者所在位置即环的起点。</p>
<p>证明过程如下。</p>
<p><code>walker</code> 走 <code>a</code> 步，到达环的起点；<code>runner</code> 初始位置为 <code>2(a+b)</code>，走了 <code>a</code> 步之后，即 <code>kn-b</code> 步之后，所在位置为 <code>2(a+b)+kn-b=2a+b+kn= a+(a+b)+kn=a+2kn</code>。因此，<code>runner</code> 位置是环的起点。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">// runner走的位置</span><br><span class="line"><span class="number">2</span>(a+b) + a</span><br><span class="line">= <span class="number">3</span>a + <span class="number">2</span>b    //消去b  b = k*n - a</span><br><span class="line">= <span class="number">3</span>a + <span class="number">2</span>*(k*n - a)</span><br><span class="line">= a + <span class="number">2</span>kn</span><br></pre></td></tr></table></figure>

<h5 id="环的长度"><a href="#环的长度" class="headerlink" title="环的长度"></a>环的长度</h5><p>在上述判断环的起点的基础上，求解环的长度。</p>
<ul>
<li>当 <code>walker</code> 和 <code>runner</code> 相遇时，二者所在位置即环的起点。此后，再让 <code>walker</code> 每次运动一步。</li>
<li><code>walker</code> 走 <code>n</code> 步之后，<code>walker</code> 和 <code>runner</code> 再次相遇。<code>walker</code> 所走的步数即是环的长度。</li>
</ul>
<h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><blockquote>
<p>注意，在 <code>while()</code> 中需要使用 <code>break</code> 及时跳出循环，否则提交时会出现超时错误 <code>Time Limit Exceeded</code></p>
</blockquote>
<ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(head == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> hasCycle = <span class="literal">false</span>;</span><br><span class="line">        ListNode *walker = head; <span class="comment">//moves one step each time</span></span><br><span class="line">        ListNode *runner = head; <span class="comment">//moves two step each time</span></span><br><span class="line">        <span class="keyword">while</span>(runner-&gt;next != <span class="literal">NULL</span> &amp;&amp; runner-&gt;next-&gt;next != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            walker = walker-&gt;next;</span><br><span class="line">            runner = runner-&gt;next-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(walker == runner)&#123;</span><br><span class="line">                hasCycle = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">//跳出循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(hasCycle == <span class="literal">true</span>)&#123;</span><br><span class="line">            walker = head;</span><br><span class="line">            <span class="keyword">while</span>(walker != runner)&#123;</span><br><span class="line">                walker = walker-&gt;next;</span><br><span class="line">                runner = runner-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> walker;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>JavaScript</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"> * @return &#123;ListNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> detectCycle = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head === <span class="literal">null</span> || head.next === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Tip - new ListNode() 创建可省略，节省代码运行时间</span></span><br><span class="line">    <span class="comment">// let walker = new ListNode();   // one steps</span></span><br><span class="line">    <span class="comment">// let runner = new ListNode();   // two steps</span></span><br><span class="line">    <span class="keyword">let</span> walker = head;</span><br><span class="line">    <span class="keyword">let</span> runner = head;</span><br><span class="line">    <span class="keyword">let</span> hasCycle = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(runner.next !== <span class="literal">null</span> &amp;&amp; runner.next.next !== <span class="literal">null</span>)&#123;</span><br><span class="line">        runner = runner.next.next;</span><br><span class="line">        walker = walker.next;</span><br><span class="line">        <span class="keyword">if</span>(runner === walker)&#123;</span><br><span class="line">            hasCycle = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">//jump loop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(hasCycle)&#123;</span><br><span class="line">        walker = head;</span><br><span class="line">        <span class="keyword">while</span>(walker !== runner)&#123;</span><br><span class="line">            runner = runner.next;</span><br><span class="line">            walker = walker.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> walker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">detectCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode walker = head;</span><br><span class="line">        ListNode runner = head;</span><br><span class="line">        <span class="keyword">boolean</span> hasCycle = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(runner.next != <span class="keyword">null</span> &amp;&amp; runner.next.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            walker = walker.next;</span><br><span class="line">            runner = runner.next.next;</span><br><span class="line">            <span class="keyword">if</span>(walker == runner)&#123;</span><br><span class="line">                hasCycle = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">//jump loop</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(hasCycle)&#123;</span><br><span class="line">            walker = head;</span><br><span class="line">            <span class="keyword">while</span>(walker != runner)&#123;</span><br><span class="line">                walker = walker.next;</span><br><span class="line">                runner = runner.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> walker;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Python</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> head == <span class="literal">None</span> <span class="keyword">or</span> head.next == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        runner = walker = head</span><br><span class="line">        hasCycle = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">while</span> runner <span class="keyword">and</span> runner.next:</span><br><span class="line">            runner = runner.next.next</span><br><span class="line">            walker = walker.next</span><br><span class="line">            <span class="keyword">if</span> runner == walker:</span><br><span class="line">                hasCycle = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> hasCycle:</span><br><span class="line">            walker = head</span><br><span class="line">            <span class="keyword">while</span> walker != runner:</span><br><span class="line">                walker = walker.next</span><br><span class="line">                runner = runner.next</span><br><span class="line">            <span class="keyword">return</span> walker</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>







<h2 id="258-Add-Digits（各位相加）"><a href="#258-Add-Digits（各位相加）" class="headerlink" title="258. Add Digits（各位相加）"></a>258. Add Digits（各位相加）</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode.com/problems/add-digits/?tab=Description" target="_blank" rel="noopener">LeetCode-258. Add Digits（各位相加）</a></li>
</ul>
<h3 id="Approach-1-Digit-Root-公式"><a href="#Approach-1-Digit-Root-公式" class="headerlink" title="Approach 1-Digit Root 公式"></a>Approach 1-Digit Root 公式</h3><h4 id="Analysis-3"><a href="#Analysis-3" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li><a href="https://leetcode.com/problems/add-digits/discuss/68580/Accepted-C%2B%2B-O(1)-time-O(1)-space-1-Line-Solution-with-Detail-Explanations" target="_blank" rel="noopener">Add Digits | LeetCode Discussion</a></li>
<li><a href="https://en.wikipedia.org/wiki/Digital_root" target="_blank" rel="noopener">Digit Root | Wikipedia</a></li>
</ul>
<blockquote>
<p>将一正整数的各个位数相加(即横向相加)后，若加完后的值大于等于10的话，则继续将各位数进行横向相加直到其值小于十为止所得到的数，即为数根 (<code>Digit Root</code>)</p>
</blockquote>
<p>本题目为求解一个非负整数的数根。参考 <a href="https://en.wikipedia.org/wiki/Digital_root" target="_blank" rel="noopener">Digit Root | Wikipedia</a> 可以了解数根的公式求解方法。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/leetcode-258-add-digits.png" alt=""></p>
<p>从上图总结规律，对于一个 <code>b</code> 进制的数字 (此处针对十进制数，<code>b</code>=10)，其 数字根 （<code>digit root</code>） 可以表达为</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">dr(n) = <span class="number">0</span> <span class="keyword">if</span> n == <span class="number">0</span>    </span><br><span class="line"></span><br><span class="line">dr(n) = (b-<span class="number">1</span>) <span class="keyword">if</span> n != <span class="number">0</span> <span class="keyword">and</span> n % (b-<span class="number">1</span>) == <span class="number">0</span>  // <span class="number">9</span>的倍数且不为零，数根为<span class="number">9</span></span><br><span class="line"></span><br><span class="line">dr(n) = n mod (b-<span class="number">1</span>) <span class="keyword">if</span> n % (b-<span class="number">1</span>) != <span class="number">0</span>  // 不是<span class="number">9</span>的倍数且不为零，数根为对<span class="number">9</span>取模</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">dr(n) = <span class="number">1</span> + (n - <span class="number">1</span>) % <span class="number">9</span></span><br></pre></td></tr></table></figure>





<h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + (num - <span class="number">1</span>) % <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>JavaScript</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; num</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addDigits = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + (num - <span class="number">1</span>) % <span class="number">9</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addDigits</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">9</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> num % <span class="number">9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Python</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addDigits</span><span class="params">(self, num: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type num:int</span></span><br><span class="line"><span class="string">        :rtype :int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> num%<span class="number">9</span> == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">9</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="keyword">return</span> num%<span class="number">9</span></span><br></pre></td></tr></table></figure>




<h2 id="461-Hamming-Distance（汉明距离）"><a href="#461-Hamming-Distance（汉明距离）" class="headerlink" title="461. Hamming Distance（汉明距离）"></a>461. Hamming Distance（汉明距离）</h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode.com/problems/hamming-distance/" target="_blank" rel="noopener">LeetCode-461. Hamming Distance（汉明距离）</a></li>
</ul>
<h3 id="Approach-1-异或位运算"><a href="#Approach-1-异或位运算" class="headerlink" title="Approach 1-异或位运算"></a>Approach 1-异或位运算</h3><p>对输入参数进行异或位运算得到一个二进制数值，再计算其中的数字 <code>1</code> 的个数即可。</p>
<p>在代码实现中，可以结合语言内置的API或方法，简化求解过程。</p>
<h4 id="Analysis-4"><a href="#Analysis-4" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>JavaScript</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; x</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; y</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hammingDistance = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> xor = x^y;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;   <span class="comment">// Number型 占32位</span></span><br><span class="line">        total += (xor&gt;&gt;i) &amp;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>由于 <code>Number</code> 型占 32 位，因此，需要异或的结果进行32次移位，循环判断其中的数字 <code>1</code> 的个数。</p>
<p>下面考虑简化上述求解过程。</p>
<ol>
<li><a href="https://www.w3schools.com/jsref/jsref_tostring_number.asp" target="_blank" rel="noopener">number.toString(radix)</a> 方法可以将一个数字以 <code>radix</code> 进制格式转换为字符串。可以将异或结果转换为 2 进制字符串。</li>
<li>对上述 2 进制字符串，使用正则表达式，只保留其中 <code>1</code>，将 <code>0</code> 替换为空。</li>
<li>最后，计算所得字符串的长度，即所求结果。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; x</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; y</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hammingDistance = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> (x ^ y).toString(<span class="number">2</span>).replace(<span class="regexp">/0/g</span>, <span class="string">''</span>).length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<ul>
<li>Java</li>
</ul>
<p>Java中，<a href="https://www.tutorialspoint.com/java/lang/integer_bitcount.htm" target="_blank" rel="noopener">Integer.bitCount()</a>  函数可以返回输入参数对应二进制格式数值中数字 <code>1</code> 的个数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.bitCount(x^y);  <span class="comment">//XOR</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<ul>
<li>C++</li>
</ul>
<p>C++ 中, <a href="http://www.xuebuyuan.com/828691.html" target="_blank" rel="noopener">int __builtin_popcount</a> 函数可以返回输入参数对应二进制格式数值中数字 <code>1</code> 的个数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> __builtin_popcount(x^y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>




<h2 id="463-Island-Perimeter（岛屿的周长）"><a href="#463-Island-Perimeter（岛屿的周长）" class="headerlink" title="463. Island Perimeter（岛屿的周长）"></a>463. Island Perimeter（岛屿的周长）</h2><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><ul>
<li><a href="https://leetcode.com/problems/island-perimeter/?tab=Description" target="_blank" rel="noopener">LeetCode - 463. Island Perimeter（岛屿的周长） </a></li>
</ul>
<h3 id="Approach-1"><a href="#Approach-1" class="headerlink" title="Approach 1"></a>Approach 1</h3><h4 id="Analysis-5"><a href="#Analysis-5" class="headerlink" title="Analysis"></a>Analysis</h4><ul>
<li>遍历矩阵，找出 岛屿 <code>islands</code> 个数。若不考虑岛屿的周围，则对应的周长为 <code>4 * islands</code></li>
<li>对于岛屿，考虑其是否有左侧和顶部的邻居岛屿 <code>neighbours</code>。为了简化求解，对于所有岛屿，只考虑其左侧和顶部的邻居情况。</li>
<li>综上，最终所求的周长为 <code>4 * islands - 2 * neighbours</code></li>
</ul>
<h4 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h4><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> islands = <span class="number">0</span>, neighbours = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    islands++; <span class="comment">// count islands</span></span><br><span class="line">                    <span class="keyword">if</span> (i !=<span class="number">0</span> &amp;&amp; grid[i - <span class="number">1</span>][j] == <span class="number">1</span>) neighbours++; <span class="comment">// count top neighbours</span></span><br><span class="line">                    <span class="keyword">if</span> (j !=<span class="number">0</span> &amp;&amp; grid[i][j - <span class="number">1</span>] == <span class="number">1</span>) neighbours++; <span class="comment">// count left neighbours</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> islands * <span class="number">4</span> - neighbours * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>C++</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">islandPerimeter</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> count = <span class="number">0</span>, repeat = <span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;grid.size(); i++)</span><br><span class="line">    	&#123;</span><br><span class="line">    		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;grid[i].size(); j++)</span><br><span class="line">    		&#123;</span><br><span class="line">    			<span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>)</span><br><span class="line">    			&#123;</span><br><span class="line">    				count++;</span><br><span class="line">    				<span class="keyword">if</span> (i!= <span class="number">0</span> &amp;&amp; grid[i<span class="number">-1</span>][j] == <span class="number">1</span>) repeat++;</span><br><span class="line">    				<span class="keyword">if</span> (j!= <span class="number">0</span> &amp;&amp; grid[i][j - <span class="number">1</span>] == <span class="number">1</span>) repeat++;</span><br><span class="line">    			&#125;</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> <span class="number">4</span> * count - repeat * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>JavaScript</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; grid</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> islandPerimeter = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> repeat=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;grid.length;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;grid[i].length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j] === <span class="number">1</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span>((i!==<span class="number">0</span>) &amp;&amp; (grid[i<span class="number">-1</span>][j]===<span class="number">1</span>))&#123;</span><br><span class="line">                    repeat++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>((j!==<span class="number">0</span>) &amp;&amp; (grid[i][j<span class="number">-1</span>]===<span class="number">1</span>))&#123;</span><br><span class="line">                    repeat++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>*count<span class="number">-2</span>*repeat;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 进阶使用</title>
    <url>/2020/02/01/git-usage-improve/</url>
    <content><![CDATA[<ul>
<li>总结日常开发中的 Git 进阶使用</li>
<li>记录多 <code>SSH</code> 配置，<code>git reflog</code> 解决 <code>detached-head</code> 代码丢失问题</li>
<li>总结团队协作下，如何保持 git 提交信息简洁</li>
</ul>
<a id="more"></a>

<h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><ul>
<li>2018/07/09，撰写</li>
<li>2019/03/10，添加多SSH配置</li>
<li>2019/04/26，添加 <code>git cherry-pick</code></li>
<li>2019/10/07，添加如何删除git所有历史提交信息</li>
<li>2019/10/14，添加 <code>git merge --no-ff</code></li>
<li>2019/12/14，添加 <code>git reflog</code> 使用</li>
<li>2020/02/01，添加 <em>删除所有历史提交记录</em></li>
<li>2020/02/01，添加 <em>团队协作下，如何保持 git 提交信息简洁</em></li>
</ul>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><ul>
<li><a href="http://gitup.co/" target="_blank" rel="noopener">GitUp</a></li>
<li><a href="https://www.zhihu.com/question/20070065/answer/480261314" target="_blank" rel="noopener">如何高效使用github</a></li>
</ul>
<h2 id="git-reflog-解决提交代码丢失-detached-head"><a href="#git-reflog-解决提交代码丢失-detached-head" class="headerlink" title="git reflog 解决提交代码丢失 detached-head"></a>git reflog 解决提交代码丢失 <code>detached-head</code></h2><p><code>reflog</code> 是 Git 操作的一道安全保障，它能够记录几乎所有本地仓库的改变。包括所有分支 commit 提交，已经删除（其实并未被实际删除）commit 都会被记录。总结而言，只要 HEAD 发生变化，就可以通过 <code>reflog</code> 查看到。</p>
<h3 id="detached-head-代码丢失找回"><a href="#detached-head-代码丢失找回" class="headerlink" title="detached-head 代码丢失找回"></a><code>detached-head</code> 代码丢失找回</h3><ul>
<li><a href="https://www.jianshu.com/p/f247a27851fb" target="_blank" rel="noopener">git提交到HEAD detached导致代码丢失</a></li>
<li><a href="https://stackoverflow.com/questions/4845505/gitx-how-do-i-get-my-detached-head-commits-back-into-master" target="_blank" rel="noopener">StackOverflow - gitx How do I get my ‘Detached HEAD’ commits back into master</a></li>
</ul>
<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>日常开发中，切换分支误操作，造成本地代码修改丢失。</p>
<p>此时，可以借助 <code>git reflog</code> 找回丢失的代码修改。</p>
<h4 id="丢失产生原因和步骤"><a href="#丢失产生原因和步骤" class="headerlink" title="丢失产生原因和步骤"></a>丢失产生原因和步骤</h4><p>首先在 <code>master</code> 分支上开发，此时线上出现 bug 且回到旧版本的 tag。这时 <code>master</code> 分支上有一部分代码修改但未提交。</p>
<p>在 <code>master</code> 分支上执行 <code>git status</code>，有未提交的代码，如下图所示</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-reflog-1.png" alt=""></p>
<p>在 <code>master</code> 分支上执行 <code>git tag</code>查看标签信息，如下图所示</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-reflog-2.png" alt=""></p>
<p>此时有未提交的代码，然后执行 <code>git checkout v1.0</code></p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-reflog-3.png" alt=""></p>
<p>这个时候，<strong>提示当前分支为 <code>detached HEAD</code></strong></p>
<p>然后再执行 <code>git add ./git commit</code> 和 <code>git checkout master</code>，切换回 <code>master</code> 分支。<strong>这个时候发现 <code>detached HEAD</code> 分支不见了，<code>master</code> 分支上未提交的代码也不见了。</strong></p>
<h4 id="代码找回"><a href="#代码找回" class="headerlink" title="代码找回"></a>代码找回</h4><p>执行 <code>git reflog</code> 查看提交记录</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-reflog-4.png" alt=""></p>
<p>查找对应提交的 <code>commitId</code> 为 <code>247e11b</code>，然后执行下述命令行，找回丢失的代码</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git checkout <span class="number">247</span>e11b    <span class="comment">//检出对应的提交</span></span><br><span class="line">git checkout -<span class="selector-tag">b</span> diff    <span class="comment">//新建一个新的diff分支</span></span><br><span class="line">git checkout master     <span class="comment">//切换到master分支</span></span><br><span class="line">git merge diff          <span class="comment">//将新建的diff分支合并到master分支</span></span><br></pre></td></tr></table></figure>


<h2 id="删除所有历史提交记录"><a href="#删除所有历史提交记录" class="headerlink" title="删除所有历史提交记录"></a>删除所有历史提交记录</h2><ul>
<li><a href="https://stackoverflow.com/questions/13716658/how-to-delete-all-commit-history-in-github" target="_blank" rel="noopener">How to delete all commit history in github | Stackoverflow</a></li>
</ul>
<p>此处介绍如何删除所有历史提交记录，形成一个全新的仓库。</p>
<ul>
<li>1 - Checkout</li>
</ul>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">git checkout <span class="comment">--orphan new_branch</span></span><br></pre></td></tr></table></figure>

<ul>
<li>2 - Add all the files</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> -A</span></span><br><span class="line"></span><br><span class="line">//等效于 git <span class="keyword">add</span><span class="bash"> --all 或 git add .</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p> <code>git add</code> 中使用参数 <code>-A</code> 或 <code>--all</code> 表示追踪所有操作，包含新增、修改和删除</p>
<p> Git 2.0版开始，<code>-A</code> 参数为默认参数，即 <code>git add .</code> 等效于 <code>git add -A</code> 或 <code>git add --all</code></p>
</blockquote>
<ul>
<li>3 - Commit the changes</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -am <span class="string">"commit message"</span></span><br></pre></td></tr></table></figure>


<ul>
<li>4 - Delete the branch</li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git branch -D <span class="keyword">master</span>   <span class="title">//同时删除本地和远程分支</span></span><br></pre></td></tr></table></figure>

<ul>
<li>5 - Rename the current branch to master</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-m master</span><br></pre></td></tr></table></figure>

<ul>
<li>6 - force update your repository</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> -f <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>


<p>下面对上述步骤进行说明</p>
<h3 id="git-checkout-–orphan"><a href="#git-checkout-–orphan" class="headerlink" title="git checkout –orphan"></a>git checkout –orphan</h3><p>如果你的某个分支上积累了无数次的无意义的提交，<code>git log</code> 信息满天飞，那么可以使用 <code>git checkout --orphan &lt;new_branch_name&gt;</code> </p>
<ul>
<li>基于当前分支创建一个新的“孤儿(<code>orphan</code>)”的分支，没有任何提交历史，但包含当前分支所有内容</li>
<li>执行上述命令后，工作区（<code>Workspace</code>）中所有文件均被认为在该操作中新增(<code>git statue</code> 查看状态，所有文件状态均为 <code>new file</code>，如下图所示)，此时执行 <code>git add .</code> 会把所有文件添加到缓存区（<code>Index</code>）</li>
</ul>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-checkout-orphan-1.png" alt=""></p>
<ul>
<li>严格意义上说，执行 <code>git checkout --orphan &lt;new_branch_name&gt;</code> 后，创建的并不是一个分支，因为此时 <code>HEAD</code> 指向的引用中没有 <code>commit</code> 值。只有在进行一次提交后，它才算得上真正的分支。</li>
</ul>
<blockquote>
<p><code>orphan</code> 译为“孤儿”，该参数表示创建一个孤立的分支，没有任何提交历史，且与当前分支不存在任何关系（查看提交信息，可发现其为一个孤立的点，如下图所示）</p>
<p>孤儿（<code>orphan</code>）无父辈信息，同理，创建的分支也不包含任何历史提交信息</p>
</blockquote>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-delete-all-info-1.png" alt=""></p>
<h3 id="git-commit-am"><a href="#git-commit-am" class="headerlink" title="git commit -am"></a>git commit -am</h3><ul>
<li><a href="https://segmentfault.com/q/1010000005900988" target="_blank" rel="noopener">git commit -m 与 git commit -am 的区别</a></li>
</ul>
<h3 id="git-branch-m"><a href="#git-branch-m" class="headerlink" title="git branch -m"></a>git branch -m</h3><p>重命名</p>
<h3 id="git-push-f-origin-master"><a href="#git-push-f-origin-master" class="headerlink" title="git push -f origin master"></a>git push -f origin master</h3><h2 id="git项目协作——保证git信息简洁"><a href="#git项目协作——保证git信息简洁" class="headerlink" title="git项目协作——保证git信息简洁"></a>git项目协作——保证git信息简洁</h2><h3 id="同一分支-git-pull-使用-rebase"><a href="#同一分支-git-pull-使用-rebase" class="headerlink" title="同一分支 git pull 使用 rebase"></a>同一分支 git pull 使用 rebase</h3><p>默认情况下，<code>git pull</code> 使用的是 <code>merge</code> 行为。多人协作开发时，会产生不必要的 <code>merge</code> 提交记录，造成提交链混乱不堪。</p>
<p>推荐在同一个分支更新代码时，使用 <code>git pull --rebase</code>。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为某个分支单独设置，这里是设置 dev 分支</span></span><br><span class="line">git<span class="built_in"> config </span>branch.dev.rebase <span class="literal">true</span></span><br><span class="line"><span class="comment"># 全局设置，所有的分支 git pull 均使用 --rebase</span></span><br><span class="line">git<span class="built_in"> config </span>--global pull.rebase <span class="literal">true</span></span><br><span class="line">git<span class="built_in"> config </span>--global branch.autoSetupRebase always</span><br></pre></td></tr></table></figure>
<h3 id="分支合并使用-merge-–no-ff"><a href="#分支合并使用-merge-–no-ff" class="headerlink" title="分支合并使用 merge –no-ff"></a>分支合并使用 merge –no-ff</h3><h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><ul>
<li><code>Fast-Forward</code>：当前分支合并到另一分支时，如果没有冲突要解决，就会直接移动文件指针，并且不会产生合并提交记录。该过程中，存在<code>git</code> 文件指针快速移动， 因此该过程称为 <code>Fast-Forward</code>。</li>
<li><code>--no-ff</code>(<code>no fast foward</code>)：每一次的合并，都会创建一个新的 <code>commit</code> 记录。使用 <code>--no-ff</code>，可以保持原有分支提交链的完整性，并且当该分支被删除时，提交信息依旧存在。</li>
</ul>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-merge--no--ff-1.png" alt="git-merge--no-ff-1"></p>
<p>结合上图分析，在 <code>dev</code>（绿色） 分支上检出 <code>feature-1</code> 分支（蓝色），且 <code>dev</code> 分支不进行任何提交</p>
<ul>
<li>直接 <code>merge</code>，默认采用 <code>Fast-Forward</code>，两个分支的提交链会合并为一条直线，不利于后期代码审查和维护</li>
<li>使用 <code>git merge --no-ff feature-1</code> 合并代码，会产生一个新的提交，且两个分支的提交链不会重叠，利于后期代码审查和维护</li>
</ul>
<h4 id="merge-默认设置"><a href="#merge-默认设置" class="headerlink" title="merge 默认设置"></a>merge 默认设置</h4><p><code>git merge</code> 默认使用 <code>fast-forward</code>，可以通过如下方式，修改为默认使用 <code>--no-ff</code>。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global merge.commit <span class="literal">no</span></span><br><span class="line">git<span class="built_in"> config </span>--global merge.ff <span class="literal">no</span></span><br></pre></td></tr></table></figure>

<p>此外，SourceTree 在设置中也可以设置 <code>--no-ff</code>。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-merge--no-ff-2.png" alt="git-merge--no-ff-2"></p>
<h2 id="IDE中使用Git"><a href="#IDE中使用Git" class="headerlink" title="IDE中使用Git"></a>IDE中使用Git</h2><h3 id="VSCode中使用Git"><a href="#VSCode中使用Git" class="headerlink" title="VSCode中使用Git"></a>VSCode中使用Git</h3><ul>
<li><a href="https://juejin.im/post/5b00474951882542ba08087a" target="_blank" rel="noopener">VSCode 中使用Git实践</a></li>
<li>推荐安装 <code>Git Lens</code> 和 <code>Git History</code> 插件</li>
<li>克隆代码<ul>
<li><code>Ctrl + Shift + P</code> 打开命令面板，输入 <code>Git</code>，选择 <code>Git Clone</code> 进行克隆代码</li>
</ul>
</li>
<li>查看修改（VSCode会使用不同颜色进行标识）<ul>
<li>红色箭头 - 标识删除行</li>
<li>蓝色竖线 - 该处有修改</li>
<li>绿色箭头 - 该处为新增</li>
</ul>
</li>
</ul>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-vscode-usage-1.png?q-sign-algorithm=sha1&q-ak=AKIDnYCjAUImfNuHSSn8nHaihXEkvukPOAGM&q-sign-time=1570451528;1570453328&q-key-time=1570451528;1570453328&q-header-list=&q-url-param-list=&q-signature=b0ec61fae96fb0c37059f2afedbac8e2ad1b2753" alt=""></p>
<ul>
<li>提交代码<ul>
<li><code>Ctrl + Shift + G</code> 打开代码管理器进行操作</li>
</ul>
</li>
</ul>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-vscode-usage-2.png?q-sign-algorithm=sha1&q-ak=AKIDnYCjAUImfNuHSSn8nHaihXEkvukPOAGM&q-sign-time=1570453094;1570454894&q-key-time=1570453094;1570454894&q-header-list=&q-url-param-list=&q-signature=63ea253d235cba5fc2d3d5c525e5242d11bba407" alt=""></p>
<h2 id="git-clone-设置缓存区"><a href="#git-clone-设置缓存区" class="headerlink" title="git clone 设置缓存区"></a>git clone 设置缓存区</h2><p>当工程较大时，使用 <code>git clone</code> 拉取代码，可能会出现 <code>early EOF</code> 的报错或者拉取代码失败。</p>
<p>这是因为 <code>git clone</code> 本质上是建立一个 HTTP 连接，工程较大时会超过默认设置的缓存大小。</p>
<p>使用 <code>git config --list</code> 查看 <code>http.postbuffer</code> 的大小，确认是否小于下载的工程大小。</p>
<p>使用 <code>git config --global http.postbuffer 524288000 //500x1024x1024 设置为500M</code> 可以对缓存区大小进行设置。 </p>
<h2 id="git-clean"><a href="#git-clean" class="headerlink" title="git clean"></a>git clean</h2><ul>
<li><code>git clean -n</code> -  查看哪些文件将被 <code>git clean</code> 清除，只是查看，并不会真正执行清除操作</li>
<li><code>git clean -f</code>  - 删除未跟踪的文件 <code>untracked files</code> </li>
<li><code>git clean -fd</code> - 连同未跟踪的目录也一起删除  </li>
<li><code>git clean -fdx</code> - 删除未跟踪的文件和文件目录，并移除被忽略的文件。其中，<code>-x</code> 表示移除被忽略的文件并且 <code>.gitignore</code> 文件中指定的文件和文件夹也会清除或者清除更改</li>
</ul>
<h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><ul>
<li><code>git tag</code>： 显示所有标签</li>
<li><code>git tag -l &#39;v1.0.*&#39;</code>： 用通配符查看符合筛选条件的标签</li>
<li><code>git show xxx</code>： 查看标签信息（提交者，邮箱等）</li>
<li><code>git tag xxx</code>： 创建轻量标签</li>
<li><code>git tag -a xxx</code>： 创建含有附注的标签</li>
<li><code>git tag -a xxx -m &#39;xxxx&#39;</code>： 创建含有附注的标签，并附加提交信息（默认标签打到当前Head提交状态）</li>
<li><code>git tag -a xxx -m &#39;xxxx&#39; \&lt;commitID&gt;</code>： 创建补丁标签，即对之前的提交添加标签</li>
<li><code>git tag -d xxx</code>： 删除本地标签</li>
<li><code>git push origin --delete tag &lt;tagname&gt;</code>： 删除远程标签</li>
</ul>
<p>需要注意的是，<br>Git 使用的标签有 2 种类型：轻量级的（<code>lightweight</code>）和含附注的（<code>annotated</code>）。 —— <a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE" target="_blank" rel="noopener">git tag | Doc</a></p>
<ul>
<li>轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。</li>
<li>含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 <code>GNU Privacy Guard</code> (<code>GPG</code>) 来签署或验证。</li>
</ul>
<p><strong>一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。</strong></p>
<h2 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h2><ul>
<li><a href="https://juejin.im/post/5925a2d9a22b9d0058b0fd9b" target="_blank" rel="noopener">Cherry-Pick | 掘金</a></li>
</ul>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p><code>cherry</code> 译为樱桃，<code>pick</code> 译挑选。<code>git cherry-pick</code> 即选择某一个分支中的一个或几个提交，合并到其他分支中（选择的提交即所需的樱桃），主要使用场景为</p>
<ul>
<li>情况1： 把弄错分支的提交移动到正确的分支上</li>
<li>情况2： 将其他分支的提交添加到当前分支</li>
</ul>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>假设工程有个稳定版分支 <code>v2.0</code>，还有个开发版分支 <code>v3.0</code>。开发分支还未彻底完成，不能直接把两个分支合并，这样会导致稳定版本混乱，但是又想增加一个 <code>v3.0</code> 中的功能到 <code>v2.0</code> 中，这里就可以使用 <code>cherry-pick</code> 了。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先在v3.0中查看要合并的commit的commit id</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="comment">// 假设是 commit f79b0b1ffe445cab6e531260743fa4e08fb4048b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 切到v2.0中</span></span><br><span class="line">git checkout v2.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并commit</span></span><br><span class="line">git cherry-pick f79b0b1ffe445cab6e531260743fa4e08fb4048b     </span><br><span class="line">git cherry-pick -x f79b0b1ffe445cab6e531260743fa4e08fb4048b   <span class="comment">//表示保留原提交的作者信息进行提交</span></span><br></pre></td></tr></table></figure>

<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul>
<li><code>git cherry_pick commitID</code>：将其他分支的 <code>commitID</code> 提交合并到当前分支</li>
<li><code>git cherry_pick commitID</code>：将其他分支的 <code>commitID</code> 提交合并到当前分支，<code>-x</code> 表示保留原提交的作者信息进行提交</li>
<li><code>git cherry_pick &lt;start-commit-id&gt;…&lt;end-commit-id&gt;</code>: 该功能在Git 1.7.2 版本后才支持，将一个连续区间范围的提交，合并到到当前分支。提交范围区间左开右闭，即<code>(start, end]</code></li>
<li><code>git cherry_pick &lt;start-commit-id&gt;^ … &lt;end-commit-id&gt;</code>: 同上，使用 <code>^</code> 表示包含 <code>start-commit-id</code>，即<code>[start, end]</code></li>
</ul>
<blockquote>
<p>JetBranins 系列IDE，内置了git cherry-pick 快捷键（樱桃图标）</p>
</blockquote>
<h2 id="git命令行代理设置"><a href="#git命令行代理设置" class="headerlink" title="git命令行代理设置"></a>git命令行代理设置</h2><h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git config --global http<span class="selector-class">.proxy</span> <span class="string">'socks5://127.0.0.1:1086'</span></span><br><span class="line">git config --global https<span class="selector-class">.proxy</span> <span class="string">'socks5://127.0.0.1:1086'</span></span><br></pre></td></tr></table></figure>

<h3 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global --unset http.proxy</span><br><span class="line">git<span class="built_in"> config </span>--global --unset https.proxy</span><br></pre></td></tr></table></figure>


<h2 id="GitUp"><a href="#GitUp" class="headerlink" title="GitUp"></a>GitUp</h2><blockquote>
<p>Work quickly, safely, and without headaches.<br>The Git interface you’ve been missing<br>all your life has finally arrived.</p>
</blockquote>
<ul>
<li><a href="http://gitup.co/" target="_blank" rel="noopener">GitUp</a></li>
<li><a href="http://qinghua.github.io/gitup/" target="_blank" rel="noopener">Tutorial</a></li>
</ul>
<h2 id="GitG"><a href="#GitG" class="headerlink" title="GitG"></a>GitG</h2><ul>
<li><code>gitg</code>是一个git图形化界面。</li>
<li>安装</li>
</ul>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">brew install gitg   <span class="comment">//安装</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用</li>
</ul>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">gitg  <span class="comment">// 在目录终端下输入gitg即可</span></span><br></pre></td></tr></table></figure>

<h2 id="Git-代码回滚"><a href="#Git-代码回滚" class="headerlink" title="Git 代码回滚"></a>Git 代码回滚</h2><ul>
<li><a href="https://sunmengyuan.github.io/garden/2017/06/15/git-revert.html?page=2" target="_blank" rel="noopener">谈谈 Git 代码回滚</a></li>
</ul>
<h3 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h3><p>某项目，并行开发着n个需求。提测时，各需求的代码被合并到测试分支。不久之后，要求把部分需求代码从测试分支抽离出去。使用下图场景进行描述。并行开发3个需求，分别是<code>feature1</code>，<code>feature2</code>，<code>feature3</code>。测试分支为<code>master</code>。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-rollback-1.jpg" alt="git-rollback"></p>
<p><code>feature2</code>与<code>feature3</code>对同一文件进行修改，故意制造一个冲突。 </p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-rollback-2.jpg" alt="git-rollback"></p>
<p>提测时，各分支代码被合并到测试分支（<code>master</code>）。首先，<code>featuer1</code>分支被合并到测试分支。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-rollback-3.jpg" alt="git-rollback"></p>
<p>之后，<code>featuer2</code>分支也被合并到测试分支。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-rollback-4.jpg" alt="git-rollback"></p>
<p>最后，合并<code>feature3</code>至测试分支。合并时，产生了与<code>feature2</code>代码的冲突。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-rollback-5.jpg" alt="git-rollback"></p>
<p>解决冲突之后，继续将<code>feature3</code>合并至测试分支。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-rollback-6.jpg" alt="git-rollback"></p>
<p>在<code>feature3</code>提测后，在测试分支上继续修复几个bug。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-rollback-7.jpg" alt="git-rollback"></p>
<p>注意，此时<code>feature2</code>虽已提测但并未进入测试，此时的bug修复均是针对 <code>feature1</code>与<code>feature3</code>。</p>
<p>几天之后，收到通知，<code>feature2</code>的测试无法正常进行，需将代码从测试分支上抽出。</p>
<h3 id="代码回滚操作"><a href="#代码回滚操作" class="headerlink" title="代码回滚操作"></a>代码回滚操作</h3><h4 id="Step-1-切换分支"><a href="#Step-1-切换分支" class="headerlink" title="Step 1 切换分支"></a>Step 1 切换分支</h4><p>首先，切换到<code>featuer2</code>分支。以防万一，创建<code>feature2-copy</code>分支，对该分支进行备份。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">git checkout feature2   <span class="comment">//切换到feature2分支</span></span><br><span class="line"></span><br><span class="line">git checkout -b feature2-<span class="built_in">copy</span>   <span class="comment">//创建并切换到feature2-copy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第2行代码等同于</span></span><br><span class="line">git branch feature2-<span class="built_in">copy</span>  <span class="comment">//创建feature2-copy分支</span></span><br><span class="line">git checkout feature2-<span class="built_in">copy</span> <span class="comment">//切换到feature2-copy分支</span></span><br></pre></td></tr></table></figure>

<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-rollback-8.jpg" alt="git-rollback"></p>
<h4 id="Step-2-确定要回滚的提交记录"><a href="#Step-2-确定要回滚的提交记录" class="headerlink" title="Step 2 确定要回滚的提交记录"></a>Step 2 确定要回滚的提交记录</h4><p>使用<code>git log</code>查看<code>feature2-copy</code>分支的提交记录（输入<code>q</code>退出<code>git log</code>环境）。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-rollback-9.jpg" alt="git-rollback"></p>
<p>如图所示，需要回滚最新的3个提交。实际情况中，针对某需求的提交绝不止3个。若是将提交逐一<code>revert</code>，工作量是非常大的。需要考虑将<code>n</code>个<code>commit</code>合并为一个<code>commit</code>，最后一同<code>revert</code>。</p>
<h4 id="Step-3-git-rebase-合并提交"><a href="#Step-3-git-rebase-合并提交" class="headerlink" title="Step 3 git rebase 合并提交"></a>Step 3 git rebase 合并提交</h4><p>使用<code>git rebase -i</code>来合并<code>commit</code>，传入需要拼接回滚至的提交的<code>hashcode</code>。（此处，将所有回滚的提交合并到需要回滚的<code>commit</code>集合中第一个提交）</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">//hashcode为需要回滚的commit集合中第一个提交</span></span><br><span class="line">git rebase -<span class="selector-tag">i</span> e08ddaf558b9ad84422db5e4b620dcab97623fde</span><br></pre></td></tr></table></figure>

<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-rollback-10.jpg" alt="git-rollback"></p>
<p>将最近2次提交的<code>command</code>从<code>pick</code>改为<code>s</code>。</p>
<blockquote>
<p>在Vim中，</p>
<ol>
<li>输入<code>i</code>，进入<code>INSERT</code>模式。</li>
<li>输入<code>ESC</code>，进入命令行模式。</li>
<li>输入<code>:wq</code>，保存并退出VIM编辑器。</li>
</ol>
</blockquote>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-rollback-11.jpg" alt="git-rollback"></p>
<p>修改后，保存并退出，进入如下对话框。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-rollback-12.jpg" alt="git-rollback"></p>
<p>此时，对最初一次的提交的<code>commit message</code>进行修改。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-rollback-13.jpg" alt="git-rollback"></p>
<p>修改后保存并退出，使用<code>git log</code> 再次查看 <code>feature2-copy</code> 分支的信息。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-rollback-14.jpg" alt="git-rollback"></p>
<p>如上图所示，3次提交被成功合并。</p>
<h4 id="Step-4-git-revert-撤销提交"><a href="#Step-4-git-revert-撤销提交" class="headerlink" title="Step 4 git revert 撤销提交"></a>Step 4 git revert 撤销提交</h4><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">revert </span>e544464c3de69adef5ca7556001abebaf40b218b</span><br></pre></td></tr></table></figure>

<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-rollback-15.jpg" alt="git-rollback"></p>
<p>保存并退出，再次查看<code>feature2-copy</code>分支的提交记录。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-rollback-16.jpg" alt="git-rollback"></p>
<h4 id="Step-5-git-cherry-pick"><a href="#Step-5-git-cherry-pick" class="headerlink" title="Step 5 git cherry-pick"></a>Step 5 git cherry-pick</h4><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git checkout <span class="keyword">master</span>   <span class="title">//切换到测试分支</span></span><br><span class="line"><span class="title">git</span> cherry-pick b309f7944d2422d8fe647dca61bda518b192628f</span><br></pre></td></tr></table></figure>

<p>切换到测试分支，并执行 <code>git cherry-pick</code> 命令。至此，成功的将<code>feature2</code>分支从测试分支上抽离。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-rollback-17.jpg" alt="git-rollback"></p>
<h2 id="Git代码管理与团队协作"><a href="#Git代码管理与团队协作" class="headerlink" title="Git代码管理与团队协作"></a>Git代码管理与团队协作</h2><ul>
<li><a href="https://segmentfault.com/l/1500000015442316/play" target="_blank" rel="noopener">视频教程 | Segmentfault</a></li>
</ul>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-team-usage-3.png" alt="git-team-usage"></p>
<p>代码最终提交效果如上图所示。</p>
<ul>
<li>主分支为<code>master</code>，创建一个<code>develop</code>分支用于开发。</li>
<li>开发者<code>leo</code>和<code>jack</code>创建自己的分支<code>leo</code>和<code>jack</code>进行开发。开发完成后，将其合并到<code>develop</code>分支上。</li>
<li>项目进展到需要发布时，从<code>develop</code>分支创建<code>release</code>分支，用于测试。测试通过后，将<code>release</code>分支合并到<code>develop</code>分支和<code>master</code>分支上。</li>
</ul>
<h3 id="Demo目录和初始化"><a href="#Demo目录和初始化" class="headerlink" title="Demo目录和初始化"></a>Demo目录和初始化</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span>目录结构</span><br><span class="line">-- c4</span><br><span class="line"><span class="params">---</span>|<span class="params">---</span> origin   <span class="string">//</span>模拟远程仓库  git init <span class="params">--bare</span> 创建</span><br><span class="line"><span class="params">---</span>|<span class="params">---</span> leo    <span class="string">//</span>开发者1  设置user.name = 'leo'</span><br><span class="line"><span class="params">---</span>|<span class="params">---</span> jack    <span class="string">//</span>开发者2  设置user.name = 'jack'</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>git init --bare</code> 用于创建一个“裸仓库”——只含有 <code>.git</code> 目录，不含源文件。详情参考 <a href="https://segmentfault.com/q/1010000004683286" target="_blank" rel="noopener">Ref</a>。</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">mkdir</span> <span class="string">c4</span></span><br><span class="line"><span class="attr">cd</span> <span class="string">c4</span></span><br><span class="line"><span class="attr">mkdir</span> <span class="string">origin </span></span><br><span class="line"><span class="attr">cd</span> <span class="string">origin </span></span><br><span class="line"><span class="attr">git</span> <span class="string">init --bare   //创建一个裸仓库</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cd</span> <span class="string">..</span></span><br><span class="line"></span><br><span class="line"><span class="meta">//克隆远程仓库至两个开发者目录——leo,</span> <span class="string">jack</span></span><br><span class="line"><span class="attr">git</span> <span class="string">clone origin leo</span></span><br><span class="line"><span class="attr">git</span> <span class="string">clone origin jack</span></span><br></pre></td></tr></table></figure>

<p>为了模拟团队协作，对两个开发者目录，分别设置不同的 <code>user.name</code> 信息。</p>
<blockquote>
<p><code>git config --local</code>，使用 <code>--local</code> 参数，只对本地参数进行配置。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> leo</span><br><span class="line">git config --<span class="built_in">local</span> user.name <span class="string">'leo'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> jack</span><br><span class="line">git config --<span class="built_in">local</span> user.name <span class="string">'jack'</span></span><br></pre></td></tr></table></figure>

<h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><h4 id="master-分支初始化"><a href="#master-分支初始化" class="headerlink" title="master 分支初始化"></a>master 分支初始化</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">cd leo </span><br><span class="line">echo <span class="selector-tag">a</span> = <span class="number">1</span> &gt; leo1<span class="selector-class">.py</span>  <span class="comment">// 将a=1写入leo1.py文件</span></span><br><span class="line">cat leo1<span class="selector-class">.py</span>           <span class="comment">//显示文件的内容</span></span><br><span class="line"></span><br><span class="line">git add . </span><br><span class="line">git commit -m <span class="string">"c4 项目初始化"</span></span><br><span class="line"></span><br><span class="line">git tag <span class="number">0.0</span>.<span class="number">1</span>  <span class="comment">//添加标签 方便管理</span></span><br></pre></td></tr></table></figure>

<h4 id="创建develop分支"><a href="#创建develop分支" class="headerlink" title="创建develop分支"></a>创建develop分支</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git checkout -<span class="selector-tag">b</span> develop</span><br><span class="line"></span><br><span class="line">echo <span class="selector-tag">b</span> = <span class="number">2</span> &gt; leo1.py</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"建立开发分支并提交"</span></span><br><span class="line"></span><br><span class="line">git push origin develop  <span class="comment">//推送到远程分支</span></span><br><span class="line"></span><br><span class="line">gitg   <span class="comment">// 使用gitg图形化工具查看提交信息</span></span><br></pre></td></tr></table></figure>

<h4 id="leo进行开发"><a href="#leo进行开发" class="headerlink" title="leo进行开发"></a>leo进行开发</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git checkout -<span class="selector-tag">b</span> leo</span><br><span class="line">echo c=<span class="number">3</span> &gt; leo2.py</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"创建leo分支并开发"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//合并当前开发到dev分支</span></span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff leo  <span class="comment">//合并分支 并保留leo分支信息</span></span><br><span class="line"></span><br><span class="line">gitg  <span class="comment">//查看提交历史树  gui</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>git merge --no-ff leo</code>，合并分支，并保留<code>leo</code>分支的信息。关于参数<code>--no-ff</code>的详情，参考 <a href="https://segmentfault.com/q/1010000002477106" target="_blank" rel="noopener">Ref</a>。</p>
</blockquote>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-team-usage-1.png" alt="git-team-usage"></p>
<p>最后，将开发分支推送到远程。</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> develop</span><br><span class="line"></span><br><span class="line">gitg</span><br></pre></td></tr></table></figure>


<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-team-usage-2.png" alt="git-team-usage"></p>
<h4 id="jack进行开发"><a href="#jack进行开发" class="headerlink" title="jack进行开发"></a>jack进行开发</h4><p>首先，从远程拉取最新代码。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git pull origin</span></span><br></pre></td></tr></table></figure>

<p>之后，jack进行日常开发，流程同leo开发，此处不再赘述。</p>
<h4 id="release分支测试"><a href="#release分支测试" class="headerlink" title="release分支测试"></a>release分支测试</h4><p>项目进展到需发布时，从<code>develop</code>分支创建<code>release</code>分支，用于测试。测试通过后，将<code>release</code>分支合并到<code>develop</code>分支和<code>master</code>分支上。</p>
<h2 id="远程多分支代码拉取"><a href="#远程多分支代码拉取" class="headerlink" title="远程多分支代码拉取"></a>远程多分支代码拉取</h2><p>此处记录如何拉取远程所有分支，并建立本地分支追踪远程分支。</p>
<ul>
<li>Step 1： <code>clone</code> 远程代码</li>
<li>Step 2： 在sourcetree中可以看出，远程分支有<code>origin/master</code>，<code>origin/dev</code>和<code>origin/webtest</code>。此时本地分支为<code>dev</code>，并建立了追踪关系。</li>
</ul>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-pull-branches-1.png" alt="git pull branches"></p>
<ul>
<li>Step 3： 在对应的远程分支（<code>origin/master</code>）上点击，检出分支，设定本地分支名，并追踪远程分支即可。</li>
</ul>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-pull-branches-2.png" alt="git pull branches"></p>
<ul>
<li>Step 4： 最终效果如下图，检出本地分支并追踪远程。</li>
</ul>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/programming-2019/git-pull-branches-3.png" alt="git pull branches"></p>
<blockquote>
<p>Tip</p>
<p><code>git branch -r</code>： 查看远程分支</p>
<p><code>git branch -a</code>： 查看所有分支</p>
<p>Ref: <a href="https://gaohaoyang.github.io/2016/07/07/git-clone-not-master-branch/" target="_blank" rel="noopener">Blog</a></p>
</blockquote>
<h2 id="多SSH配置"><a href="#多SSH配置" class="headerlink" title="多SSH配置"></a>多SSH配置</h2><ol>
<li>取消全局账户和邮箱设置</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--unset --global user.name</span><br><span class="line">git<span class="built_in"> config </span>--unset --global user.email</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>新建SSH key：</li>
</ol>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"liubaoshuai1@jd.com"</span> </span><br><span class="line">Enter <span class="built_in">file</span> <span class="keyword">in</span> which <span class="built_in">to</span> save <span class="keyword">the</span> key (/User/lbs/.ssh/id_rsa): id_rsa_jd  <span class="comment"># 输入文件名</span></span><br></pre></td></tr></table></figure>



<ol start="3">
<li>新密钥添加到 SSH Agent</li>
</ol>
<p>默认只读取 <code>id_rsa</code>，为了让 SSH 识别新的私钥，需将其添加到 SSH Agent 中</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">ssh-<span class="keyword">add</span><span class="bash"> ~/.ssh/id_rsa_jd</span></span><br></pre></td></tr></table></figure>

<p>若出现 <code>Could not open a connection to your authentication agent</code> 错误，执行以下命令</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">ssh</span>-agent <span class="keyword">bash</span></span><br><span class="line"><span class="keyword">ssh-add </span>~/.ssh/id_rsa_jd</span><br></pre></td></tr></table></figure>


<ol start="4">
<li>修改 <code>config</code> 文件</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">vim<span class="built_in"> config </span>     # 若没有，可创建  touch config</span><br></pre></td></tr></table></figure>


<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"># <span class="selector-tag">default</span> <span class="selector-tag">user</span> (lbs1203940926<span class="variable">@163</span>.com)</span><br><span class="line"><span class="selector-tag">Host</span> <span class="selector-tag">github</span><span class="selector-class">.com</span></span><br><span class="line">   <span class="selector-tag">HostName</span> <span class="selector-tag">github</span><span class="selector-class">.com</span></span><br><span class="line">   <span class="selector-tag">User</span> <span class="selector-tag">lbs1203940926</span>@<span class="selector-tag">163</span><span class="selector-class">.com</span></span><br><span class="line">   <span class="selector-tag">PreferredAuthentications</span> <span class="selector-tag">publickey</span></span><br><span class="line">   <span class="selector-tag">IdentityFile</span> /<span class="selector-tag">Users</span>/<span class="selector-tag">lbs</span>/<span class="selector-class">.ssh</span>/<span class="selector-tag">id_rsa</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># <span class="selector-tag">jd-gitlab</span>(liubaoshuai1<span class="variable">@jd</span>.com))</span><br><span class="line"><span class="selector-tag">Host</span> <span class="selector-tag">git</span><span class="selector-class">.jd</span><span class="selector-class">.com</span></span><br><span class="line">   <span class="selector-tag">HostName</span> <span class="selector-tag">git</span><span class="selector-class">.jd</span><span class="selector-class">.comm</span></span><br><span class="line">   <span class="selector-tag">User</span> <span class="selector-tag">liubaoshuai1</span>@<span class="selector-tag">jd</span><span class="selector-class">.com</span></span><br><span class="line">   <span class="selector-tag">PreferredAuthentications</span> <span class="selector-tag">publickey</span></span><br><span class="line">   <span class="selector-tag">IdentityFile</span> /<span class="selector-tag">Users</span>/<span class="selector-tag">lbs</span>/<span class="selector-class">.ssh</span>/<span class="selector-tag">id_rs_jd</span></span><br></pre></td></tr></table></figure>


<ol start="5">
<li>拉取JD代码</li>
</ol>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 测试暂不支持SourceTree中远程拉取，需要终端命令行拉取</span></span><br><span class="line"><span class="meta"># 且暂只支持https协议</span></span><br><span class="line"></span><br><span class="line">git clone http:<span class="comment">//git.jd.com/jdreact/jdreact-jsbundle-jdreactonehourarrive</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># UserName: liubaoshuai</span></span><br><span class="line"><span class="meta"># PassWord: ERP's password</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Develop Tools</category>
      </categories>
      <tags>
        <tag>Develop Tools</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基础知识梳理</title>
    <url>/2020/01/31/redis-basic/</url>
    <content><![CDATA[<ul>
<li>对 Redis 基础知识进行梳理，包括Redis的5种数据类型，事务，过期时间，消息通知，优先级队列，管道，数据持久化，复制，哨兵，事务等</li>
</ul>
<a id="more"></a>

<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul>
<li>2020/01/30，撰写</li>
</ul>
<h2 id="学习资料汇总"><a href="#学习资料汇总" class="headerlink" title="学习资料汇总"></a>学习资料汇总</h2><ul>
<li><a href="https://redis.io/" target="_blank" rel="noopener">Redis官网</a></li>
<li><a href="http://www.redis.cn/" target="_blank" rel="noopener">Redis中文官网</a></li>
<li><a href="https://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="noopener">Redis菜鸟教程</a></li>
<li><a href="https://github.com/antirez/redis" target="_blank" rel="noopener">Redis源码</a> —— 使用C语言开发，源码只有3万多行，降低了用户通过修改Redis源码来提升性能的门槛</li>
</ul>
<h2 id="Redis-初识"><a href="#Redis-初识" class="headerlink" title="Redis 初识"></a>Redis 初识</h2><ul>
<li>Redis = Remote Dictionary Server，远程字典服务器</li>
<li>Redis 是一个 高性能的 <code>key-value</code> 存储系统，通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Hash), 列表(list), 集合(sets) 和有序集合(sorted sets)等类型。</li>
<li>Redis 与其他 <code>key - value</code> 缓存产品有以下3个特点<ol>
<li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用</li>
<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储</li>
<li>Redis支持数据的备份，即master-slave模式的数据备份</li>
</ol>
</li>
<li>Redis 性能极高，读取速度是110000次/s，写入的速度是81000次/s。Redis数据库中的所有数据都存储在内存中，内存读写速度远快于磁盘。</li>
<li>Redis功能丰富，除了用于数据库开发，还可以用于缓存，队列系统等。</li>
<li>Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li>
</ul>
<h2 id="Redis环境配置"><a href="#Redis环境配置" class="headerlink" title="Redis环境配置"></a>Redis环境配置</h2><h3 id="安装-Redis"><a href="#安装-Redis" class="headerlink" title="安装 Redis"></a>安装 Redis</h3><ul>
<li>Mac上，建议使用Homebrew安装Redis</li>
</ul>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">brew install redis    <span class="comment">//会默认安装当前最新的稳定版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 此处安装路径为 usr/local/Cellar/redis/5.0.7</span></span><br><span class="line"><span class="comment">//==&gt; Caveats</span></span><br><span class="line"><span class="comment">// To have launchd start redis now and restart at login:</span></span><br><span class="line"><span class="comment">//  brew services start redis</span></span><br><span class="line"><span class="comment">//Or, if you don't want/need a background service you can just run:</span></span><br><span class="line"><span class="comment">//  redis-server /usr/local/etc/redis.conf</span></span><br><span class="line"><span class="comment">//==&gt; Summary</span></span><br><span class="line"><span class="comment">//🍺  /usr/local/Cellar/redis/5.0.7: 13 files, 3.1MB</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果需要后台运行Redis服务，使用命令 <code>brew services start redis</code></li>
<li>如果不需要后台运行Redis服务，使用命令 <code>redis-server /usr/local/etc/redis.conf</code></li>
</ul>
<h3 id="启动-停止Redis"><a href="#启动-停止Redis" class="headerlink" title="启动/停止Redis"></a>启动/停止Redis</h3><p>执行 <code>brew services start redi</code> 命令，第一次启动 Redis 后，在 <code>/usr/local/bin</code> 目录下，会生成如下文件夹</p>
<table>
<thead>
<tr>
<th>文件名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>redis-server</td>
<td>redis 服务器</td>
</tr>
<tr>
<td>redis-cli</td>
<td>redis 命令行客户端</td>
</tr>
<tr>
<td>redis-benchmark</td>
<td>redis 性能测试工具</td>
</tr>
<tr>
<td>redis-check-aof</td>
<td>AOF 文件修复工具</td>
</tr>
<tr>
<td>redis-check-dump</td>
<td>RDB 文件检查工具</td>
</tr>
<tr>
<td>redis-sentinel</td>
<td>Sentinel 服务器</td>
</tr>
</tbody></table>
<ul>
<li>启动Redis</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">redis-<span class="keyword">server</span>   <span class="comment">//默认端口号 6379</span></span><br><span class="line"></span><br><span class="line">redis-<span class="keyword">server</span> --port <span class="number">6380</span>  <span class="comment">//指定端口号</span></span><br></pre></td></tr></table></figure>

<ul>
<li>停止Redis</li>
</ul>
<p>考虑到 Redis 有可能正在将内存中数据同步到硬盘中，强行终止Redis进程可能会导致数据丢失。因此，正确停止Redis的方式应该是向Redis发送 <code>SHUTDOWN</code> 命令，方法为</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">redis-cli <span class="built_in">SHUTDOWN</span></span><br></pre></td></tr></table></figure>

<p>当 Redis 收到 <code>SHUTDOWN</code>  命令后，会先断开所有客户端连接，然后根据配置执行数据持久化，最后完成退出。</p>
<p>Redis 可以妥善处理 <code>SIGTERM</code> 信号，所以使用 <code>kill</code> Redis 进程的 PID，也可以正常结束 Redis，效果和发送 <code>SHUTDOWN</code> 命令一样。</p>
<h3 id="redis-cli"><a href="#redis-cli" class="headerlink" title="redis-cli"></a>redis-cli</h3><p>Redis 命令用于在 Redis 服务上执行操作。要在 Redis 服务上执行命令需要一个 Redis 客户端。</p>
<p><code>redis-cli</code> 是Redis自带的基于命令行的Redis客户端，下面介绍如果通过 <code>redis-cli</code> 向 Redis 发送命令。</p>
<p>通过 <code>redis-cli</code> 向 Redis 发送命令有2种方式</p>
<ul>
<li>方式1：将命令作为 <code>redis-cli</code> 的参数执行。例如 <code>redis-cli SHUTDOWN</code></li>
<li>方式2：执行 <code>redis-cli</code>（不附带任何参数），进入交互模式后，可以自由输入命令</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式1：将命令作为 redis-cli 的参数执行</span></span><br><span class="line"></span><br><span class="line">redis-cli SHUTDOWN</span><br><span class="line"></span><br><span class="line"><span class="comment">//redis默认服务器地址127.0.0.1，默认端口号6379 </span></span><br><span class="line"><span class="comment">//也可以使用-h指定服务器地址，-p指定端口号</span></span><br><span class="line">redis-cli -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">6379</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">//使用PING命令测试客户端和Redis的连接是否正常</span></span><br><span class="line">redis-cli PING  <span class="comment">//返回PONG 表示连接正常</span></span><br></pre></td></tr></table></figure>


<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式2: 执行 redis-cli（不附带任何参数），进入交互模式后，可以自由输入命令</span></span><br><span class="line">lbsMacBook-Pro:~ lbs$ redis-cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; PING</span><br><span class="line">PONG</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br></pre></td></tr></table></figure>



<h3 id="多数据库"><a href="#多数据库" class="headerlink" title="多数据库"></a>多数据库</h3><p>Redis 是一个字典结构的存储服务器，<strong>一个 Redis 实例</strong>提供了多个用来存储的字典，可以把其中的每个字典都理解成一个独立的数据库。</p>
<ul>
<li>每个数据库对外都是一个从0开始的递增数字命名，Redis默认支持16个数据库</li>
<li>Redis不支持自定义数据库名称，每个数据库都以编号命名</li>
<li>需要注意的是，一个Redis实例的多个数据库之间并不是完全隔离的，比如 <code>FLUSHALL</code> 命令可以清空一个 Redis 实例中所有数据库中的数据。综上所述，这些数据库更像是一种命名空间，而不适宜存储不同应用程序的数据。比如，可以使用0号数据库存储应用A的生产环境数据，使用1号数据库存储应用A的测试环境数据，而不应该使用1号数据库存储应用B的数据。</li>
<li><strong>不同的应用，应该使用不同的Redis实例存储数据。</strong> 由于Redis非常轻量，一个空的Redis实例占用的内存只有1MB，所以不用担心多个Redis实例会额外占用很多内存。</li>
</ul>
<h2 id="Redis-入门"><a href="#Redis-入门" class="headerlink" title="Redis 入门"></a>Redis 入门</h2><h3 id="命令行基础"><a href="#命令行基础" class="headerlink" title="命令行基础"></a>命令行基础</h3><ol>
<li>获得符合规则的键名列表</li>
</ol>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">KEYS <span class="built_in">pattern</span></span><br></pre></td></tr></table></figure>

<p><code>pattern</code> 支持 <code>glob</code> 风格通配符格式，具体如下</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>?</td>
<td>匹配一个字符</td>
</tr>
<tr>
<td>*</td>
<td>匹配任意个（包括0个）字符</td>
</tr>
<tr>
<td>[]</td>
<td>匹配括号间的任一字符，可以使用 <code>-</code> 表示一个范围，如 <code>[1-9]</code></td>
</tr>
<tr>
<td>\x</td>
<td>用于转义字符</td>
</tr>
</tbody></table>
<p>例如，查询当前的所有键名列表</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">&gt; <span class="keyword">set</span> bar <span class="comment">1</span></span><br><span class="line">OK</span><br><span class="line">&gt; KEYS <span class="comment">*</span></span><br><span class="line">1) <span class="string">"bar"</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>判断一个键是否存在</li>
</ol>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">EXISTS <span class="built_in">key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回(integer) 1，表示存在</span></span><br><span class="line"><span class="comment">//返回(integer) 0，表示不存在</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>删除键</li>
</ol>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">DEL <span class="built_in">key</span> [<span class="built_in">key</span> ...]</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回(integer) 1，表示删除成功</span></span><br><span class="line"><span class="comment">//返回(integer) 0，表示删除不成功</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>获得键值的数据类型</li>
</ol>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">TYPE</span> <span class="built_in">key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回 string list 等</span></span><br></pre></td></tr></table></figure>



<h3 id="Redis-5-种数据类型"><a href="#Redis-5-种数据类型" class="headerlink" title="Redis 5 种数据类型"></a>Redis 5 种数据类型</h3><p>Redis 支持5种数据类型</p>
<ul>
<li>string（字符串）</li>
<li>hash（哈希或散列）</li>
<li>list（列表）</li>
<li>set（集合）</li>
<li>zset(sorted set，有序集合)</li>
</ul>
<h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><ol>
<li>赋值和取值</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">key</span> <span class="keyword">value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">GET</span> <span class="keyword">key</span>   //当键不存在时会返回空结果</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>递增数字</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">INCR key</span></span><br></pre></td></tr></table></figure>

<p>当要操作的键不存在时，默认键值为0，所以第一次递增后结果为1，如下所示</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt; INCR  num</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line">&gt; INCR  num</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">2</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>增加指定的整数</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">INCRBY key increment</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>减少指定的整数</li>
</ol>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">DECR <span class="built_in">key</span></span><br><span class="line"></span><br><span class="line">DECRBY <span class="built_in">key</span> increment</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>增加指定浮点数</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">INCRBYFLOAT key  increment</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>向尾部追加值</li>
</ol>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">APPEND <span class="built_in">key</span>  <span class="built_in">value</span></span><br></pre></td></tr></table></figure>

<p><code>APPEND</code> 命令中，若键不存在，则将该键的值设为 <code>value</code>，相当于执行了 <code>SET key value</code>。</p>
<ol start="7">
<li>获取字符串长度</li>
</ol>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">STRLEN</span> <span class="built_in">key</span></span><br></pre></td></tr></table></figure>

<p>对于汉字，Redis使用UTF-8编码的中文，如下示例中，“你”和“好”两个字的UTF-8编码的长度都是3，所以返回的字符串长度为6。</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">&gt; <span class="keyword">SET</span> key1 你好</span><br><span class="line">OK</span><br><span class="line">&gt; STRLEN <span class="comment">key1</span></span><br><span class="line">(integer) 6</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>同时获得/设置多个键值</li>
</ol>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">MSET key<span class="number">1</span> <span class="keyword">value</span><span class="number">1</span> key<span class="number">2</span> <span class="keyword">value</span><span class="number">2</span> key<span class="number">3</span> <span class="keyword">value</span><span class="number">3</span></span><br><span class="line"></span><br><span class="line">MGET key<span class="number">1</span> key<span class="number">2</span> key<span class="number">3</span></span><br></pre></td></tr></table></figure>


<ol start="9">
<li>位操作</li>
</ol>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">GETBIT <span class="built_in">key</span> offset   <span class="comment">//获取一个字符串类型键指定位置的二进制位的值（0或1）</span></span><br><span class="line"> </span><br><span class="line">SETBIT <span class="built_in">key</span> offset value  <span class="comment">//设置指定位置的二进制位的值</span></span><br><span class="line"></span><br><span class="line">BITCOUNT <span class="built_in">key</span> [start] [<span class="keyword">end</span>] <span class="comment">//获得字符串类型键中值是1的二进制位个数</span></span><br><span class="line"></span><br><span class="line">BITOP operation destkey <span class="built_in">key</span> [<span class="built_in">key</span> ...] <span class="comment">//对多个字符串类型键进行位运算，结果存储在destkey</span></span><br></pre></td></tr></table></figure>

<p>一个字节由8个二进制位组成。Redis 提供了 4 个命令可以直接对二进制位操作。</p>
<p>下面进行示例分析。</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> foo <span class="comment">bar</span></span><br></pre></td></tr></table></figure>

<p>“bar”的3个字母对应的ASCII码分别是98，97，114，转换为对应的二进制数值，<code>foo</code> 键中的二进制位结构为<code>01100010,01100001,01110010</code>。</p>
<p>(1) 使用 <code>GETBIT key offset</code> 获取一个字符串类型键指定位置的二进制位的值（0或1）</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">redis&gt; GETBIT foo <span class="number">6</span></span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>如果获取的二进制位的索引超出了键值的二进制位的实际长度，则默认返回 0</p>
<p>(2) <code>BITOP operation destkey key [key ...]</code> 可以对多个字符串类型键进行位运算，结果存储在 <code>destkey</code></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SET foo1 bar</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SET foo2 aar</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; BITOP OR res foo1 foo2  <span class="comment">//或运算</span></span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; GET res</span><br><span class="line"><span class="string">"car"</span></span><br></pre></td></tr></table></figure>


<h4 id="哈希（散列）类型"><a href="#哈希（散列）类型" class="headerlink" title="哈希（散列）类型"></a>哈希（散列）类型</h4><p>哈希（或散列）<code>hash</code> 类型的键值也是一种字典结构，其存储了字段（<code>field</code>）和字段值的映射，但字段值只能是字符串，不支持其他数据类型。</p>
<ol>
<li>赋值和取值</li>
</ol>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">HSET <span class="built_in">key</span> field <span class="built_in">value</span>  <span class="comment">//不区分插入和更新操作，即更新数据时不用事先判断是否存在 </span></span><br><span class="line">HGET <span class="built_in">key</span> field</span><br><span class="line"></span><br><span class="line">HMSET <span class="built_in">key</span> field <span class="built_in">value</span> [field <span class="built_in">value</span> ...]</span><br><span class="line">HMGET <span class="built_in">key</span> field [field ...]</span><br><span class="line"></span><br><span class="line">HGETALL <span class="built_in">key</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>判断字段是否存在</li>
</ol>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">HEXISTS</span> key <span class="meta">field</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>仅仅在字段不存在是赋值</li>
</ol>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">HSETNX <span class="built_in">key</span> field <span class="built_in">value</span></span><br></pre></td></tr></table></figure>

<p><code>HSETNX</code> 和 <code>HSET</code> 命令类似，区别在于如果字段已经存在，<code>HSETNX</code> 命令将不执行任何操作。</p>
<p><code>HSETNX</code> 中的 <code>NX</code> 表示 <code>if Not eXists</code>。</p>
<ol start="4">
<li>增加数字</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">HINCRBY key filed increment</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>删除字段</li>
</ol>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">HDEL</span> key <span class="meta">field</span> [<span class="meta">field</span> ...]</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>只获取字段名称或字段值</li>
</ol>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">HKEYS <span class="built_in">key</span></span><br><span class="line"></span><br><span class="line">HVALS <span class="built_in">key</span></span><br></pre></td></tr></table></figure>
<ol start="7">
<li>获得字段数量</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">HLEN key</span></span><br></pre></td></tr></table></figure>

<h4 id="列表类型"><a href="#列表类型" class="headerlink" title="列表类型"></a>列表类型</h4><p>列表（<code>list</code>）可以存储一个有序的字符串列表，常用的操作是向列表两端添加元素，或者获取列表的某一个片段。</p>
<p>列表类型内部使用的是双向链表实现的，所以想列表两端添加元素的时间复杂度是 <code>O(1)</code>，获取越接近两端的元素速度就越快，但是通过索引访问元素会比较慢。因此，针对双向链表的特点，列表类型特别适合如下场景</p>
<ul>
<li>如社交网站的新鲜事，我们只关心最新内容，即使新鲜事达到几千万条，获取列表尾部的100条最新数据也是很快的</li>
<li>如日志记录场景，双向链表保证了插入新日志的速度不会受到已有日志数量的影响</li>
<li>借助列表类型，Redis还可以作为队列使用</li>
</ul>
<ol>
<li>向列表两端增加元素</li>
</ol>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">LPUSH <span class="built_in">key</span> <span class="built_in">value</span> [<span class="built_in">value</span> ...]   <span class="comment">//向列表左边插入元素</span></span><br><span class="line">RPUSH <span class="built_in">key</span> <span class="built_in">value</span> [<span class="built_in">value</span> ...]</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>从列表两端弹出元素</li>
</ol>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">LPOP <span class="built_in">key</span> </span><br><span class="line">RPOP <span class="built_in">key</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>获取列表中元素个数</li>
</ol>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">LLEN <span class="built_in">key</span>     <span class="comment">// 当键不存在则返回0</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>获得列表片段</li>
</ol>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">LRANGE key <span class="literal">start</span> <span class="literal">stop</span>   //返回区间[<span class="literal">start</span>,<span class="literal">stop</span>]的列表片段（区间闭合），不改变原列表</span><br></pre></td></tr></table></figure>


<ol start="5">
<li>删除列表中指定的值</li>
</ol>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">LREM<span class="built_in"> key</span><span class="built_in"> count</span> <span class="keyword">value</span>  </span><br><span class="line">//删除列表中<span class="built_in">前count</span>个值为<span class="keyword">value</span>的元素，返回值是实际删除的元素个数</span><br></pre></td></tr></table></figure>

<p>当 <code>count</code> 大于0时，会从列表左边开始删除前<code>count</code> 个；当小于0时，会从列表右边边开始；当 <code>count</code> 等于0时，会删除列表中所有值为 <code>value</code> 的元素。</p>
<ol start="6">
<li>获得/设置指定索引的元素值</li>
</ol>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">LINDEX key <span class="keyword">index</span></span><br><span class="line"></span><br><span class="line">LSET <span class="keyword">key</span> <span class="keyword">index</span> <span class="keyword">value</span></span><br></pre></td></tr></table></figure>
<p>若 <code>index</code> 小于0，表示从列表右边开始计算索引，最右边的元素的索引值是 -1。</p>
<ol start="7">
<li>只保留列表指定片段</li>
</ol>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">LTRIM key <span class="literal">start</span> <span class="literal">stop</span>   //只保留区间[<span class="literal">start</span>,<span class="literal">stop</span>]的列表片段（区间闭合），改变了原列表</span><br></pre></td></tr></table></figure>


<ol start="8">
<li>向列表中插入元素</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">LINSERT key <span class="keyword">BEFORE</span>|<span class="keyword">AFTER</span> pivot <span class="keyword">value</span>   </span><br><span class="line">//从左到右查找列表的pivot元素，在该元素前或后，插入<span class="keyword">value</span>元素</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>将元素从一个列表转到另一个列表</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">RPOPLPUSH <span class="keyword">source</span> destination</span><br><span class="line"><span class="comment">//RPOPLPUSH表示先执行RPOP，再执行LPUSH</span></span><br></pre></td></tr></table></figure>

<h4 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h4><p>相比于列表，集合（<code>set</code>）中的元素是全局唯一的，并且是无序的。</p>
<p>集合（<code>set</code>）类型在Redis内部是使用值为空的散列表(<code>hash table</code>)实现的，所以向集合中插入或删除元素，判断元素是否存在，这些操作的时间复杂度都是 <code>O(1)</code>。</p>
<p>更方便的是，采用集合类型，多个集合类型之间还可以进行交集，并集和差集运算。</p>
<ol>
<li>增加/删除元素</li>
</ol>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">SADD <span class="built_in">key</span> <span class="built_in">member</span> [menber ...] //如果键不存在，则自动创建，返回值为成功加入的元素的数量</span><br><span class="line">SREM <span class="built_in">key</span> <span class="built_in">member</span> [menber ...]</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>获得集合找那个所有的元素</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">SMEMBERS key</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>判断元素是否在集合中</li>
</ol>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 时间复杂度位O(1) 速度较快</span></span><br><span class="line">SISMEMBER key <span class="keyword">member</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>集合之间的运算</li>
</ol>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">SDIFF  <span class="built_in">key</span> [<span class="built_in">key</span> ...]    <span class="comment">//差集</span></span><br><span class="line">SINTER <span class="built_in">key</span> [<span class="built_in">key</span> ...]    <span class="comment">//交集</span></span><br><span class="line">SUNION <span class="built_in">key</span> [<span class="built_in">key</span> ...]    <span class="comment">//并集</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>获取集合中元素个数</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">SCARD key</span></span><br></pre></td></tr></table></figure>


<ol start="6">
<li>进行集合运算并将结果存储</li>
</ol>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">SDIFFSTORE destination <span class="built_in">key</span> [<span class="built_in">key</span> ...]</span><br><span class="line">SINTERSTORE destination <span class="built_in">key</span> [<span class="built_in">key</span> ...]</span><br><span class="line">SUNIONSTORE destination <span class="built_in">key</span> [<span class="built_in">key</span> ...]</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>随机获得集合中的元素</li>
</ol>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SRANDMEMBER </span>key [<span class="built_in">count</span>]</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>从集合中弹出一个元素</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">SPOP key</span></span><br></pre></td></tr></table></figure>

<h4 id="有序集合类型"><a href="#有序集合类型" class="headerlink" title="有序集合类型"></a>有序集合类型</h4><p>有序集合(<code>sorted list</code>)类型，是在集合类型的基础上，为每个元素关联一个分数（<code>score</code>，可以理解为索引值），使得元素有序。</p>
<p>Redis中，采用哈希表和跳跃表（<code>Skip list</code>）实现有序集合类型。所以即使读取位于中间部分的数据，速度也是很快的（时间复杂度是``O(logN)`）。</p>
<ol>
<li>增加元素</li>
</ol>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">//添加一个<span class="built_in">member</span>元素和该元素的分数score</span><br><span class="line">ZADD <span class="built_in">key</span> score <span class="built_in">member</span> [score <span class="built_in">member</span>]</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>获得元素的分数</li>
</ol>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">ZSCORE <span class="built_in">key</span> <span class="built_in">member</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>获得排名在某个范围的元素列表</li>
</ol>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">//按照元素分数从小到大的顺序，返回索引在区间[<span class="built_in">start</span>,<span class="built_in">stop</span>]的所有元素</span><br><span class="line">//如果有参数WITHSCORES，表示返回的元素列表包含分数信息</span><br><span class="line">ZRANGE key <span class="built_in">start</span> <span class="built_in">stop</span> [WITHSCORES]</span><br><span class="line"></span><br><span class="line">//类似ZRANGE，只不过是按照分数从大到小的顺序</span><br><span class="line">ZREVRANGE key <span class="built_in">start</span> <span class="built_in">stop</span> [WITHSCORES]</span><br></pre></td></tr></table></figure>


<ol start="4">
<li>获得指定分数范围的元素</li>
</ol>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">//按照元素分数从小到大的顺序，返回索引在区间[<span class="built_in">start</span>,<span class="built_in">stop</span>]的所有元素</span><br><span class="line">//如果有参数WITHSCORES，表示返回的元素列表包含分数信息</span><br><span class="line">ZRANGE key <span class="built_in">start</span> <span class="built_in">stop</span> [WITHSCORES]</span><br><span class="line"></span><br><span class="line">//类似ZRANGE，只不过是按照分数从大到小的顺序</span><br><span class="line">ZREVRANGE key <span class="built_in">start</span> <span class="built_in">stop</span> [WITHSCORES]</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>获得指定分数范围的元素</li>
</ol>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">//按照元素分数从小到大，返回分数在区间[<span class="built_in">min</span>,<span class="built_in">max</span>]之间的元素</span><br><span class="line">//LIMIT <span class="built_in">offset</span> <span class="built_in">count</span> 表示在获得元素列表的基础上，向后偏移（跳过）<span class="built_in">offset</span>个元素，并且只获取之后的前<span class="built_in">count</span>个元素</span><br><span class="line">ZRANGEBYSCORE key <span class="built_in">min</span> <span class="built_in">max</span> [WITHSCORES] [LIMIT <span class="built_in">offset</span> <span class="built_in">count</span>]</span><br></pre></td></tr></table></figure>


<ol start="6">
<li>增加某个元素的分数</li>
</ol>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">ZINCRBY <span class="built_in">key</span> increment <span class="built_in">member</span></span><br></pre></td></tr></table></figure>


<ol start="7">
<li>获得集合中元素的数量</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ZCARD key</span></span><br></pre></td></tr></table></figure>

<ol start="8">
<li>获得指定分数范围内的元素个数</li>
</ol>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">ZCOUNT <span class="built_in">key</span> <span class="built_in">min</span> <span class="built_in">max</span></span><br></pre></td></tr></table></figure>


<ol start="9">
<li>按照排名范围删除元素</li>
</ol>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按照元素分数从小到大顺序，删除指定排名范围内的元素，并返回删除的元素数量</span></span><br><span class="line">ZREMRANGEBYRANK <span class="built_in">key</span> start <span class="keyword">stop</span></span><br></pre></td></tr></table></figure>

<ol start="10">
<li>按照分数范围删除元素</li>
</ol>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回删除的元素数量</span></span><br><span class="line">ZREMRANGEBYSCORE <span class="built_in">key</span> <span class="built_in">min</span> <span class="built_in">max</span></span><br></pre></td></tr></table></figure>

<ol start="11">
<li>获得元素的排名</li>
</ol>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line">ZRANK key <span class="keyword">member</span>    <span class="comment">//按照分数从小到大顺序</span></span><br><span class="line">ZRANK key <span class="keyword">member</span>    <span class="comment">//按照分数从大到小顺序</span></span><br></pre></td></tr></table></figure>


<h2 id="Redis进阶"><a href="#Redis进阶" class="headerlink" title="Redis进阶"></a>Redis进阶</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="MULTI-EXEC"><a href="#MULTI-EXEC" class="headerlink" title="MULTI EXEC"></a>MULTI EXEC</h4><p>事务(<code>transaction</code>)是一组命令的集合，事务同命令一样，都是Redis的最小执行单位。一个事务中的命令要么都执行，要么都不执行。事务的应用非常普遍，如银行转账等。</p>
<p>Redis的事务还可以保证一个事务内的命令一次执行而不被其他命令插入。</p>
<p>事务的原理是先将属于一个事务的命令发送给Redis，然后再让Redis一次执行这些命令，例如</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">redis&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">redis&gt; SADD <span class="string">"user:1:following"</span> <span class="number">2</span></span><br><span class="line">QUEED</span><br><span class="line">redis&gt; SADD <span class="string">"user:2:following"</span> <span class="number">1</span></span><br><span class="line">QUEED</span><br><span class="line">redis&gt; EXEC</span><br><span class="line"><span class="number">1</span>) (<span class="type">integer</span>) <span class="number">1</span></span><br><span class="line"><span class="number">2</span>) (<span class="type">integer</span>) <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>上面的代码演示了事务的使用方式。首先使用 <code>MULIL</code> 命令告诉Redis：“下面我发给你的命令属于同一个事务，你先不要执行，而是把它们暂时存起来”。</p>
<p>随后发送两个 <code>SADD</code> 命令执行事务操作，Redis返回 <code>QUEED</code> 表示这2条命令已经进入等待执行的事务队列中了。</p>
<p>最后，发送 <code>EXEC</code> 命令告诉Redis将等待执行的事务队列中的所有命令按照发送顺序执行。</p>
<p><strong>事务中的命令是在 <code>EXEC</code> 之后才执行的，因此，一个事务中，只有当所有命令都依次执行完成后，才能得到每个结果的返回值。</strong></p>
<h4 id="WATCH"><a href="#WATCH" class="headerlink" title="WATCH"></a>WATCH</h4><p><strong>一个事务中，只有当所有命令都依次执行完成后才能得到每个结果的返回值。</strong> 可是有些情况下，需要先获得一条命令的返回值，根据返回值再执行下一条命令。针对该情况，可以使用 <code>WATCH</code> 命令。</p>
<p><code>WATCH</code> 命令可以监控一个或多个键，一旦其中有一个键被修改或删除，之后的事务就不会执行。监控一直到 <code>EXEC</code> 命令。（事务中的命令是在 <code>EXEC</code> 之后才执行的，所以在 <code>MULTI</code> 命令后可以修改 <code>WATCH</code> 监控的键值）</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">redis&gt; <span class="builtin-name">SET</span> key 1</span><br><span class="line">OK</span><br><span class="line">redis&gt; WATCH key</span><br><span class="line">OK</span><br><span class="line">redis&gt; <span class="builtin-name">SET</span> key 2</span><br><span class="line">OK</span><br><span class="line">redis&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">redis&gt; <span class="builtin-name">SET</span> key 3</span><br><span class="line">QUEED</span><br><span class="line">redis&gt; EXEC</span><br><span class="line"><span class="literal">nil</span></span><br><span class="line">redis&gt; <span class="builtin-name">GET</span> key</span><br><span class="line"><span class="string">"2"</span></span><br></pre></td></tr></table></figure>

<p>上例中，执行 <code>WATCH</code> 命令后，事务修改了 <code>key</code> 值，所以最后事务代码并没有执行，<code>EXEC</code> 命令返回结果为 <code>nil</code>。</p>
<p>执行 <code>EXEC</code> 命令后悔取消对所有键的监控。</p>
<h3 id="过期时间"><a href="#过期时间" class="headerlink" title="过期时间"></a>过期时间</h3><p>Redis 中可以使用 <code>EXPTRE</code> 命令设置一个键的过期时间，到时间后 Redis 会自动删除它。</p>
<ol>
<li>设置过期时间</li>
</ol>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">EXPIRE <span class="built_in">key</span> seconds   <span class="comment">//seconds 单位为秒</span></span><br><span class="line"></span><br><span class="line">PEXPIRE <span class="built_in">key</span> milliseconds  <span class="comment">//milliseconds 单位为毫秒</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查询键还有多少时间会被删除</li>
</ol>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">TTL <span class="built_in">key</span>   <span class="comment">//返回时间单位为秒</span></span><br><span class="line"></span><br><span class="line">PTTL <span class="built_in">key</span>  <span class="comment">//返回时间单位为毫秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 键不存在时，命令返回-2</span></span><br><span class="line"><span class="comment">// 键未设置过期时间时，命令返回-1</span></span><br></pre></td></tr></table></figure>


<ol start="3">
<li>取消键的过期时间设置</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">PERSIST key</span></span><br></pre></td></tr></table></figure>
<p>除了 <code>PERSIST</code> 命令外，使用 <code>SET</code> 或 <code>GETSET</code> 命令为键赋值，也会同时清除键的过期时间。</p>
<h4 id="实现访问频率限制"><a href="#实现访问频率限制" class="headerlink" title="实现访问频率限制"></a>实现访问频率限制</h4><p>考虑如下场景——为了减轻服务器的压力，限制每个用户（IP）每分钟最多只能访问10次，就可以使用过期时间 <code>EXPIRE</code> 实现</p>
<ul>
<li>创建一个 <code>rate.limiting:userIP</code> 的键</li>
<li>设置 <code>EXPIRE key seconds</code>，过期时间为60s。一分钟后，该键会被自动删除</li>
<li>用户每次访问服务器，使用 <code>INCR</code> 递增该键值</li>
<li>当访问次数达到10后，提示用户稍后访问</li>
</ul>
<p>上述流程的伪代码如下</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="variable">$isKeyExists</span> = EXISTS rate.limiting:<span class="variable">$IP</span></span><br><span class="line"><span class="keyword">if</span> isKeyExists is <span class="number">1</span></span><br><span class="line">    <span class="variable">$time</span> = INCR rate.limiting:<span class="variable">$IP</span></span><br><span class="line">    <span class="keyword">if</span> <span class="variable">$time</span> &gt; <span class="number">10</span></span><br><span class="line">        print 访问频率超过了限制，请稍后再试</span><br><span class="line">        <span class="keyword">exit</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    MULTI           <span class="regexp">//</span>使用事务，避免EXPIRE因为某种原因未执行，导致该键值一直存在</span><br><span class="line">    INCR rate.limiting:<span class="variable">$IP</span></span><br><span class="line">    EXPIRE <span class="variable">$keyName</span>, <span class="number">60</span></span><br><span class="line">    EXEC</span><br></pre></td></tr></table></figure>

<p>上述代码还有一个问题，比如用户在第1分钟的最后一秒访问了9次，又在下一分钟的第一秒访问了10次。这种访问是可以通过上述访问限制的，但实际上用户在2秒内访问了19次服务器。</p>
<p>为了处理上述场景，可以对代码进行优化</p>
<ul>
<li>使用一个列表存储用户最近10次访问服务器的时间</li>
<li>一旦键中的元素大于10个，就判断时间最早的元素距现在的时间是否小于1分钟。</li>
<li>如果是，则表示用户最近一分钟的访问次数超过了10次，进行限流提醒。</li>
<li>如果不是，就将现在的时间加入到列表中，同时把最早的元素删除。</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="variable">$listLength</span> = LLEN rate<span class="selector-class">.limiting</span>:<span class="variable">$IP</span></span><br><span class="line"><span class="keyword">if</span> listLength &lt; <span class="number">10</span></span><br><span class="line">    LPUSH rate<span class="selector-class">.limiting</span>:<span class="variable">$IP</span>,now()</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="variable">$time</span> = LINDEX rate<span class="selector-class">.limiting</span>:<span class="variable">$IP</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> now() - <span class="variable">$time</span> &gt; <span class="number">60</span></span><br><span class="line">        print 访问频率超过了限制，请稍后再试</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        LPUSH rate<span class="selector-class">.limiting</span>:<span class="variable">$IP</span>,now()</span><br><span class="line">        LTRIM rate<span class="selector-class">.limiting</span>:<span class="variable">$IP</span>,<span class="number">0</span>,<span class="number">9</span></span><br></pre></td></tr></table></figure>

<h4 id="实现缓存"><a href="#实现缓存" class="headerlink" title="实现缓存"></a>实现缓存</h4><p>为了提高服务器负载能力，常常需要将一些访问频率较高但是CPU或则IO资源消耗较大的操作的结果缓存起来，并希望让这些缓存过一段时间后自动过期。</p>
<p>实际开发中很难为缓存键设定合理的过期时间，为此可以限制Redis可以使用的最大内存，并让Redis按照一定的规则淘汰不需要的缓存键。这种方式在只将Redis用作缓存系统时非常实用。</p>
<p>Redis配置文件的 <code>maxmemory</code> 属性限定了Redis可以使用的最大内存。当超出这个限制时，Redis会依据 <code>maxmemory-policy</code> 参数指定的策略来删除不要的键值直到Redis占用的内存大小小于指定内存。</p>
<p><code>maxmemory-policy</code> 支持<code>LRU</code>(<code>Least Recently Used</code>) 算法规则，即“最近最少使用原则”，其认为最近最少使用的键在未来一段时间内也不会被用到，当内存不足时这些键是可以被删除的。</p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><code>SORT</code> 命令可以对列表类型，集合类型和有序集合类型键进行排序，并且可以完成和关系数据库中的连接查询类似的任务。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SORT key BY 参考键 <span class="builtin-name">GET</span> <span class="built_in">..</span>. STORE destkey</span><br></pre></td></tr></table></figure>
<ul>
<li><code>BY 参考键</code>中，如果提供了 <code>BY</code> 参数，<code>SORT</code> 命令将不再依据元素自身的值进行排序，而是对每个元素使用元素的值替换参考键中的第一个 <code>&quot;*&quot;</code> 并获取其值，然后依据该值对元素进行排序。</li>
</ul>
<p>例如，下述语句将读取如 <code>post:2</code>，<code>post:6</code>，<code>post:12</code>，<code>post:26</code> 几个散列键中的 <code>time</code> 字段的值并以此决定排序结果。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SORT</span> tag:ruby:posts <span class="keyword">BY</span> <span class="keyword">post</span>:*-&gt;time <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>


<ul>
<li><code>GET</code> 参数不影响排序，它的作用是使 <code>SORT</code> 命令的返回结果不再是元素自身的值，而是 <code>GET</code> 参数中指定的键值。</li>
<li><code>STORE</code> 参数用于将排序结果存储到指定的键中</li>
</ul>
<h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><p><code>SORT</code> 命令的时间复杂度是 <code>O(n+mlog(m))</code>，其中 <code>n</code> 表示要排序的列表（或集合或有序集合）中的元素个数，<code>m</code>表示要返回的元素个数。当 <code>n</code> 较大的时候，排序命令的性能相对较低，并且 Redis 在排序前会建立一个长度为 <code>n</code> 的容器来存储待排序的元素，虽然是一个临时的过程，但是如果同时进行较多的大数据量的排序操作则会严重影响性能。</p>
<p>所以开发中使用 <code>SORT</code> 命令需要注意</p>
<ol>
<li>尽可能减少待排序键中元素的数量（使 <code>n</code> 尽可能小）</li>
<li>使用 <code>LIMIT</code> 参数只获取需要的数据（使 <code>m</code> 尽可能小）</li>
<li>如果需要排序的数据量较大，尽可能使用 <code>STORE</code> 参数将结果缓存</li>
</ol>
<h3 id="消息通知"><a href="#消息通知" class="headerlink" title="消息通知"></a>消息通知</h3><h4 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h4><p>任务队列，即“传递任务的队列”。和任务队列进行交互的实体有两类，一类是生产者（<code>producer</code>），另一类是消费者（<code>consumer</code>）。生产者会将需要处理的任务放入任务队列中，而消费者会不断地从任务队列中读入任务信息并执行。</p>
<p>使用任务队列的好处</p>
<ol>
<li>松耦合：生产者和消费者不需要知道彼此的实现细节，只需约定好的任务的描述格式即可。</li>
<li>易于扩展：消费者可以扩展到多个，而且可以分布在不同的服务器中，可以轻易地降低单台服务器的负载</li>
</ol>
<h4 id="使用Redis实现任务队列"><a href="#使用Redis实现任务队列" class="headerlink" title="使用Redis实现任务队列"></a>使用Redis实现任务队列</h4><p>使用Redis的列表结构和 <code>RPOP</code>，<code>LPUSH</code> 命令，可以实现简单的任务队列，伪代码如下所示</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 无限循环读取任务队列中的内容</span></span><br><span class="line">loop</span><br><span class="line">    <span class="variable">$task</span> = RPOP queue</span><br><span class="line">    <span class="keyword">if</span> <span class="variable">$task</span></span><br><span class="line">        # 如果任务队列中有任务则执行任务</span><br><span class="line">        execute(<span class="variable">$task</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        # 如果没有则等待1秒，以免过于频繁地请求数据</span><br><span class="line">        wait 1 second</span><br></pre></td></tr></table></figure>

<p>上述伪代码有个不足之处，当任务队列中没有任何任务时，消费者每秒都会调用一次 <code>RPOP</code> 命令查询是否有新任务。</p>
<p>如果可以实现一旦有新任务加入任务队列就通知消费者就好了。其实借助 <code>BRPOP</code> 命令就可以实现这样的需求。</p>
<p>如上伪代码可以优化为</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">loop</span><br><span class="line">    <span class="meta"># 如果任务队列中没有新任务，BRPOP命令会一直阻塞，不会执行execute()</span></span><br><span class="line">    $task = BRPOP queue, <span class="number">0</span></span><br><span class="line">    <span class="meta"># 返回值是一个数组，数组第2个元素是我们需要的任务</span></span><br><span class="line">    <span class="built_in">execute</span>($task[1])</span><br></pre></td></tr></table></figure>


<p><strong><code>BRPOP</code> 和 <code>RPOP</code> 命令类似，唯一的区别就是当列表中没有元素时，<code>BRPOP</code> 命令会一直阻塞连接，直到有新元素加入。</strong> </p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">BRPOP <span class="built_in">key</span> [<span class="built_in">key</span> ...] timeout</span><br></pre></td></tr></table></figure>

<p><code>BRPOP</code> 命令接收2个参数，第1个参数是键名，第2个参数是超时时间，单位是秒。当超过了此时间仍然没有获得新元素的话，就会返回 <code>nil</code>。如果传入时间参数为0（如下伪代码示例），则表示不限制等待时间，即如果没有新元素加入队列就会永远阻塞下去。</p>
<p>获得一个元素后，<code>BRPOP</code> 命令会返回一个数组，共2个值，分别是键名和元素值。第2个参数，元素值，就是待处理的任务。</p>
<h4 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h4><p>在实际开发中，针对多种不同的任务，经常会需要根据任务的优先级，去执行优先级较高的任务，即需要实现一个优先级队列。</p>
<p><code>BRPOP</code> 和 <code>BLPOP</code> 命令可以同时接收多个键，可以实现优先级队列。</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">BRPOP <span class="built_in">key</span> [<span class="built_in">key</span> ...] timeout</span><br></pre></td></tr></table></figure>

<p>例如，<code>BLPOP queue:1 queue:2 0</code>，表示同时检测多个键——<code>queue:1</code> 和 <code>queue:2</code></p>
<ul>
<li>如果所有键都没元素则阻塞</li>
<li>如果有一个键有元素则会从该键中弹出元素</li>
<li>如果多个键都有元素，则按照<strong>从左到右</strong>顺序读取第一个键中的一个元素</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">redis&gt; LPUSH queue:<span class="number">2</span> task1</span><br><span class="line"><span class="number">1</span>) (<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line">redis&gt; LPUSH queue:<span class="number">3</span> task2</span><br><span class="line"><span class="number">1</span>) (<span class="built_in">int</span>eger) <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">redis&gt;BRPOP queue:<span class="number">1</span> queue:<span class="number">2</span> queue:<span class="number">3</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"queue:2"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"task1"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">redis&gt;BLPOP queue:<span class="number">1</span> queue:<span class="number">2</span> queue:<span class="number">3</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span>) <span class="string">"queue:3"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"task2"</span></span><br></pre></td></tr></table></figure>

<p>使用 <code>BRPOP</code> 创建优先级队列时，<code>RPOP</code> 表示队列左进右出，因此有如下结构。即 <code>BRPOP queue:1 queue:2 queue:3 0</code> 命令中，越靠左的键优先级越高（<code>queue:1</code> 的优先级最高，因此会按照<strong>从左到右</strong>顺序读取第一个键中的一个元素。</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">(L-左进)--- | <span class="type">queue</span>:<span class="number">3</span>| <span class="type">queue</span>:<span class="number">2</span>| <span class="type">queue</span>:<span class="number">1</span>| <span class="type">--&gt; (R</span>-右出)</span><br></pre></td></tr></table></figure>

<p>使用 <code>BLPOP</code> 创建优先级队列时，<code>LPOP</code> 表示队列右进左出，因此有如下结构。即 <code>BLPOP queue:1 queue:2 queue:3 0</code> 命令中，越靠右的键优先级越高（<code>queue:3</code> 的优先级最高），因此会按照<strong>从右到左</strong>顺序读取第一个键中的一个元素。</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">(L-左出) &lt;--- | <span class="type">queue</span>:<span class="number">1</span>| <span class="type">queue</span>:<span class="number">2</span>| <span class="type">queue</span>:<span class="number">3</span>| <span class="type">--- (R</span>-右进)</span><br></pre></td></tr></table></figure>



<h4 id="“发布-订阅”模式"><a href="#“发布-订阅”模式" class="headerlink" title="“发布/订阅”模式"></a>“发布/订阅”模式</h4><p>“发布/订阅”模式包含两种角色，分别是发布者和订阅者。订阅者可以订阅一个或多个频道（<code>channel</code>），发布者可以向指定的频道发送消息，所有订阅该频道的订阅者都会受到改消息。</p>
<ul>
<li>发布消息</li>
</ul>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">PUBLISH channel <span class="keyword">message</span>   <span class="comment">//命令返回值表示接收到这条消息的订阅者的数量</span></span><br></pre></td></tr></table></figure>

<p>发布出去的消息不会被持久化，也就是说当有客户订阅该频道 <code>channel</code>后只能收到后续发布的消息，之前发送的消息就收不到了。</p>
<ul>
<li>订阅消息</li>
</ul>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">SUBSCRIBE channel <span class="string">[channel ...]</span></span><br></pre></td></tr></table></figure>

<p>执行 <code>SUBSCRIBE</code> 命令后客户端会进入订阅状态，此状态下的客户端不能使用 <code>SUBSCRIBE</code>, <code>UNSUBSCRIBE</code>, <code>PSUBSCRIBE</code> 和 <code>PUNSUBSCRIBE</code> 这4个属于 “发布/订阅”模式的命令之外的命令，否则会报错。</p>
<p>进入订阅状态后的客户端，可能收到3种类型的回复，每种类型的回复都包括3个值。第一个值是消息类型，根据消息类型的不同，第二，第三个值的含义也不同。消息类型的取值可能有以下3个</p>
<ol>
<li><code>subscribe</code>。表示订阅消息成功的反馈。第2个值是订阅成功的频道名称，第3个值是当前客户端订阅的频道数量</li>
<li><code>message</code>。表示接收到的消息。第2个参数表示频道名称，第3个参数是消息内容</li>
<li><code>unscribe</code>。表示成功取消订阅某个频道。第2个参数表示频道名称，第3个参数是当前客户端订阅的频道数量，当该值为0时，客户端会退出订阅状态。</li>
</ol>
<p>下面看一个实例。</p>
<ol>
<li>首先Redis的一个实例RedisA在频道 <code>channel1.1</code> 发布一个消息</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RedisA</span></span><br><span class="line">redisA&gt; PUBLISH channel1<span class="number">.1</span> hi</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">0</span>     <span class="comment">//表示当前没有客户端订阅该消息</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Redis的另外一个实例RedisB 订阅频道 <code>channel1.1</code></li>
</ol>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RedisB</span></span><br><span class="line">redisB&gt; SUBSCRIBE channel1<span class="number">.1</span></span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line"><span class="number">1</span>) <span class="string">"subscribe"</span>   <span class="comment">//订阅消息成功</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"channel1.1"</span></span><br><span class="line"><span class="number">3</span>) (<span class="type">integer</span>) <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>实例RedisA继续在频道 <code>channel1.1</code> 发布一个消息</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//RedisA</span></span><br><span class="line">redisA&gt; PUBLISH channel1<span class="number">.1</span> hello</span><br><span class="line">(<span class="built_in">int</span>eger) <span class="number">1</span>     <span class="comment">//表示当前没有客户端订阅该消息</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>此时，实例RedisB 会收到如下消息</li>
</ol>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) <span class="string">"message"</span></span><br><span class="line"><span class="number">2</span>) <span class="string">"channel1.1"</span></span><br><span class="line"><span class="number">3</span>) <span class="string">"hello"</span></span><br></pre></td></tr></table></figure>


<h4 id="按照规则订阅"><a href="#按照规则订阅" class="headerlink" title="按照规则订阅"></a>按照规则订阅</h4><p>可以使用 <code>PSUBSCRIBE</code> 订阅指定的规则，规则支持 <code>glob</code> 风格通配符格式。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>?</td>
<td>匹配一个字符</td>
</tr>
<tr>
<td>*</td>
<td>匹配任意个（包括0个）字符</td>
</tr>
<tr>
<td>[]</td>
<td>匹配括号间的任一字符，可以使用 <code>-</code> 表示一个范围，如 <code>[1-9]</code></td>
</tr>
<tr>
<td>\x</td>
<td>用于转义字符</td>
</tr>
</tbody></table>
<p>例如 <code>PSUBSCRIBE channel1.?*</code>命令中，规则 <code>channel1.?*</code> 可以匹配 <code>channel1.1</code> 和 <code>channel1.10</code>，但不会匹配 <code>channel1.1</code>。</p>
<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><ul>
<li>客户端和Redis使用TCP协议连接。</li>
<li>不论是客户端向Redis发送命令，还是Redis向客户端返回命令结果，都需要经过网络传输。这两个部分的总耗时成为<strong>往返时延。</strong></li>
<li>大致来说，到本地回环地址（<code>loop back address</code>）的往返时间，在数量级上相当于Redis处理一条简单命令 (如 <code>LPUSH list 1 2 3</code>) 的时间。</li>
<li>Redis的底层通信协议对管道（<code>pipelining</code>）提供了支持。通过管道可以一次性发送多条命令并在执行完后一次性将结果返回。</li>
<li>当一组命令中每条命令都不依赖于之前命令的执行结果时就可以将这一组命令一起通过管道发出。管道通过减少客户端和Redis的通信次数，来实现降低往返时延累计值的目的。</li>
</ul>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/back-end-2020/redis-basic-pipelining-1.png" alt=""></p>
<h3 id="节省空间"><a href="#节省空间" class="headerlink" title="节省空间"></a>节省空间</h3><p>Redis是一个基于内存的数据库，所有数据都存储在内存中。因此如何节省内存，控制成本，至关重要。节省内存空间，可以从以下方面考虑</p>
<ol>
<li>精简键名和键值</li>
<li>内部编码优化</li>
</ol>
<p>Redis为每种数据类型都提供了2种内部编码方式，用于节省内存空间。</p>
<p>以散列类型为例，散列类型是通过散列表实现的，这样可以实现时间复杂度 <code>O(1)</code> 的查找，赋值操作。然而当元素较少时，<code>O(1)</code>的操作并不会比 <code>O(n)</code> 有明显的性能提高。所以Redis会根据实际情况自动调整，采用一种更为紧凑但性能稍差（查找元素的复杂度为<code>O(n)</code>）的编码方式。</p>
<p><strong>内部编码方式的选择，对于开发者来说是透明的。</strong> 可以使用 <code>OBJECT ENCODING key</code> 命令查看某个键的内部编码方式。</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">redis&gt; <span class="keyword">SET</span> foo <span class="comment">bar</span></span><br><span class="line">OK</span><br><span class="line">redis&gt; OBJECT <span class="comment">ENCODING foo</span></span><br><span class="line"><span class="string">"raw"</span></span><br></pre></td></tr></table></figure>

<h2 id="Redis-脚本"><a href="#Redis-脚本" class="headerlink" title="Redis 脚本"></a>Redis 脚本</h2><p>Redis 脚本使用 Lua 解释器来执行脚本。 Redis 2.6 版本（和之后版本）通过内嵌支持 Lua 环境。执行脚本的常用命令为 <code>EVAL</code>。 使用脚本的好处包括</p>
<ol>
<li>减少网络开销：使用脚本可以将多个命令的多次请求，通过一次请求完成，减少网络往返时延</li>
<li>原子操作：Redis将整个脚本作为一个整体执行，中间不会被其他命令插入。即编写脚本过程中无需担心会出现竞态条件，也无需使用事务。事务可以完成的所有功能都可以使用脚本实现。</li>
<li>复用：客户端发送的脚本会永久存储在Redis中，其他客户端也可以复用这一脚本。</li>
</ol>
<h2 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis 持久化"></a>Redis 持久化</h2><p>Redis 支持2种方式的持久化</p>
<ol>
<li><code>RDB</code> 方式：根据指定的规则“定时”将内存中的数据存储在硬盘上</li>
<li><code>AOF</code> 方式：每次执行命令后将命令本身记录下来</li>
</ol>
<p>通过 <code>RDB</code> 方式实现持久化，一旦 Redis 异常退出，就会丢失最后一次快照以后更改的所有数据。如果数据相对重要，希望损失降到最小，则可以使用 <code>AOF</code> 方式进行持久化。</p>
<p>Redis 允许同时开启 <code>RDB</code> 和 <code>AOF</code> 方式，既保证了数据安全又使得进行备份等操作十分容易。此时重新启动 Redis 后，Redis 会使用 AOF 文件来恢复数据，因为 AOF 方式的持久化可能丢失的数据更少。</p>
<h3 id="RDB方式"><a href="#RDB方式" class="headerlink" title="RDB方式"></a>RDB方式</h3><p><code>RDB</code> 方式的持久化是通过快照（<code>snapshoting</code>）完成的，当符合一定条件时 Redis 会自动将内存中的所有数据生成一份副本并存储在硬盘上，这个过程即“快照”。</p>
<h4 id="快照触发条件"><a href="#快照触发条件" class="headerlink" title="快照触发条件"></a>快照触发条件</h4><p>Redis 会在以下几种情况下对数据进行快照</p>
<ol>
<li>根据配置规则进行自动快照：每当时间窗口 M 内被更改的键的个数大于 N 时，即符合自动快照条件</li>
<li>用户执行 <code>SAVE</code> 或 <code>BGSAVE</code> 命令<ul>
<li>执行 <code>SAVE</code> 命令时，Redis同步地执行快照操作。快照执行过程中会阻塞所有来自客户端的请求。所以应该尽量避免在生产环境中执行该指令</li>
<li><code>BGSAVE</code> 命令可以在后台异步地执行快照操作，同时可以响应客户端的请求</li>
</ul>
</li>
<li>执行 <code>FLUSHALL</code> 命令<ul>
<li><code>FLUSHALL</code> 命令会清楚数据库中的所有操作</li>
<li>只要自动快照条件不为空（即使不满足该条件），执行 <code>FLUSHALL</code> 命令后，也会触发快照操作</li>
<li>当没有定义自动快照条件时，执行 <code>FLUSHALL</code> 命令不会触发快照操作</li>
</ul>
</li>
<li>执行复制（<code>replication</code>）时：设置了主从模式时，Redis会在复制初始化时进行自动快照</li>
</ol>
<h4 id="快照原理"><a href="#快照原理" class="headerlink" title="快照原理"></a>快照原理</h4><p>Redis 默认会将快照文件存储在 Redis 当前进程的工作目录种的 <code>dump.rdb</code> 文件中。快照的过程如下</p>
<ol>
<li>Redis 使用 <code>fork</code> 函数复制一份当前进程（父进程）的副本（子进程）</li>
<li>父进程继续接收并处理客户端发来的命令，而子进程开始将内存中的数据写入硬盘中的临时文件</li>
<li>当子进程写入完成所有数据后会用该临时文件替换旧的 <code>RDB</code> 文件，至此一次快照操作完成。</li>
</ol>
<h3 id="AOF方式"><a href="#AOF方式" class="headerlink" title="AOF方式"></a>AOF方式</h3><p><code>AOF</code>(<code>append only file</code>) 方式可以将 Redis 执行的每一条命写命令追加到硬盘文件中，这一过程显然会降低 Redis 性能。但大部分情况下这个影响是可以接收的，另外使用较快的硬盘可以提高 <code>AOF</code> 的性能。</p>
<ul>
<li>开启AOF</li>
</ul>
<p>默认情况下没有开启AOF，执行如下命令可以开启AOF。默认情况下，AOF文件的保存位置和RDB文件的位置相同，默认的文件名是 <code>appendonly.aof</code>。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">appendonly</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure>

<ul>
<li>AOF的实现</li>
</ul>
<p>AOF 文件的内容正是Redis客户端向Redis发送的原始通信协议的内容。</p>
<ul>
<li>同步硬盘数据</li>
</ul>
<p>由于操作系统的缓存机制，AOF文件数据并没有直接真正地写入硬盘，而是进入了系统的硬盘缓存。在默认情况下系统每 30 秒会执行一次同步操作，以便将硬盘缓存中的内容真正地写入硬盘。在这30秒内，如果系统异常退出则会导致硬盘缓存中的数据丢失。</p>
<p>一般来讲，启用AOF持久化的应用都无法容忍这样的损失。这就需要 Redis 在写入AOF 文件后主动要求系统将硬盘缓存内容同步到硬盘中。在 Redis 中，可以通过 <code>appendfsync</code> 参数设置同步的时机</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># appendfsync always</span></span><br><span class="line">appendfsync everysec   <span class="comment">//默认</span></span><br><span class="line"><span class="meta"># appendfsync no       //不主动进行同步操作，即交由操作系统处理（每30秒同步一次）</span></span><br></pre></td></tr></table></figure>

<h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>同时拥有多个 Redis 服务器后，就会面临如果管理集群的问题，包括如何增加节点，故障恢复等操作。</p>
<h3 id="复制-replication"><a href="#复制-replication" class="headerlink" title="复制 replication"></a>复制 replication</h3><p>为了避免单点故障，通常的做法是将数据库复制多个副本以部署在不同的服务器上。为此，Redis提供了复制 <code>replication</code> 功能，可以实现当一台数据库中的数据更新后，自动将更新的数据同步到其他数据库中。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在复制的概念中，数据库分为2种</p>
<ol>
<li>主数据库（<code>master</code>）：可以进行读写操作，当写操作导致数据变化时会自动将数据同步给从数据库</li>
<li>从数据库 （<code>slave</code>）：一般是只读的（也可以配置为可写入），并接受主数据库同步过来的数据</li>
</ol>
<p>Redis中，只需要在从数据库配置文件中加入如下配置，即可完成复制操作，主数据库不需要任何配置。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">salveof</span> 主数据库地址   主数据库端口</span><br></pre></td></tr></table></figure>

<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ol>
<li>启动一个Redis实例作为主数据库，默认端口号是6379</li>
</ol>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$re</span>dis-server    <span class="comment">//默认端口号是6379</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>启动另一个Redis实例作为从数据库，监听端口号 6380</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$redis-server   --port <span class="number">6380</span> --slaveof <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure>

<p>此时主数据库中任何数据变化，都会自动同步到从数据库中。</p>
<ol start="3">
<li>打开 <code>redis-cli</code> 实例A并连接到主数据库。再打开 <code>redis-cli</code> 实例B并连接到从数据库</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$redis-cli -p <span class="number">6379</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br><span class="line"></span><br><span class="line">$redis-cli -p <span class="number">6380</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6380</span>&gt;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用 <code>INFO replication</code> 命令在实例A和实例B中查看复制相关的信息</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; INFO replication</span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:<span class="number">1</span></span><br><span class="line">slave0:ip=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>,port=<span class="number">6380</span>,state=online,offset=<span class="number">336</span>,lag=<span class="number">1</span></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>
<p>可以看到，实例A的角色是主数据库，其已连接的从数据库的个数是1。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6380</span>&gt; INFO replication</span><br><span class="line"># Replication</span><br><span class="line">role:slave</span><br><span class="line">master_host:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">master_port:<span class="number">6379</span></span><br></pre></td></tr></table></figure>
<p>可以看到，实例B的角色是从数据库。</p>
<ol start="5">
<li>在主数据库中添加键值，可以在从数据库中读取</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># 主数据库写入</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SET foo bar</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># 从数据库读取</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6380</span>&gt; GET foo</span><br><span class="line"><span class="string">"bar"</span></span><br></pre></td></tr></table></figure>


<h4 id="图结构"><a href="#图结构" class="headerlink" title="图结构"></a>图结构</h4><p>从数据库不仅可以接受主数据库的同步数据，自己也可以同时作为主数据库存在，形成类似图的结构，如下图所示。</p>
<p>主数据A的数据会同步到B和C，而B中的数据会同步到D和E中。向B中写入的数据不会同步到A或C中。</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line"></span><br><span class="line">A<span class="string">[主数据库A]</span>--&gt;B<span class="string">[从数据库B]</span></span><br><span class="line">A<span class="string">[主数据库A]</span>--&gt;C<span class="string">[从数据库C]</span></span><br><span class="line"></span><br><span class="line">B<span class="string">[从数据库B]</span>--&gt;D<span class="string">[从数据库D]</span></span><br><span class="line">B<span class="string">[从数据库B]</span>--&gt;E<span class="string">[从数据库E]</span></span><br></pre></td></tr></table></figure>





<h3 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h3><h4 id="面临的问题"><a href="#面临的问题" class="headerlink" title="面临的问题"></a>面临的问题</h4><p>为了提高性能，可以通过复制功能建立若干个从数据库，并在从数据库中启用持久化，同时在主数据中禁用持久化。这样可以保证主数据库的性能。</p>
<ol>
<li>当从数据库崩溃重启后，主数据库会自动将数据同步过来，所以无需担心数据丢失</li>
<li>当主数据库崩溃后，情况就比较复杂了。手动通过从数据库恢复主数据库数据时，需要严格执行如下2步<ul>
<li>在从数据库中使用 <code>SLAVE NO ONE</code> 命令将从数据库提升为主数据库继续服务</li>
<li>启动之前崩溃的主数据库，然后使用 <code>SLAVEOF</code> 命令将其设置成新的主数据库的从数据库，即可将数据同步回来</li>
</ul>
</li>
</ol>
<p>可见，手动维护主从数据库崩溃后的数据恢复是相当麻烦的。Redis提供了一种自动化方案——哨兵，避免了手工维护的麻烦和容易出错的问题。</p>
<h4 id="哨兵的功能"><a href="#哨兵的功能" class="headerlink" title="哨兵的功能"></a>哨兵的功能</h4><p>Redis 2.8中提供了哨兵工具来实现自动化的系统监控和故障恢复功能。</p>
<p>哨兵的作用就是监控 Redis 系统的运行状况，它的功能包括2个</p>
<ol>
<li>监控主数据库和从数据库是否正常工作</li>
<li>主数据库出现故障时自动将从数据库转换为主数据库</li>
</ol>
<p><strong>哨兵是一个独立的进程</strong>，使用哨兵的一个典型架构如下图所示。虚线表示主从复制关系，实线表示哨兵的监控路径。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/back-end-2020/redis-basic-guard-1.png" alt=""></p>
<p>在一个一主多从的Redis系统中，可以使用多个哨兵进行监控任务以保证系统是足够稳健的，如下图所示。此时不仅哨兵会同时监控主从数据库，哨兵之间也会互相监控。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/back-end-2020/redis-basic-guard-2.png" alt=""></p>
<h4 id="使用哨兵"><a href="#使用哨兵" class="headerlink" title="使用哨兵"></a>使用哨兵</h4><ol>
<li>创建哨兵配置文件，如 <code>sentinel.conf</code></li>
</ol>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sentinel monitor master-name  ip redis-port quorum</span></span><br><span class="line"></span><br><span class="line">sentinel<span class="built_in"> monitor </span>mymaster 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>
<p>其中，<code>mymaster</code> 是要监控的主数据库的名称，可以自定义一个。后面的参数是数据库的IP地址和端口号。</p>
<p>最后的参数 <code>1</code> 表示最低通过票数（<code>quorum</code>），即执行故障恢复操作前至少需要几个哨兵节点同意。一般情况下，取 <code>quorum</code> 的值为 <code>N/2 + 1</code>，其中 <code>N</code> 表示哨兵数目，即只有超过一半的哨兵同意后才会进行故障恢复。</p>
<ol start="2">
<li>启动哨兵进程，并将上述配置文件的路径传递给哨兵</li>
</ol>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">$redis-sentinel /path/<span class="keyword">to</span>/sentinel.conf</span><br></pre></td></tr></table></figure>

<p>需要注意的是，配置哨兵监控一个系统时，只需要配置其监控主数据库即可，哨兵会自动发现所有复制该主数据库的从数据库。</p>
<h3 id="集群-1"><a href="#集群-1" class="headerlink" title="集群"></a>集群</h3><p>Redis 3.0版本提供了集群（<code>Cluster</code>）特性。集群的特点在于拥有和单机实例同样的性能，同时在网络分区后能够提供一定的可访问性以及对主数据库故障恢复的支持。</p>
]]></content>
      <categories>
        <category>Back-End</category>
      </categories>
      <tags>
        <tag>Back-End</tag>
        <tag>DataBase</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode Notes-000-Overview</title>
    <url>/2020/01/12/leetcode-000-overview/</url>
    <content><![CDATA[<ul>
<li>记录LeetCode题目笔记，汇总LeetCode解答记录</li>
</ul>
<a id="more"></a>


<h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><ul>
<li>2019/02/13，撰写</li>
<li>2019/06/16，添加 LeetCode Notes-1</li>
<li>2020/01/05，添加 LeetCode Notes-2</li>
<li>2020/02/22，添加 LeetCode Notes-3</li>
<li>2020/02/23，添加 LeetCode Notes-4</li>
<li>2020/02/28，添加 LeetCode Notes-5</li>
<li>2020/05/14，添加 LeetCode Notes-6</li>
</ul>
<h2 id="学习资料汇总"><a href="#学习资料汇总" class="headerlink" title="学习资料汇总"></a>学习资料汇总</h2><ul>
<li><a href="https://leetcode.com/" target="_blank" rel="noopener">leetcode</a></li>
<li><a href="https://leetcode-cn.com/" target="_blank" rel="noopener">leetcode-cn</a></li>
<li><a href="https://www.nowcoder.com/" target="_blank" rel="noopener">牛客网</a></li>
<li><a href="http://git.jd.com/algorithm-interest-group/AlgorithmShare" target="_blank" rel="noopener">AlgorithmShare @ JD</a></li>
<li><a href="https://github.com/MisterBooo/LeetCodeAnimation" target="_blank" rel="noopener">LeetCodeAnimation</a></li>
<li><a href="https://github.com/azl397985856/leetcode" target="_blank" rel="noopener">Leetcode Solution | github</a></li>
<li><a href="https://github.com/labuladong/fucking-algorithm" target="_blank" rel="noopener">fucking-algorithm | LeetCode</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/106739847" target="_blank" rel="noopener">看阿里大佬们是如何刷《剑指 offer》的？ | 知乎</a></li>
<li><a href="https://leetcode-cn.com/problemset/lcof/" target="_blank" rel="noopener">剑指offer | LeetCode题库</a></li>
<li><a href="https://leetcode-cn.com/problemset/lcci/" target="_blank" rel="noopener">程序员面试经典（第6版） | LeetCode题库</a></li>
</ul>
<h2 id="题解记录模板"><a href="#题解记录模板" class="headerlink" title="题解记录模板"></a>题解记录模板</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">## XXX（xxx）</span></span><br><span class="line"><span class="comment">### Description</span></span><br><span class="line">* [LeetCode-XX. XXX（xxx）]()</span><br><span class="line"></span><br><span class="line"><span class="comment">### Approach 1-XX</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Analysis</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Solution</span></span><br><span class="line"></span><br><span class="line">* Java</span><br><span class="line">* C++</span><br><span class="line">* Python</span><br><span class="line">* JS</span><br></pre></td></tr></table></figure>

<h2 id="分类汇总"><a href="#分类汇总" class="headerlink" title="分类汇总"></a>分类汇总</h2><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><ul>
<li><a href="https://leetcode.com/problems/linked-list-cycle/?tab=Description" target="_blank" rel="noopener">LeetCode-141. Linked List Cycle（环形链表）</a> - 环形链表</li>
<li><a href="https://leetcode.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">LeetCode-142. Linked List Cycle II（环形链表 II）</a> - 环形链表</li>
</ul>
<h3 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h3><ul>
<li><a href="https://leetcode.com/problems/linked-list-cycle/?tab=Description" target="_blank" rel="noopener">LeetCode- 141. Linked List Cycle</a> - 环形链表</li>
<li><a href="https://leetcode.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">LeetCode- 142. Linked List Cycle II</a> - 环形链表</li>
</ul>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul>
<li><a href="https://leetcode.com/problems/island-perimeter/?tab=Description" target="_blank" rel="noopener">LeetCode-463. Island Perimeter（岛屿的周长）</a> - 常规计算</li>
</ul>
<h3 id="PopCount（汉明距离）"><a href="#PopCount（汉明距离）" class="headerlink" title="PopCount（汉明距离）"></a>PopCount（汉明距离）</h3><ul>
<li><a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="noopener">LeetCode-191. Number of 1 Bits （位1的个数）</a></li>
<li><a href="https://leetcode.com/problems/counting-bits/" target="_blank" rel="noopener">LeetCode-338. Counting Bits（比特位计数）</a></li>
</ul>
<h3 id="回文串"><a href="#回文串" class="headerlink" title="回文串"></a>回文串</h3><ul>
<li><a href="https://leetcode.com/problems/longest-palindrome/" target="_blank" rel="noopener">LeetCode-409. Longest Palindrome （最长回文串）</a></li>
</ul>
<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><ul>
<li><a href="https://leetcode.com/problems/counting-bits/" target="_blank" rel="noopener">LeetCode-338. Counting Bits（比特位计数）</a></li>
</ul>
<h2 id="文档目录"><a href="#文档目录" class="headerlink" title="文档目录"></a>文档目录</h2><h3 id="Notes-1"><a href="#Notes-1" class="headerlink" title="Notes-1"></a>Notes-1</h3><ul>
<li><a href="https://leetcode.com/problems/linked-list-cycle/?tab=Description" target="_blank" rel="noopener">LeetCode-141. Linked List Cycle（环形链表）</a> - 环形链表</li>
<li><a href="https://leetcode.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">LeetCode-142. Linked List Cycle II（环形链表 II）</a> - 环形链表</li>
<li><a href="https://leetcode.com/problems/add-digits/?tab=Description" target="_blank" rel="noopener">LeetCode-258. Add Digits（各位相加）</a> - 数字推导（数字根）</li>
<li><a href="https://leetcode.com/problems/hamming-distance/" target="_blank" rel="noopener">LeetCode-461. Hamming Distance（汉明距离）</a> - 位运算</li>
<li><a href="https://leetcode.com/problems/island-perimeter/?tab=Description" target="_blank" rel="noopener">LeetCode-463. Island Perimeter（岛屿的周长）</a> - 常规计算</li>
</ul>
<h3 id="Notes-2"><a href="#Notes-2" class="headerlink" title="Notes-2"></a>Notes-2</h3><ul>
<li><a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="noopener">LeetCode-206. Reverse Linked List（反转链表）</a> - 链表操作</li>
<li><a href="https://leetcode.com/problems/merge-two-binary-trees/" target="_blank" rel="noopener">LeetCode-617. Merge Two Binary Trees</a> - 二叉树</li>
<li><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">LeetCode-104. Maximum Depth of Binary Tree（二叉树的最大深度）</a> - 遍历二叉树</li>
<li><a href="https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/" target="_blank" rel="noopener">LeetCode-1290. Convert Binary Number in a Linked List to Integer（二进制链表转整数）</a></li>
<li><a href="https://leetcode.com/problems/to-lower-case/" target="_blank" rel="noopener">LeetCode-709. To Lower Case（转换成小写字母）</a></li>
</ul>
<h3 id="Notes-3"><a href="#Notes-3" class="headerlink" title="Notes-3"></a>Notes-3</h3><ul>
<li><a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="noopener">LeetCode-191. Number of 1 Bits （位1的个数）</a></li>
<li><a href="https://leetcode.com/problems/counting-bits/" target="_blank" rel="noopener">LeetCode-338. Counting Bits（比特位计数）</a></li>
<li><a href="https://leetcode.com/problems/longest-palindrome/" target="_blank" rel="noopener">LeetCode-409. Longest Palindrome （最长回文串）</a></li>
<li><a href="https://leetcode.com/problems/rectangle-area/?tab=Description" target="_blank" rel="noopener">LeetCode-223. Rectangle Area（矩形面积）</a></li>
<li><a href="https://leetcode.com/problems/number-complement/" target="_blank" rel="noopener">LeetCode-476. Number Complement（数字的补数）</a></li>
</ul>
<h3 id="Notes-4"><a href="#Notes-4" class="headerlink" title="Notes-4"></a>Notes-4</h3><ul>
<li><a href="https://leetcode.com/problems/number-of-steps-to-reduce-a-number-to-zero/" target="_blank" rel="noopener">LeetCode-1342. Number of Steps to Reduce a Number to Zero（将数字变成 0 的操作次数）</a></li>
<li><a href="https://leetcode-cn.com/problems/subtract-the-product-and-sum-of-digits-of-an-integer/" target="_blank" rel="noopener">LeetCode-1281. 整数的各位积和之差</a></li>
<li><a href="https://leetcode-cn.com/problems/power-of-three/" target="_blank" rel="noopener">LeetCode-326. 3的幂</a></li>
<li><a href="https://leetcode-cn.com/problems/power-of-two/" target="_blank" rel="noopener">LeetCode-231. 2的幂</a></li>
<li><a href="https://leetcode-cn.com/problems/power-of-four/" target="_blank" rel="noopener">LeetCode-342. 4的幂</a></li>
</ul>
<h3 id="Notes-5"><a href="#Notes-5" class="headerlink" title="Notes-5"></a>Notes-5</h3><ul>
<li><a href="https://leetcode-cn.com/problems/sum-of-two-integers/" target="_blank" rel="noopener">LeetCode-371. 两整数之和</a></li>
<li><a href="https://leetcode-cn.com/problems/detect-capital/" target="_blank" rel="noopener">LeetCode-520. 检测大写字母</a></li>
<li><a href="https://leetcode-cn.com/problems/nim-game/" target="_blank" rel="noopener">LeetCode-292. Nim 游戏</a></li>
<li><a href="https://leetcode-cn.com/problems/rising-temperature/" target="_blank" rel="noopener">LeetCode-197. 上升的温度</a></li>
<li><a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">LeetCode-136. 只出现一次的数字</a></li>
</ul>
<h3 id="Notes-6"><a href="#Notes-6" class="headerlink" title="Notes-6"></a>Notes-6</h3><ul>
<li><a href="https://leetcode-cn.com/problems/reverse-string/" target="_blank" rel="noopener">LeetCode-344. 反转字符串</a></li>
<li><a href="https://leetcode-cn.com/problems/count-primes/" target="_blank" rel="noopener">LeetCode-204.Count Primes</a></li>
<li><a href="https://leetcode-cn.com/problems/relative-ranks/" target="_blank" rel="noopener">LeetCode-506. 相对名次</a></li>
<li><a href="https://leetcode-cn.com/problems/rotate-list/" target="_blank" rel="noopener">LeetCode-61. 旋转链表</a></li>
<li><a href="https://leetcode-cn.com/problems/create-target-array-in-the-given-order/" target="_blank" rel="noopener">LeetCode-1389. 按既定顺序创建目标数组</a></li>
</ul>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native 实现下拉自动切换分类</title>
    <url>/2019/06/08/rn-tab-auto-change/</url>
    <content><![CDATA[<ul>
<li>记录 <code>React Native</code> 中如何实现下拉自动切换分类</li>
<li>针对 IOS 和 Android 平台差异，给出不同的切换分类触发条件</li>
</ul>
<a id="more"></a>

<h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2><p>如图所示，整体为 <code>FlatList</code>，顶部分类栏吸顶，底部为 <code>feed</code> 流。要实现下拉商品列表到底后，继续下拉，自动切换到一下个分类的效果。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/front-end-2019/rn-flatlist-autochange-tab-android.png" alt="rn-flatlist-autochange-tab-android"></p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>代码层面，可以在  <code>FlatList</code> 的 <code>onScrollEndDrag</code> 中添加自动 Tab 切换函数，借助 <code>FlatList</code> 实例的内容区高度 <code>contentLength</code>，滑动偏移量 <code>offset</code> 和可视区高度 <code>visibleLength</code> 三者关系，实现下拉自动切换Tab功能。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="IOS-平台实现"><a href="#IOS-平台实现" class="headerlink" title="IOS 平台实现"></a>IOS 平台实现</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//页面布局相关</span></span><br><span class="line"> &lt;FlatList</span><br><span class="line">    <span class="keyword">data</span> = &#123;[&#123;banner:[]&#125;,&#123;tab:[]&#125;,&#123;goodList:[]&#125;]&#125;</span><br><span class="line">    renderItem=&#123;<span class="keyword">this</span>.renderItem&#125;</span><br><span class="line">    stickyHeaderIndices=&#123;(Platform.OS !== <span class="string">'web'</span>)?[<span class="number">1</span>]:<span class="literal">null</span>&#125;</span><br><span class="line">    ListFooterComponent=&#123;<span class="keyword">this</span>._renderFooter&#125;</span><br><span class="line">    onScroll=&#123;<span class="keyword">this</span>._onScroll&#125; <span class="comment">//滑动监听</span></span><br><span class="line">    ref=&#123;<span class="keyword">this</span>._setScrollRef&#125;</span><br><span class="line">    keyExtractor = &#123;(item, index) =&gt; &#123; `hScrollView-$&#123;index&#125;` &#125;&#125;</span><br><span class="line">    refreshing=&#123;<span class="keyword">this</span>.state.isRefreshing&#125;</span><br><span class="line">    onRefresh=&#123;<span class="keyword">this</span>._onRefresh.bind(<span class="keyword">this</span>)&#125; <span class="comment">//下拉刷新</span></span><br><span class="line">    getItemLayout=&#123;(<span class="keyword">data</span>, index) =&gt; (</span><br><span class="line">        &#123;length: <span class="number">305</span>, offset: <span class="number">305</span> * index, index&#125;</span><br><span class="line">    )&#125;</span><br><span class="line">    onScrollEndDrag = &#123;()=&gt;&#123;  <span class="comment">//滑动到底监听函数</span></span><br><span class="line">        <span class="keyword">if</span>(Platform.OS != <span class="string">'web'</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>._onScrollEndDragFun();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取flatList 实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ref</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@private</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">_setScrollRef = (ref) =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>._secondGoodFlatListRef = ref;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> isEmpty <span class="keyword">from</span> <span class="string">"lodash/isEmpty"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Platform&#125; <span class="keyword">from</span> <span class="string">"react-native"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;JDDevice&#125; <span class="keyword">from</span> <span class="string">"@jdreact/jdreact-core-lib"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 底部列表页滑动事件 实现上拉切换品类功能</span></span><br><span class="line"><span class="comment"> * @param e</span></span><br><span class="line"><span class="comment"> * @private</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">_onScrollEndDragFun = (e) =&gt; &#123;</span><br><span class="line">    let scrollMetrics = (<span class="keyword">this</span>._secondGoodFlatListRef &amp;&amp; <span class="keyword">this</span>._secondGoodFlatListRef._listRef</span><br><span class="line">        &amp;&amp; <span class="keyword">this</span>._secondGoodFlatListRef._listRef._scrollMetrics) || <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    let &#123;contentLength = <span class="number">0</span>, offset = <span class="number">0</span>, visibleLength = <span class="number">0</span>&#125; = scrollMetrics;</span><br><span class="line">    <span class="comment">// console.log('===scrollMetrics',scrollMetrics);</span></span><br><span class="line">    <span class="comment">// //判断是否最后一Tab 如果是就不却换下个目录</span></span><br><span class="line">    <span class="comment">// console.log('===this.props',this.props);</span></span><br><span class="line">    <span class="comment">// console.log('===this.state',this.state);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (contentLength &amp;&amp; offset &amp;&amp; visibleLength) &#123;</span><br><span class="line">        let &#123;selectedIndex = <span class="number">0</span>&#125; = <span class="keyword">this</span>.state; <span class="comment">//当前选中的三级分类index</span></span><br><span class="line">        let &#123;tabListData = []&#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isEmpty(tabListData) &amp;&amp; (selectedIndex + <span class="number">1</span>) &lt; tabListData.length) &#123;  <span class="comment">//排除最后一个分类</span></span><br><span class="line">            let item = tabListData[selectedIndex + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (Platform.OS === <span class="string">'ios'</span>) &#123;</span><br><span class="line">                <span class="comment">//IOS 系统存在弹性上拉</span></span><br><span class="line">                <span class="keyword">if</span> (offset + visibleLength &gt; contentLength + JDDevice.getRpx(<span class="number">100</span>)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>._secondGoodFlatListRef.scrollToIndex(&#123;</span><br><span class="line">                        animated: <span class="literal">false</span>,</span><br><span class="line">                        index: <span class="number">0</span>,</span><br><span class="line">                        viewOffset: <span class="number">1</span>,</span><br><span class="line">                        viewPosition: <span class="number">0</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">this</span>.ItemCategory._clickCategoryTab2 &amp;&amp; <span class="keyword">this</span>.ItemCategory._clickCategoryTab2(item, selectedIndex + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//android 无弹性滑动，滑动到底时，offset + visibleLength = contentLength。IOS有弹性滑动，需要改变判断条件  lbs 2019-03-10</span></span><br><span class="line">                <span class="keyword">if</span> (offset + visibleLength &gt; contentLength - JDDevice.getRpx(<span class="number">10</span>)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>._secondGoodFlatListRef.scrollToIndex(&#123;</span><br><span class="line">                        animated: <span class="literal">false</span>,</span><br><span class="line">                        index: <span class="number">0</span>,</span><br><span class="line">                        viewOffset: <span class="number">1</span>,</span><br><span class="line">                        viewPosition: <span class="number">0</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">this</span>.ItemCategory._clickCategoryTab2 &amp;&amp; <span class="keyword">this</span>.ItemCategory._clickCategoryTab2(item, selectedIndex + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p><strong>其中，<code>contentLength</code> 为内容区高度，<code>offset</code> 为滑动偏移量，<code>visibleLength</code> 为可视区高度。</strong></p>
<blockquote>
<p>关于<span id="inline-purple">三种高度定义</span>，可参考 <a href="https://www.jianshu.com/p/33ec6ceeb638" target="_blank" rel="noopener">React Native中ListView和ScrollView实现上拉加载</a></p>
</blockquote>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> scrollMetrics = (this._secondGoodFlatListRef<span class="operator"> &amp;&amp; </span>this.<span class="module-access"><span class="module"><span class="identifier">_secondGoodFlatListRef</span>.</span><span class="module"><span class="identifier">_listRef</span></span></span></span><br><span class="line"><span class="module-access"><span class="module"> </span></span><span class="operator">       &amp;&amp; </span>this.<span class="module-access"><span class="module"><span class="identifier">_secondGoodFlatListRef</span>.</span><span class="module"><span class="identifier">_listRef</span>.</span><span class="module"><span class="identifier">_scrollMetrics</span>)</span></span><span class="operator"> || </span>null;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    contentLength = <span class="number">0</span>,  <span class="comment">// 内容区高度</span></span><br><span class="line">    offset = <span class="number">0</span>,         <span class="comment">// 滑动偏移量</span></span><br><span class="line">    visibleLength = <span class="number">0</span>   <span class="comment">// 可视区高度</span></span><br><span class="line">&#125; = scrollMetrics;</span><br></pre></td></tr></table></figure>


<h3 id="Android-平台实现"><a href="#Android-平台实现" class="headerlink" title="Android 平台实现"></a>Android 平台实现</h3><p>对于 Android 平台，当 <code>offset + visibleLength = contentLength</code> 时，表示滑动到底部。为了以前进行切换，对条件进行修正，当滑动到距离底部 10px 时，触发切换 Tab 函数，如下代码所示</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//android 无弹性滑动，滑动到底时，offset + visibleLength = contentLength。IOS有弹性滑动，需要改变判断条件  lbs 2019-03-10</span></span><br><span class="line"><span class="keyword">if</span> (offset + visibleLength &gt; contentLength - JDDevice.getRpx(<span class="number">10</span>)) &#123;</span><br><span class="line">    <span class="keyword">this</span>._secondGoodFlatListRef.scrollToIndex(&#123;</span><br><span class="line">        animated: <span class="literal">false</span>,</span><br><span class="line">        index: <span class="number">0</span>, </span><br><span class="line">        viewOffset: <span class="number">1</span>,</span><br><span class="line">        viewPosition: <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//切换Tab</span></span><br><span class="line">    <span class="keyword">this</span>.ItemCategory._clickCategoryTab2 &amp;&amp; <span class="keyword">this</span>.ItemCategory._clickCategoryTab2(item, selectedIndex + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于 IOS 平台，因为 IOS 系统存在弹性上拉，如下图所示。因此对滑动到底条件修正为  <code>offset + visibleLength &gt; contentLength + JDDevice.getRpx(100)</code>。</p>
<p>其中，<code>JDDevice.getRpx(100)</code> 表示弹性上拉的高度，即下图中红色框的高度。</p>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/front-end-2019/rn-flatlist-autochange-tab-ios.png" alt="rn-flatlist-autochange-tab-ios"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Platform.OS === <span class="string">'ios'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (offset + visibleLength &gt; contentLength + JDDevice.getRpx(<span class="number">100</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>._secondGoodFlatListRef.scrollToIndex(&#123;</span><br><span class="line">            animated: <span class="literal">false</span>,</span><br><span class="line">            index: <span class="number">0</span>,</span><br><span class="line">            viewOffset: <span class="number">1</span>,</span><br><span class="line">            viewPosition: <span class="number">0</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.ItemCategory._clickCategoryTab2 &amp;&amp; <span class="keyword">this</span>.ItemCategory._clickCategoryTab2(item, selectedIndex + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>JS模块化——CommonJS AMD CMD ES6 Module</title>
    <url>/2019/03/28/js-module-introduce/</url>
    <content><![CDATA[<ul>
<li>对 JS 常见的模块化方案进行介绍和比较——<code>CommonJS</code> <code>AMD</code> <code>CMD</code> <code>ES6 Module</code></li>
<li>对 <code>ES6 Module</code> 和 <code>CommonJS</code> 的差异进行对比，介绍循环依赖和动态 <code>import()</code></li>
</ul>
<a id="more"></a>



<h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul>
<li>2018/05/08，撰写</li>
<li>2019/03/27，内容整理</li>
<li>2019/04/01，动态 <code>import()</code> 和博文发表</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://segmentfault.com/a/1190000004873947" target="_blank" rel="noopener">AMD, CMD, CommonJS和UMD | Segmentfault</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/41231046" target="_blank" rel="noopener">JS模块化加载之CommonJS、AMD、CMD、ES6</a></li>
<li><a href="http://es6.ruanyifeng.com/#docs/module-loader" target="_blank" rel="noopener">ES6 module的加载和实现 | 阮一峰</a></li>
<li><a href="https://div.io/topic/1078" target="_blank" rel="noopener">前端模块化开发方案小对比</a></li>
</ul>
<h2 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>模块化开发中，通常一个文件就是一个模块，有自己的作用域，只向外暴露特定的变量和函数，并且可以按需加载。</li>
<li>依赖自动加载，按需加载。</li>
<li>提高代码复用率，方便进行代码的管理，使得代码管理更加清晰、规范。</li>
<li>减少了命名冲突，消除全局变量。</li>
<li>目前流行的js模块化规范有CommonJS、AMD、CMD以及ES6的模块系统</li>
</ul>
<h3 id="常见模块化规范"><a href="#常见模块化规范" class="headerlink" title="常见模块化规范"></a>常见模块化规范</h3><ul>
<li>CommonJs (Node.js)</li>
<li>AMD (RequireJS)</li>
<li>CMD (SeaJS)</li>
</ul>
<h2 id="CommonJS-Node-js"><a href="#CommonJS-Node-js" class="headerlink" title="CommonJS(Node.js)"></a>CommonJS(Node.js)</h2><p><strong>CommonJS是服务器模块的规范</strong>，Node.js采用了这个规范。</p>
<p>根据 <code>CommonJS</code> 规范，一个单独的文件就是一个模块，每一个模块都是一个单独的作用域，在一个文件定义的变量（还包括函数和类），<strong>都是私有的</strong>，对其他文件是不可见的。</p>
<p><strong>CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。</strong> </p>
<p><code>CommonJS</code> 中，加载模块使用 <code>require</code> 方法。该方法读取一个文件并执行，最后返回文件内部的 <code>exports</code> 对象。</p>
<blockquote>
<p><code>Node.js</code> 主要用于服务器编程，加载的模块文件一般都已经存在本地硬盘，加载起来较快，不用考虑异步加载的方式，所以 <code>CommonJS</code> 的同步加载模块规范是比较适用的。</p>
<p>但如果是浏览器环境，要从服务器加载模块，这是就必须采用异步模式。所以就有了 <code>AMD</code>，<code>CMD</code> 等解决方案。</p>
</blockquote>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line"><span class="keywords">var</span> <span class="symbol">x</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keywords">var</span> addX = function(value) &#123;</span><br><span class="line">  <span class="keywords">return</span> value + <span class="symbol">x</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports.<span class="symbol">x</span> = <span class="symbol">x</span>;</span><br><span class="line">module.exports.addX = addX;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以改写为如下</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  <span class="symbol">x</span>: <span class="symbol">x</span>,</span><br><span class="line">  addX: addX,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">let <span class="built_in">math</span> = <span class="built_in">require</span>(<span class="string">'./math.js'</span>);</span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'math.x'</span>,<span class="built_in">math</span>.x);</span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'math.addX'</span>, <span class="built_in">math</span>.addX(<span class="number">4</span>));</span><br></pre></td></tr></table></figure>

<h2 id="AMD-RequireJS-异步模块定义"><a href="#AMD-RequireJS-异步模块定义" class="headerlink" title="AMD (RequireJS) 异步模块定义"></a>AMD (RequireJS) 异步模块定义</h2><ul>
<li><code>AMD</code>  = <code>Asynchronous Module Definition</code>，即 <em>异步模块定义</em>。</li>
<li><strong><code>AMD</code> 规范加载模块是异步的，并允许函数回调，不必等到所有模块都加载完成，后续操作可以正常执行。</strong></li>
<li><code>AMD</code> 中，使用 <code>require</code> 获取依赖模块，使用 <code>exports</code> 导出 <code>API</code>。</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//规范 API</span></span><br><span class="line">define(id?, dependencies?, factory);</span><br><span class="line">define.amd = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义无依赖的模块</span></span><br><span class="line">define(&#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span><span class="params">(x,y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义有依赖的模块</span></span><br><span class="line">define([<span class="string">"alpha"</span>], <span class="function"><span class="keyword">function</span><span class="params">(alpha)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        verb: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> alpha.verb() + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h3 id="异步加载和回调"><a href="#异步加载和回调" class="headerlink" title="异步加载和回调"></a>异步加载和回调</h3><blockquote>
<p><strong>require([module], callback)</strong> 中 <code>callback</code> 为模块加载完成后的回调函数</p>
</blockquote>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">//加载 <span class="built_in">math</span>模块，完成之后执行回调函数</span><br><span class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span><span class="params">(math)</span></span> &#123;</span><br><span class="line">　<span class="built_in">math</span>.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="RequireJS"><a href="#RequireJS" class="headerlink" title="RequireJS"></a>RequireJS</h3><p><code>RequireJS</code> 是一个前端模块化管理的工具库，遵循 <code>AMD</code> 规范，<code>RequireJS</code> 是对 <code>AMD</code> 规范的阐述。</p>
<p><code>RequireJS</code> 基本思想为，通过一个函数来将所有所需的或者所依赖的模块装载进来，然后返回一个新的函数（模块）。后续所有的关于新模块的业务代码都在这个函数内部操作。</p>
<p><code>RequireJS</code> 要求每个模块均放在独立的文件之中，并使用 <code>define</code> 定义模块，使用 <code>require</code> 方法调用模块。</p>
<p>按照是否有依赖其他模块情况，可以分为 <em>独立模块</em> 和 <em>非独立模块</em>。</p>
<ul>
<li>独立模块，不依赖其他模块，直接定义</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">define(&#123;</span><br><span class="line">    method1: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;,</span><br><span class="line">    method2: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        method1: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;,</span><br><span class="line">        method2: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>非独立模块，依赖其他模块</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define([ <span class="string">'module1'</span>, <span class="string">'module2'</span> ], <span class="function"><span class="keyword">function</span>(<span class="params">m1, m2</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> m1 = <span class="built_in">require</span>(<span class="string">'module1'</span>);</span><br><span class="line">    <span class="keyword">var</span> m2 = <span class="built_in">require</span>(<span class="string">'module2'</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<ul>
<li><code>require</code> 方法调用模块</li>
</ul>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">require(['foo', 'bar'], function(<span class="name">foo</span>, bar) &#123;</span><br><span class="line">    foo.func()<span class="comment">;</span></span><br><span class="line">    bar.func()<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure>


<h2 id="CMD-SeaJS"><a href="#CMD-SeaJS" class="headerlink" title="CMD (SeaJS)"></a>CMD (SeaJS)</h2><p><code>CMD</code>  = <code>Common Module Definition</code>，即 <em>通用模块定义</em>。<code>CMD</code> 是 <code>SeaJS</code> 在推广过程中对模块定义的规范化产出。</p>
<p>CMD规范和AMD类似，都主要运行于浏览器端，写法上看起来也很类似。主要是区别在于 <strong>模块初始化时机</strong></p>
<ul>
<li><strong>AMD中只要模块作为依赖时，就会加载并初始化</strong></li>
<li><strong>CMD中，模块作为依赖且被引用时才会初始化，否则只会加载。</strong></li>
<li><code>CMD</code> 推崇依赖就近，<code>AMD</code> 推崇依赖前置。</li>
<li><code>AMD</code> 的 <code>API</code> 默认是一个当多个用，<code>CMD</code> 严格的区分推崇职责单一。例如，<code>AMD</code> 里 <code>require</code> 分全局的和局部的。CMD里面没有全局的 <code>require</code>，提供 <code>seajs.use()</code> 来实现模块系统的加载启动。<code>CMD</code> 里每个 <code>API</code> 都简单纯粹。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AMD</span></span><br><span class="line">define([<span class="string">'./a'</span>,<span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//依赖一开始就写好</span></span><br><span class="line">    a.test();</span><br><span class="line">    b.test();</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//CMD</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">requie, exports, module</span>) </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//依赖可以就近书写</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line">    a.test();</span><br><span class="line">     </span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//软依赖</span></span><br><span class="line">    <span class="keyword">if</span> (status) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = requie(<span class="string">'./b'</span>);</span><br><span class="line">        b.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>








<h3 id="Sea-js"><a href="#Sea-js" class="headerlink" title="Sea.js"></a>Sea.js</h3><ul>
<li><a href="https://github.com/seajs/seajs" target="_blank" rel="noopener">Sea.js Github Page</a></li>
<li><a href="https://www.douban.com/note/283566440/" target="_blank" rel="noopener">SeaJS与RequireJS最大的区别</a></li>
</ul>
<p>使用Sea.js，在书写文件时，需要遵守CMD（Common Module Definition）模块定义规范。一个文件就是一个模块。</p>
<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul>
<li>通过 <code>exports</code> 暴露接口。这意味着不需要命名空间了，更不需要全局变量。这是一种彻底的命名冲突解决方案。</li>
<li>通过 <code>require</code> 引入依赖。这可以让依赖内置，开发者只需关心当前模块的依赖，其他事情 <code>Sea.js</code> 都会自动处理好。对模块开发者来说，这是一种很好的 关注度分离，能让程序员更多地享受编码的乐趣。</li>
<li>通过 <code>define</code> 定义模块，更多详情参考<a href="http://wiki.jikexueyuan.com/project/hello-seajs/usage-guide.html" target="_blank" rel="noopener">SeasJS | 极客学院</a>。</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>例如，对于下述<code>util.js</code>代码</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">var org = &#123;&#125;;</span><br><span class="line">org.CoolSite = &#123;&#125;;</span><br><span class="line">org.CoolSite.Utils = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">org.<span class="module-access"><span class="module"><span class="identifier">CoolSite</span>.</span><span class="module"><span class="identifier">Utils</span>.</span></span>each = <span class="keyword">function</span> (arr) &#123;</span><br><span class="line">  <span class="comment">// 实现代码</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">org.<span class="module-access"><span class="module"><span class="identifier">CoolSite</span>.</span><span class="module"><span class="identifier">Utils</span>.</span></span>log = <span class="keyword">function</span> (str) &#123;</span><br><span class="line">  <span class="comment">// 实现代码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可以采用SeaJS重写为</p>
<figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">define(<span class="function"><span class="keyword">function</span><span class="params">(require, exports)</span> &#123;</span></span><br><span class="line">  exports.each = <span class="function"><span class="keyword">function</span> <span class="params">(arr)</span> &#123;</span></span><br><span class="line">    <span class="comment">// 实现代码</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  exports.<span class="built_in">log</span> = <span class="function"><span class="keyword">function</span> <span class="params">(str)</span> &#123;</span></span><br><span class="line">    <span class="comment">// 实现代码</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>通过 <code>exports</code> 就可以向外提供接口。通过 <code>require(&#39;./util.js&#39;)</code> 就可以拿到 <code>util.js</code> 中通过 <code>exports</code> 暴露的接口。这里的 <code>require</code>  可以认为是 <code>Sea.js</code> 给 JavaScript 语言增加的一个语法关键字，<strong>通过 <code>require</code> 可以获取其他模块提供的接口。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'./util.js'</span>);</span><br><span class="line">  exports.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 实现代码</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="SeaJS与RequireJS区别"><a href="#SeaJS与RequireJS区别" class="headerlink" title="SeaJS与RequireJS区别"></a>SeaJS与RequireJS区别</h2><p>二者区别主要表现在<strong>模块初始化时机</strong></p>
<ul>
<li><strong>AMD（RequireJS）中只要模块作为依赖时，就会加载并初始化。即尽早地执行（依赖）模块。相当于所有的require都被提前了，而且模块执行的顺序也不一定100%就是require书写顺序。</strong></li>
<li><strong>CMD（SeaJS）中，模块作为依赖且被引用时才会初始化，否则只会加载。即只会在模块真正需要使用的时候才初始化。模块加载的顺序是严格按照require书写的顺序。</strong></li>
</ul>
<p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/front-end-2019/amd-cmd-nodek.png" alt="amd-cmd-nodek"></p>
<p>从规范上来说，AMD 更加简单且严谨，适用性更广，而在RequireJS强力的推动下，在国外几乎成了事实上的异步模块标准，各大类库也相继支持AMD规范。</p>
<p>但从SeaJS与CMD来说，也做了很多不错东西：1、相对自然的依赖声明风格 2、小而美的内部实现 3、贴心的外围功能设计 4、更好的中文社区支持。</p>
<h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><ul>
<li><code>UMD</code> = <code>Universal Module Definition</code>，即通用模块定义。<code>UMD</code> 是<code>AMD</code> 和 <code>CommonJS</code>的糅合。</li>
</ul>
<blockquote>
<p><code>AMD</code> 模块以浏览器第一的原则发展，异步加载模块。<br><code>CommonJS</code> 模块以服务器第一原则发展，选择同步加载。它的模块无需包装(unwrapped modules)。<br>这迫使人们又想出另一个更通用的模式 <code>UMD</code>（Universal Module Definition)，实现跨平台的解决方案。</p>
</blockquote>
<ul>
<li><code>UMD</code> 先判断是否支持 <code>Node.js</code> 的模块（<code>exports</code>）是否存在，存在则使用 <code>Node.js</code> 模块模式。再判断是否支持 <code>AMD</code>（<code>define</code> 是否存在），存在则使用 <code>AMD</code> 方式加载模块。</li>
</ul>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">(<span class="name">function</span> (<span class="name">window</span>, factory) &#123;</span><br><span class="line">    if (<span class="name">typeof</span> exports === 'object') &#123;</span><br><span class="line">     </span><br><span class="line">        module.exports = factory()<span class="comment">;</span></span><br><span class="line">    &#125; else if (<span class="name">typeof</span> define === 'function' &amp;&amp; define.amd) &#123;</span><br><span class="line">     </span><br><span class="line">        define(<span class="name">factory</span>)<span class="comment">;</span></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">     </span><br><span class="line">        window.eventUtil = factory()<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="name">this</span>, function () &#123;</span><br><span class="line">    //module ...</span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure>


<h2 id="ES6-模块"><a href="#ES6-模块" class="headerlink" title="ES6 模块"></a>ES6 模块</h2><h3 id="ES6模块和CommonJS区别"><a href="#ES6模块和CommonJS区别" class="headerlink" title="ES6模块和CommonJS区别"></a>ES6模块和CommonJS区别</h3><ul>
<li><strong>ES6 模块输出的是值的引用，输出接口动态绑定，而 <code>CommonJS</code> 输出的是值的拷贝。</strong></li>
<li><strong><code>CommonJS</code> 模块是运行时加载，ES6 模块是编译时输出接口。</strong></li>
</ul>
<h4 id="CommonJS-输出值的拷贝"><a href="#CommonJS-输出值的拷贝" class="headerlink" title="CommonJS 输出值的拷贝"></a>CommonJS 输出值的拷贝</h4><p><strong>CommonJS 模块输出的是值的拷贝（类比于基本类型和引用类型的赋值操作）。对于基本类型，一旦输出，模块内部的变化影响不到这个值。对于引用类型，效果同引用类型的赋值操作。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'David'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    counter++;</span><br><span class="line">    obj.name = <span class="string">'Peter'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    counter: counter,</span><br><span class="line">    obj: obj,</span><br><span class="line">    changeValue: changeValue,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">var <span class="built_in">mod</span> = require(<span class="string">'./lib'</span>);</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">mod</span>.counter);  <span class="comment">// 3</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">mod</span>.obj.<span class="built_in">name</span>);  <span class="comment">//  'David'</span></span><br><span class="line"><span class="built_in">mod</span>.changeValue();</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">mod</span>.counter);  <span class="comment">// 3</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">mod</span>.obj.<span class="built_in">name</span>);  <span class="comment">//  'Peter'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Or</span></span><br><span class="line">console.<span class="built_in">log</span>(require(<span class="string">'./lib'</span>).counter);  <span class="comment">// 3</span></span><br><span class="line">console.<span class="built_in">log</span>(require(<span class="string">'./lib'</span>).obj.<span class="built_in">name</span>);  <span class="comment">//  'Peter'</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>counter</code> 是基本类型值，模块内部值的变化不影响输出的值变化。</li>
<li><code>obj</code> 是引用类型值，模块内部值的变化影响输出的值变化。</li>
<li>上述两点区别，类比于基本类型和引用类型的赋值操作。</li>
</ul>
<p>也可以借助取值函数（<code>getter</code>），将 <code>counter</code> 转为引用类型值，效果如下。</p>
<blockquote>
<p>在类的内部，可以使用 <code>get</code> 和 <code>set</code> 关键字，对某个属性设置存执函数和取值函数，拦截该属性的存取行为。 —— <a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noopener">class | 阮一峰</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="keyword">get</span> counter() &#123;</span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line">  &#125;,</span><br><span class="line">  incCounter: incCounter,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">var <span class="built-in">mod</span> = require(<span class="string">'./lib'</span>);</span><br><span class="line"></span><br><span class="line">console.<span class="built-in">log</span>(<span class="built-in">mod</span>.counter);  <span class="comment">// 3</span></span><br><span class="line"><span class="built-in">mod</span>.incCounter();</span><br><span class="line">console.<span class="built-in">log</span>(<span class="built-in">mod</span>.counter); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>




<h4 id="ES6-输出值的引用"><a href="#ES6-输出值的引用" class="headerlink" title="ES6 输出值的引用"></a>ES6 输出值的引用</h4><p>ES6 模块是动态关联模块中的值，输出的是值得引用。<strong>原始值变了，<code>import</code> 加载的值也会跟着变。</strong></p>
<blockquote>
<p><code>ES6</code> 模块的运行机制与 <code>CommonJS</code> 不一样。JS 引擎对脚本静态分析时，遇到模块加载命令 <code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。<strong>ES6 模块中，原始值变了，<code>import</code> 加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值</strong>。  —— <a href="http://es6.ruanyifeng.com/#docs/module-loader" target="_blank" rel="noopener">ES6 Module 的加载实现 | 阮一峰</a></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; counter, incCounter &#125; <span class="keyword">from</span> <span class="string">'./lib'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 3</span></span><br><span class="line">incCounter();</span><br><span class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>


<h4 id="CommonJS-运行时加载-ES6静态编译"><a href="#CommonJS-运行时加载-ES6静态编译" class="headerlink" title="CommonJS 运行时加载 ES6静态编译"></a>CommonJS 运行时加载 ES6静态编译</h4><p><code>CommonJS</code> 模块是运行时加载，ES6 模块是编译时输出接口。</p>
<p>这是因为，<strong><code>CommonJS</code> 加载的是一个对象</strong>（即 <code>module.exports</code> 属性），该对象只有在脚本运行完才会生成。而 <strong><code>ES6</code> 模块不是对象</strong>，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p>
<p>ES6 模块是编译时输出接口，因此有如下2个特点</p>
<ul>
<li><code>import</code> 命令会被 JS 引擎静态分析，优先于模块内的其他内容执行</li>
<li><code>export</code> 命令会有变量声明提升的效果</li>
</ul>
<h5 id="import-优先执行"><a href="#import-优先执行" class="headerlink" title="import 优先执行"></a>import 优先执行</h5><p>在文件中的任何位置引入 <code>import</code> 模块都会被提前到文件顶部</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a.js'</span>)</span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">'./b'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b.js 先执行'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果:</span></span><br><span class="line"><span class="comment">// b.js 先执行</span></span><br><span class="line"><span class="comment">// a.js</span></span><br></pre></td></tr></table></figure>

<p>虽然 <code>a</code> 模块中 <code>import</code> 引入晚于 <code>console.log(&#39;a&#39;)</code>，但是它被 JS 引擎通过静态分析，提到模块执行的最前面，优于模块中的其他部分的执行。</p>
<h5 id="export-命令变量提升效果"><a href="#export-命令变量提升效果" class="headerlink" title="export 命令变量提升效果"></a>export 命令变量提升效果</h5><p>由于 <code>import</code> 和 <code>export</code> 是静态执行，所以 <code>import</code> 和 <code>export</code> 具有变量提升效果。即 <code>import</code> 和 <code>export</code> 命令在模块中的位置并不影响程序的输出。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">'./b'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a.js'</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bar = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bar2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bar2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">bar3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bar3'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> a <span class="keyword">from</span> <span class="string">'./a'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果:</span></span><br><span class="line"><span class="comment">// &#123; bar: undefined, bar2: undefined, bar3: [Function: bar3] &#125;</span></span><br><span class="line"><span class="comment">// a.js</span></span><br></pre></td></tr></table></figure>

<p><code>a</code> 模块引用了 <code>b</code> 模块，<code>b</code> 模块也引用了 <code>a</code> 模块，<code>export</code> 声明的变量也是优于模块其它内容的执行的。但具体对变量赋值需要等到执行到相应代码的时候。</p>
<h3 id="ES6模块和CommonJS相同点"><a href="#ES6模块和CommonJS相同点" class="headerlink" title="ES6模块和CommonJS相同点"></a>ES6模块和CommonJS相同点</h3><h4 id="模块不会重复执行"><a href="#模块不会重复执行" class="headerlink" title="模块不会重复执行"></a>模块不会重复执行</h4><p>重复引入某个相同的模块时，模块只会执行一次。</p>
<h3 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h3><h4 id="CommonJS-模块循环依赖"><a href="#CommonJS-模块循环依赖" class="headerlink" title="CommonJS 模块循环依赖"></a>CommonJS 模块循环依赖</h4><p>CommonJS 模块的重要特性是加载时执行，即脚本代码在 <code>require</code> 的时候，就会全部执行。一旦出现某个模块被“循环加载”，<strong>就只输出已经执行的部分，还未执行的部分不会输出。</strong></p>
<h5 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo 1"></a>Demo 1</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line">exports.done = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'在 a.js 之中，b.done = %j'</span>, b.done);</span><br><span class="line">exports.done = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a.js 执行完毕'</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码之中，<code>a.js</code> 脚本先输出一个 <code>done</code> 变量，然后加载另一个脚本文件 <code>b.js</code>。注意，此时 <code>a.js</code> 代码就停在这里，等待 <code>b.js</code> 执行完毕，再往下执行。</p>
<p>再看 <code>b.js</code> 的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//b.js</span></span><br><span class="line">exports.done = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'在 b.js 之中，a.done = %j'</span>, a.done);</span><br><span class="line">exports.done = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b.js 执行完毕'</span>);</span><br></pre></td></tr></table></figure>

<p>上面代码之中，<code>b.js</code> 执行到第二行，就会去加载 <code>a.js</code>，这时，就发生了“循环加载”。系统会 <code>a.js</code> 模块对应对象的 <code>exports</code> 属性取值，可是因为 <code>a.js</code> 还没有执行完，从 <code>exports</code> 属性只能取回已经执行的部分，而不是最后的值。</p>
<p><code>a.js</code> 已经执行的部分，只有一行。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">exports.done</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<p>因此，对于 <code>b.js</code>来说，它从 <code>a.js</code> 只输入一个变量 <code>done</code>，值为 <code>false</code>。</p>
<p>然后，<strong><code>b.js</code> 接着往下执行，等到全部执行完毕，再把执行权交还给 <code>a.js</code></strong>。于是，<code>a.js</code> 接着往下执行，直到执行完毕。我们写一个脚本 <code>main.js</code>，验证这个过程。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a.js'</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'在 main.js 之中, a.done=%j, b.done=%j'</span>, a.done, b.done);</span><br></pre></td></tr></table></figure>

<p>执行 <code>main.js</code>，运行结果如下。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">$ node main.js</span><br><span class="line"></span><br><span class="line">在 <span class="selector-tag">b</span><span class="selector-class">.js</span> 之中，<span class="selector-tag">a</span><span class="selector-class">.done</span> = false</span><br><span class="line"><span class="selector-tag">b</span><span class="selector-class">.js</span> 执行完毕</span><br><span class="line">在 <span class="selector-tag">a</span><span class="selector-class">.js</span> 之中，<span class="selector-tag">b</span><span class="selector-class">.done</span> = true</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.js</span> 执行完毕</span><br><span class="line">在 main<span class="selector-class">.js</span> 之中, <span class="selector-tag">a</span>.done=true, <span class="selector-tag">b</span>.done=true</span><br></pre></td></tr></table></figure>

<p>上面的代码证明了2点</p>
<ul>
<li>在 <code>b.js</code> 之中，<code>a.js</code> 没有执行完毕，只执行了第一行</li>
<li><code>main.js</code> 执行到第二行时，不会再次执行 <code>b.js</code>，而是输出缓存的 <code>b.js</code> 的执行结果，即它的第四行。</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">exports.done</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>总之，<strong>CommonJS 输入的是被输出值的拷贝，不是引用。</strong></p>
<p>另外，由于 CommonJS 模块遇到循环加载时，返回的是当前已经执行的部分的值，而不是代码全部执行后的值，两者可能会有差异。所以，输入变量的时候，必须非常小心。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>); <span class="comment">// 安全的写法 导入整体，保证module已经执行完成</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">'a'</span>).foo; <span class="comment">// 危险的写法</span></span><br><span class="line"></span><br><span class="line">exports.good = <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a.foo(<span class="string">'good'</span>, arg); <span class="comment">// 使用的是 a.foo 的最新值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.bad = <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> foo(<span class="string">'bad'</span>, arg); <span class="comment">// 使用的是一个部分加载时的值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码中，如果发生循环加载，<code>require(&#39;a&#39;).foo</code> 的值很可能后面会被改写，改用 <code>require(&#39;a&#39;)</code> 会更保险一点。</p>
<h5 id="Demo-2"><a href="#Demo-2" class="headerlink" title="Demo 2"></a>Demo 2</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a starting'</span>);</span><br><span class="line">exports.done = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'in a, b.done ='</span>, b.done);</span><br><span class="line">exports.done = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a done'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b starting'</span>);</span><br><span class="line">exports.done = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'in b, a.done ='</span>, a.done);</span><br><span class="line">exports.done = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b done'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// node a.js</span></span><br><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line"><span class="comment">// a starting</span></span><br><span class="line"><span class="comment">// b starting</span></span><br><span class="line"><span class="comment">// in b, a.done = false</span></span><br><span class="line"><span class="comment">// b done</span></span><br><span class="line"><span class="comment">// in a, b.done = true</span></span><br><span class="line"><span class="comment">// a done</span></span><br></pre></td></tr></table></figure>



<p>从上面的执行过程中，可以看到，在 CommonJS 规范中，当遇到 <code>require()</code> 语句时，会执行 <code>require</code> 模块中的代码，<strong>并缓存执行的结果，当下次再次加载时不会重复执行，而是直接取缓存的结果。正因为此，出现循环依赖时才不会出现无限循环调用的情况。</strong></p>
<h4 id="ES6-模块循环依赖"><a href="#ES6-模块循环依赖" class="headerlink" title="ES6 模块循环依赖"></a>ES6 模块循环依赖</h4><p><strong>跟 CommonJS 模块一样，ES6 不会再去执行重复加载的模块，又由于 ES6 动态输出绑定的特性，能保证 ES6 在任何时候都能获取其它模块当前的最新值。</strong></p>
<h3 id="动态-import"><a href="#动态-import" class="headerlink" title="动态 import()"></a>动态 import()</h3><p>ES6 模块在编译时就会静态分析，<strong>优先于模块内的其他内容执行</strong>，所以导致了我们无法写出像下面这样的代码</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">some</span> condition) &#123;</span><br><span class="line">  <span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">'./a'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> b <span class="keyword">from</span> <span class="string">'./b'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="keyword">or</span> </span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> (str + <span class="string">'b'</span>);</span><br></pre></td></tr></table></figure>

<p>因为编译时静态分析，导致了我们无法在条件语句或者拼接字符串模块，因为这些都是需要在运行时才能确定的结果在 ES6 模块是不被允许的，所以 动态引入<code>import()</code> 应运而生。</p>
<p><code>import()</code> 允许你在运行时动态地引入 ES6 模块，想到这，你可能也想起了 <code>require.ensure</code> 这个语法，但是它们的用途却截然不同的。</p>
<p><code>require.ensure</code> 的出现是 <code>webpack</code> 的产物，它是因为浏览器需要一种异步的机制可以用来异步加载模块，从而减少初始的加载文件的体积，所以如果在服务端的话， <code>require.ensure</code> 就无用武之地了，因为服务端不存在异步加载模块的情况，模块同步进行加载就可以满足使用场景了。 CommonJS 模块可以在运行时确认模块加载。</p>
<p>而 <code>import()</code> 则不同，它主要是为了解决 ES6 模块无法在运行时确定模块的引用关系，所以需要引入 <code>import()</code>。</p>
<p>先来看下它的用法</p>
<ul>
<li>动态的 <code>import()</code> 提供一个基于 <code>Promise</code> 的 <code>API</code></li>
<li>动态的 <code>import()</code> 可以在脚本的任何地方使用 <code>import()</code> 接受字符串文字，可以根据需要构造说明符</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'./b'</span>;</span><br><span class="line"><span class="keyword">const</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./b'</span>).then(<span class="function">(<span class="params">&#123;foo&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(foo);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span>(str).then(<span class="function">(<span class="params">&#123;foo&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo = <span class="string">'foo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// babel-node a.js</span></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"><span class="comment">// foo</span></span><br></pre></td></tr></table></figure>

<p>当然，如果在浏览器端的 <code>import()</code> 的用途就会变得更广泛，比如 按需异步加载模块，那么就和 <code>require.ensure</code> 功能类似了。</p>
<p>因为是基于 <code>Promise</code> 的，所以如果你想要同时加载多个模块的话，可以是 <code>Promise.all</code> 进行并行异步加载。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">Promise.all([</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./a.js'</span>),</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./b.js'</span>),</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./c.js'</span>),</span><br><span class="line">]).<span class="keyword">then</span>(<span class="function"><span class="params">([a, &#123;<span class="keyword">default</span>: b&#125;, &#123;c&#125;])</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a.js is loaded dynamically'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b.js is loaded dynamically'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c.js is loaded dynamically'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>还有 <code>Promise.race</code> 方法，它检查哪个 <code>Promise</code> 被首先 <code>resolved</code> 或 <code>reject</code>。我们可以使用 <code>import()</code> 来检查哪个 <code>CDN</code> 速度更快：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CDNs = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'jQuery.com'</span>,</span><br><span class="line">    url: <span class="string">'https://code.jquery.com/jquery-3.1.1.min.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'googleapis.com'</span>,</span><br><span class="line">    url: <span class="string">'https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`------`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`jQuery is: <span class="subst">$&#123;<span class="built_in">window</span>.jQuery&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([</span><br><span class="line">  <span class="keyword">import</span>(CDNs[<span class="number">0</span>].url).then(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(CDNs[<span class="number">0</span>].name, <span class="string">'loaded'</span>)),</span><br><span class="line">  <span class="keyword">import</span>(CDNs[<span class="number">1</span>].url).then(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(CDNs[<span class="number">1</span>].name, <span class="string">'loaded'</span>))</span><br><span class="line">]).then(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`jQuery version: <span class="subst">$&#123;<span class="built_in">window</span>.jQuery.fn.jquery&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>当然，如果你觉得这样写还不够优雅，也可以结合 <code>async/await</code> 语法糖来使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> myModule = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'./myModule.js'</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123;export1, export2&#125; = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'./myModule.js'</span>);</span><br><span class="line">  <span class="keyword">const</span> [module1, module2, module3] =</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">      <span class="keyword">import</span>(<span class="string">'./module1.js'</span>),</span><br><span class="line">      <span class="keyword">import</span>(<span class="string">'./module2.js'</span>),</span><br><span class="line">      <span class="keyword">import</span>(<span class="string">'./module3.js'</span>),</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动态 <code>import()</code> 为我们提供了以异步方式使用 ES 模块的额外功能。</p>
<p>根据我们的需求动态或有条件地加载它们，这使我们能够更快，更好地创建更多优势应用程序。</p>
<h2 id="webpack中加载3种模块-语法"><a href="#webpack中加载3种模块-语法" class="headerlink" title="webpack中加载3种模块 | 语法"></a>webpack中加载3种模块 | 语法</h2><p>Webpack允许使用不同的模块类型，但是<code>底层</code>必须使用同一种实现。所有的模块可以直接在盒外运行。</p>
<ul>
<li>ES6 模块</li>
</ul>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> MyModule <span class="keyword">from</span> <span class="string">'./MyModule.js'</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>CommonJS(Require)</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var MyModule</span> = require(<span class="string">'./MyModule.js'</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>AMD</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">define([<span class="string">'./MyModule.js'</span>], <span class="function"><span class="keyword">function</span> <span class="params">(MyModule)</span> </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Front-End Develop</category>
      </categories>
      <tags>
        <tag>Front-End Developer</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>HomePageImage</title>
    <url>/2018/09/12/home-page-img/</url>
    <content><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/Blog-20190315/my-riding-bike.jpg" alt="my-riding-bike"></div><div class="group-picture-column" style="width: 50%;"><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/Blog-20190315/football.jpg" alt="football"></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/Blog-20190315/sjtu-title-3.jpg" alt="sjtu-title-3"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/Blog-20190315/front-end-logo-1.jpg" alt="front-end-logo-1"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/Blog-20190315/java-c-vs.jpg" alt="java-c-vs123"></div></div></div></div>]]></content>
  </entry>
  <entry>
    <title>Hexo Blog 搭建与配置</title>
    <url>/2016/03/10/blog-configure/</url>
    <content><![CDATA[<ul>
<li>记录 <code>Hexo Blog</code> 的搭建与配置</li>
<li>对 <code>Next</code> 主题进行定制，添加搜索，统计，置顶，加密阅读，自定义CSS等</li>
</ul>
<a id="more"></a>




<h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><ul>
<li>2018/08/23，撰写</li>
<li>2018/09/04，整理</li>
<li>2018/09/25，添加 <code>Font Awesome</code>使用</li>
<li>2019/03/18，添加文章加密阅读</li>
<li>本博客全部配置信息可在 <a href="https://github.com/lbs0912/BlogSpace" target="_blank" rel="noopener">BlogSpace | lbs0912-github</a> 查看</li>
</ul>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><h3 id="Hexo-基础使用"><a href="#Hexo-基础使用" class="headerlink" title="Hexo 基础使用"></a>Hexo 基础使用</h3><ul>
<li><a href="https://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="noopener">使用GitHub和Hexo搭建免费静态Blog</a></li>
<li><a href="http://ehlxr.me/2016/08/30/%E4%BD%BF%E7%94%A8Hexo%E5%9F%BA%E4%BA%8EGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/" target="_blank" rel="noopener">使用Hexo基于GitHub-Pages搭建个人博客（三）</a></li>
</ul>
<h3 id="Blog-进阶管理"><a href="#Blog-进阶管理" class="headerlink" title="Blog 进阶管理"></a>Blog 进阶管理</h3><ul>
<li><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">Next Theme 官方配置手册</a></li>
<li><a href="http://feg.netease.com/archives/634.html" target="_blank" rel="noopener">如何更好地对hexo博客管理</a></li>
<li><a href="http://blog.junyu.io/posts/0010-hexo-learn-from-Never-yu.html#background" target="_blank" rel="noopener">Hexo 博客进阶配置</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/33616481" target="_blank" rel="noopener">Hexo搭建的GitHub博客之优化大全</a></li>
<li><a href="https://timding.top/2017/09/18/Hexo-NexT-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%86%8C-%E4%BA%8C/" target="_blank" rel="noopener">Next Theme 相册配置</a> </li>
<li><a href="https://juejin.im/post/5b8bc953518825284910dcdd" target="_blank" rel="noopener">搭建Hexo 相册</a></li>
</ul>
<h3 id="优质博客参考"><a href="#优质博客参考" class="headerlink" title="优质博客参考"></a>优质博客参考</h3><ul>
<li><a href="https://sunmengyuan.github.io/garden/" target="_blank" rel="noopener">Sunmengyuan Blog</a></li>
<li><a href="http://zhangwenli.com/" target="_blank" rel="noopener">羡辙 Blog</a></li>
<li><a href="https://www.byvoid.com/" target="_blank" rel="noopener">BYvoid</a></li>
</ul>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><blockquote>
<p>Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.   — <a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo</a></p>
</blockquote>
<p>参考 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo官网</a>了解Hexo更多信息。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span>hexo-cli -g</span><br><span class="line">mkdir <span class="keyword">Blog </span>&amp;&amp; cd <span class="keyword">Blog</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">hexo </span>init <span class="keyword">blog</span></span><br><span class="line"><span class="keyword">cd </span><span class="keyword">blog</span></span><br><span class="line"><span class="keyword">npm </span><span class="keyword">install</span></span><br><span class="line"><span class="keyword">hexo </span>server</span><br></pre></td></tr></table></figure>

<p>Hexo生成的目录结构如下</p>
<ul>
<li><code>.deploy</code> :  需要部署的文件</li>
<li><code>node_modules</code></li>
<li><code>public</code>:  生成的静态网页文件</li>
<li><code>scaffolds</code>:  模板</li>
<li><code>source</code>: 博客正文和其他源文件，404，favicon，CNAME<ul>
<li><code>_drafts</code>:  草稿</li>
<li><code>_posts</code>:  文章</li>
</ul>
</li>
<li><code>themes</code>:  主题</li>
<li><code>_config.yml</code>:  全局配置文件</li>
<li><code>package.json</code></li>
</ul>
<h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page archive</span><br><span class="line"><span class="comment"># 创建分类目录并初始化index.md  等同于  hexo n</span></span><br><span class="line"></span><br><span class="line">hexo server    </span><br><span class="line"><span class="comment"># run hexo server  等同于  hexo s</span></span><br><span class="line"></span><br><span class="line">hexo generate  </span><br><span class="line"><span class="comment"># Generate static files   等同于  hexo g</span></span><br><span class="line"></span><br><span class="line">hexo deploy   </span><br><span class="line"><span class="comment"># Deploy to remote sites   等同于  hexo d</span></span><br><span class="line"></span><br><span class="line">hexo clean  <span class="comment"># 清空缓存文件</span></span><br><span class="line">hexo -v     <span class="comment"># 查看hexo版本</span></span><br><span class="line">hexo <span class="built_in">help</span>   <span class="comment"># 查看hexo帮助</span></span><br><span class="line">hexo d -g   <span class="comment"># 生成部署  组合命令</span></span><br><span class="line">hexo s -g   <span class="comment"># 生成预览  组合命令</span></span><br><span class="line">hexo s --debug  <span class="comment"># 本地预览，并开启调试模式</span></span><br></pre></td></tr></table></figure>

<p>在后续博文发布时，依次执行如下命令</p>
<ul>
<li><code>hexo clean</code>: 清空缓存文件</li>
<li><code>hexo g</code>: 编译产生静态文件</li>
<li><code>hexo s</code>: 本地预览，可选</li>
<li><code>hexo d</code>: 部署到服务端</li>
</ul>
<h2 id="Hexo-to-GitHub"><a href="#Hexo-to-GitHub" class="headerlink" title="Hexo to GitHub"></a>Hexo to GitHub</h2><h3 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h3><ul>
<li>创建一个仓库，并命名为 <code>YourAccountName.github.io</code>（此处以<code>lbs0912.github.io</code>为例）</li>
<li>设置仓库属性，选择 <code>GitHub Page</code> 的主题，访问 <code>https://lbs0912.github.io/</code>进行预览</li>
</ul>
<h3 id="同步内容至-GitHub"><a href="#同步内容至-GitHub" class="headerlink" title="同步内容至 GitHub"></a>同步内容至 GitHub</h3><p>在Hexo安装目录下打开 <code>_config.yml</code> 文件，进行如下修改</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repository:</span> https:<span class="comment">//github.com/lbs0912/lbs0912.github.io.git</span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该配置文件遵循 <code>Yaml</code> 语法，<code>type:</code> 和 <code>git</code> 中间需有一空格。</p>
</blockquote>
<p>对静态网页的标题，子标题，介绍，时区等内容进行如下设置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Liu</span> <span class="string">Baoshuai's</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">Do</span> <span class="string">one</span> <span class="string">thing</span> <span class="string">at</span> <span class="string">a</span> <span class="string">time</span> <span class="string">and</span> <span class="string">do</span> <span class="string">well.</span>  </span><br><span class="line"><span class="attr">description:</span> <span class="string">Record</span> <span class="string">and</span> <span class="string">become</span> <span class="string">better</span> <span class="string">myself.</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Liu</span> <span class="string">Baoshuai</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">https://lbs0912.github.io/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="string">//...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br></pre></td></tr></table></figure>

<p>配置文件修改完成后，输入如下命令，将更新后的内容同步至GitHub。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git --save  <span class="comment">#deploy to git  </span></span><br><span class="line"></span><br><span class="line">hexo clean      </span><br><span class="line">hexo generate    <span class="comment"># or hexo g</span></span><br><span class="line">hexo deploy      <span class="comment"># or hexo d</span></span><br></pre></td></tr></table></figure>

<p>打开 <code>https://lbs0912.github.io/</code> 可以访问博客界面。</p>
<h2 id="域名和DNS"><a href="#域名和DNS" class="headerlink" title="域名和DNS"></a>域名和DNS</h2><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>申请域名用于博客访问。此处申请域名 <code>liubaoshuai.com</code>。</p>
<blockquote>
<p>已申请的域名包括</p>
<ul>
<li><code>liubaoshuai.com</code></li>
<li><code>liubaoshuai.tech</code></li>
</ul>
</blockquote>
<h3 id="设置CNAME"><a href="#设置CNAME" class="headerlink" title="设置CNAME"></a>设置CNAME</h3><p>在Hexo的安装目录下的 <code>source</code> 目录下，创建 <code>CNAME</code> 文件，并存入申请的域名 <code>liubaoshuai.com</code>。</p>
<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>推荐使用 <a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSPod</a> 进行DNS解析。</p>
<p>此处，由于域名 <code>http://liubaoshuai.com/</code> 在阿里云购买，故使用阿里云的 DNS 云解析。DNS 界面进行如下设置。</p>
<table>
<thead>
<tr>
<th>记录类型</th>
<th>主机记录</th>
<th>记录值</th>
</tr>
</thead>
<tbody><tr>
<td>CNAME</td>
<td>www</td>
<td>lbs0912.github.io</td>
</tr>
<tr>
<td>A</td>
<td>@</td>
<td>192.30.252.154</td>
</tr>
<tr>
<td>A</td>
<td>@</td>
<td>192.30.252.153</td>
</tr>
</tbody></table>
<blockquote>
<p><a href="https://help.github.com/en/articles/troubleshooting-custom-domains#dns-configuration-errors" target="_blank" rel="noopener">DNS Update | github</a></p>
</blockquote>
<p>其中A记录为GitHub Page提供的IP地址，可以访问 <a href="https://help.github.com/articles/github-s-ip-addresses/" target="_blank" rel="noopener">GitHub Page</a> 查询最新 <code>IP</code> 地址。</p>
<p>最后，执行如下命令，并访问 <code>liubaoshuai.com</code> 查看修改效果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean  </span><br><span class="line">hexo g    <span class="comment"># or hexo generate</span></span><br><span class="line">hexo d    <span class="comment"># or hexo deploy</span></span><br></pre></td></tr></table></figure>


<ul>
<li>至此，便可通过访问 <code>liubaoshuai.com</code> 来访问自己的博客。</li>
<li>访问 <code>lbs0912.github.io</code>，会被重定向到 <code>liubaoshuai.com</code> 网址。</li>
</ul>
<h2 id="Blog-配置"><a href="#Blog-配置" class="headerlink" title="Blog 配置"></a>Blog 配置</h2><ul>
<li><strong><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">Next Theme 官方配置手册</a></strong></li>
</ul>
<h3 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h3><p>安装Hexo插件来增强Hexo效果和美化页面。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-deployer-git --save  <span class="comment">#deploy to git</span></span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-stylus --save</span><br><span class="line">npm install hexo-generator-feed --save   <span class="comment"># RSS</span></span><br><span class="line">npm install hexo-generator-sitemap --save <span class="comment">#sitemap</span></span><br></pre></td></tr></table></figure>

<h3 id="添加Meta信息"><a href="#添加Meta信息" class="headerlink" title="添加Meta信息"></a>添加Meta信息</h3><p><code>Hexo</code> 默认的文件头只有<code>title</code>、<code>date</code>、<code>tags</code> 属性，生成的 <code>html</code> 缺少 <code>Meta</code>信息，不利于搜索引擎收录。建议自行在文件头中添加 <code>keywords</code> 和 <code>description</code> 属性。<code>categories</code> 属性可自行选择是否添加。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="comment">##文章标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="comment">##时间，格式为 YYYY-MM-DD HH:mm:ss</span></span><br><span class="line"><span class="attr">categories:</span> <span class="comment">##分类</span></span><br><span class="line"><span class="attr">tags:</span> <span class="comment">##标签，多标签格式为 [tag1,tag2,...]</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment">##文章关键词，多关键词格式为 keyword1,keywords2,...</span></span><br><span class="line"><span class="attr">description:</span> <span class="comment">##文章描述</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>文件头模板如上所示，一个文件头实例如下所示。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">这是一篇测试文章</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2015</span><span class="bullet">-03</span><span class="bullet">-21</span> <span class="number">15</span><span class="string">:13:48</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[Hexo,测试]</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">Hexo,文章,测试</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">这是一篇测试文章，用于测试Hexo文章文件头。</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是，多个标签也可采用如下写法</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - Testing Tag</span><br><span class="line">  - Another Tag</span><br></pre></td></tr></table></figure>

<h3 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h3><p>在 Hexo 安装目录下打开 <code>_config.yml</code>，添加如下配置， 为博客添加分页功能。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Plugins</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">8</span> <span class="comment">##首页默认8篇文章标题，如果值为0不分页</span></span><br><span class="line"><span class="attr">  order_by:</span> <span class="bullet">-date</span></span><br><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">8</span> <span class="comment">##归档页面默认8篇文章标题，如果值为0不分页</span></span><br><span class="line"><span class="attr">  yearly:</span> <span class="literal">true</span> <span class="comment">##生成年视图</span></span><br><span class="line"><span class="attr">  monthly:</span> <span class="literal">true</span> <span class="comment">##生成月视图</span></span><br><span class="line"><span class="attr">tag_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">8</span> <span class="comment">##标签页面默认8篇文章，如果值为0不分页</span></span><br><span class="line"><span class="attr">category_generator:</span> </span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">8</span> <span class="comment">##分类页面默认8篇文章，如果值为0不分页</span></span><br></pre></td></tr></table></figure>

<h3 id="Hexo-主题配置"><a href="#Hexo-主题配置" class="headerlink" title="Hexo 主题配置"></a>Hexo 主题配置</h3><p>访问如下链接，查看 Hexo 主题列表</p>
<ul>
<li><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo Themes List</a></li>
<li><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">Hexo Themes List on GitHub</a> </li>
</ul>
<h4 id="Next-Theme"><a href="#Next-Theme" class="headerlink" title="Next Theme"></a>Next Theme</h4><ul>
<li>参考 <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Next Theme | github</a> 完成基本配置。</li>
<li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next Theme Configure</a></li>
<li>参考 <a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">Next主题美化进阶 | Segmentfault</a> 进行定制。</li>
<li>Install</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>cd hexo</span><br><span class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<ul>
<li>将下载好的 <code>Huno</code> 主题放置在 <code>blog/themes</code> 目录下。修改 <code>Hexo</code> 配置文件<code>_config.xml</code></li>
</ul>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">theme: <span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Update</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>cd themes/<span class="keyword">next</span></span><br><span class="line"><span class="variable">$ </span>git pull</span><br></pre></td></tr></table></figure>

<ul>
<li>设置界面个人头像和网页收藏夹图标</li>
</ul>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Site favicon</span></span><br><span class="line"><span class="meta">#favicon: /favicon.png</span></span><br><span class="line">favicon: https:<span class="comment">//image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/Blog-20190315/blog-logo-1.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Site logo</span></span><br><span class="line"><span class="meta">#logo: /avatar.png</span></span><br><span class="line">logo: https:<span class="comment">//image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/Blog-20190315/blog-logo-1.jpg</span></span><br></pre></td></tr></table></figure>

<ul>
<li>作品设计参考网站<ul>
<li><a href="https://dribbble.com/" target="_blank" rel="noopener">Dribbble</a></li>
<li><a href="https://www.behance.net/" target="_blank" rel="noopener">Behance</a></li>
</ul>
</li>
</ul>
<h4 id="Huno-Theme"><a href="#Huno-Theme" class="headerlink" title="Huno Theme"></a>Huno Theme</h4><p>参考 <a href="https://github.com/letiantian/huno" target="_blank" rel="noopener">Huno Theme | github</a> 完成基本配置。</p>
<h3 id="集成第三方服务"><a href="#集成第三方服务" class="headerlink" title="集成第三方服务"></a>集成第三方服务</h3><ul>
<li><a href="https://theme-next.iissnan.com/getting-started.html#third-party-services" target="_blank" rel="noopener">Next Theme 官方配置手册</a></li>
</ul>
<h4 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h4><ul>
<li>用户名：15821929853</li>
<li>密码：Ab758123aB</li>
<li>百度统计-脚本 ID：17082ee15df20dad9762c5512f336eb2</li>
<li>登陆 <a href="https://tongji.baidu.com/web/homepage/index?castk=df83afg752126b970d267" target="_blank" rel="noopener">百度统计</a> 网站，可以查阅网站访问量</li>
</ul>
<h4 id="阅读次数统计-LeanCloud"><a href="#阅读次数统计-LeanCloud" class="headerlink" title="阅读次数统计 LeanCloud"></a>阅读次数统计 LeanCloud</h4><ul>
<li><a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud</a></li>
<li><a href="https://notes.doublemine.me/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">LeanCloud 配置</a></li>
<li>使用 <code>Github</code> 第三方账登录 <code>leancloud</code></li>
<li>APP ID：gksxcfwJlMV3zkhz1pQc7pl2-gzGzoHsz</li>
<li>APP Key：kjOanp812G7TIGMSQpPCVIhj</li>
</ul>
<h4 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h4><ul>
<li><a href="https://theme-next.iissnan.com/third-party-services.html#algolia-search" target="_blank" rel="noopener">搜索服务配置</a></li>
</ul>
<p><code>NexT</code> 主题支持集成 <code>Swiftype</code>，<code>微搜索</code>，<code>Local Search</code> 和 <code>Algolia</code> 搜索功能。<code>Swiftype</code> 和 <code>Algolia</code> 均收费，可以采用 <code>Hexo</code> 提供的 <code>Local Search</code> 搜索服务，其原理是通过 <code>hexo-generator-searchdb</code> 插件在本地生成一个 <code>search.xml</code> 文件，搜索的时候从这个文件中根据关键字检索出相应的链接。</p>
<h4 id="博文分享功能"><a href="#博文分享功能" class="headerlink" title="博文分享功能"></a>博文分享功能</h4><ul>
<li><p><a href="https://blog.csdn.net/lanuage/article/details/78991798" target="_blank" rel="noopener">hexo next主题为博客添加分享功能</a></p>
</li>
<li><p>百度分享</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">baidushare:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">button</span>  <span class="comment"># 需要设置 type: button </span></span><br><span class="line"><span class="attr">  baidushare:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>likely 分享</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">likely:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  look:</span> <span class="string">light</span>  <span class="comment"># available values: normal, light, small, big</span></span><br><span class="line"><span class="attr">  networks:</span></span><br><span class="line"><span class="attr">    twitter:</span> <span class="string">Tweet</span></span><br><span class="line"><span class="attr">    facebook:</span> <span class="string">Share</span></span><br><span class="line"><span class="attr">    linkedin:</span> <span class="string">Link</span></span><br><span class="line">    <span class="comment">#gplus: Plus</span></span><br><span class="line">    <span class="comment">#vkontakte: Share</span></span><br><span class="line">    <span class="comment">#odnoklassniki: Class</span></span><br><span class="line">    <span class="comment">#telegram: Send</span></span><br><span class="line"><span class="attr">    whatsapp:</span> <span class="string">Send</span></span><br><span class="line">    <span class="comment">#pinterest: Pin</span></span><br></pre></td></tr></table></figure>


<h4 id="Disqus-评论"><a href="#Disqus-评论" class="headerlink" title="Disqus 评论"></a>Disqus 评论</h4><ul>
<li><p>使用谷歌账户登录Disqus</p>
</li>
<li><p>shortName：liubaoshuaiBlog</p>
</li>
<li><p>之后，在撰写文章时，顶部信息添加 <code>comments</code> 字段可控制是否展示评论</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Demo</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-03</span><span class="bullet">-10</span> <span class="number">14</span><span class="string">:35:26</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Demo</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[LeetCode,Programing,Algorithm]</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">LeetCode</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>


<h3 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h3><ul>
<li>推荐使用 <a href="http://www.qq.com/404/" target="_blank" rel="noopener">腾讯公益404</a>，当然也可以自定义 404 页面，例如本博客采用的 404 页面。</li>
<li>在 <code>blog/source</code> 目录下创建 <code>404.html</code>，引入腾讯公益404脚本。(该效果需要部署到服务器才能预览，本地服务无法预览)</li>
</ul>
<h3 id="Fork-me-on-GitHub"><a href="#Fork-me-on-GitHub" class="headerlink" title="Fork me on GitHub"></a>Fork me on GitHub</h3><p>在 <a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">Fork me on GitHub Theme</a> 上获取源代码（有多种样式可选），并将 <code>&lt;a&gt;</code> 标签的 <code>href</code> 属性的链接修改为自己的 <a href="https://github.com/lbs0912" target="_blank" rel="noopener">GitHub-lbs0912</a> 地址。</p>
<p>以 Huno 主题为例，将上述代码添加到 <code>./themes/huno/layout/_layout.ejs</code> 文件的<code>&lt;body&gt;</code> 标签内即可。</p>
<blockquote>
<p>修改源代码中<code>img</code>标签的样式为<code>position:fixed</code>，可以将<code>Fork me on GitHub</code>固定于浏览器界面顶部。</p>
</blockquote>
<h3 id="背景音乐播放设置"><a href="#背景音乐播放设置" class="headerlink" title="背景音乐播放设置"></a>背景音乐播放设置</h3><p>参考 <a href="http://weqeo.com/2016/10/11/Hexo%E4%B8%AD%E6%92%AD%E6%94%BE%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E7%9A%84%E5%AE%9E%E8%B7%B5/" target="_blank" rel="noopener">Hexo中播放网易云音乐的实践</a> 完成该部分设置。</p>
<p>以 Huno 主题为例，将网易云音乐播放外链放置在 <code>./themes/next/layout/_macro/sidebar.swig</code> 文件中。</p>
<figure class="highlight leaf"><table><tr><td class="code"><pre><span class="line">&lt;% if (!is_home()) &#123; %&gt; </span><br><span class="line">    &lt;iframe frameborder="no" border="0" marginwidth="0" style="margin-top: 40px;" marginheight="0" width=330 height=86  src="//music.163.com/outchain/player?type=2&amp;id=394653&amp;auto=0&amp;height=66"&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>


<h3 id="为-Blog-添加-README"><a href="#为-Blog-添加-README" class="headerlink" title="为 Blog 添加 README"></a>为 Blog 添加 README</h3><p>本博客中，使用了 <code>Github</code> 服务器作为托管，博客内容被存储到 <code>Github</code> 中。</p>
<p>一般情况下，需要给 <code>Github</code> 中每一个项目添加 <code>README.md</code> 文件进行说明。</p>
<p>但是，在 <code>Blog</code> 项目中，在 <code>blog\source</code> 目录下创建的 <code>README.md</code> 文件，会被 <code>hexo</code> 解析掉，并不会被部署到 <code>Github</code> 服务器上。</p>
<h4 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h4><ul>
<li>在博客 <code>Source</code> 目录下创建 <code>README.md</code> 文件</li>
<li>修改博客配置文件的 <code>skip_render</code> 字段如下 </li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">skip_render: <span class="module-access"><span class="module"><span class="identifier">README</span>.</span></span>md</span><br></pre></td></tr></table></figure>

<h4 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h4><p>正确的解决方法如下。</p>
<ul>
<li>把 <code>README.md</code> 文件的后缀名改成 <code>.MDOWN</code></li>
<li>仍将该文件置于 <code>blog/source</code> 文件夹</li>
<li>这样可以保证 <code>hexo</code> 不会解析该文件，同时 <code>Github</code> 也会将其作为<code>.MD</code> 文件解析</li>
</ul>
<h3 id="背景效果优化"><a href="#背景效果优化" class="headerlink" title="背景效果优化"></a>背景效果优化</h3><p>此处介绍博客背景动态效果图的添加，以及鼠标点击界面出现心形图案的相关设置。</p>
<ul>
<li>下载 <a href="https://github.com/lbs0912/lbs0912.github.io/blob/master/js/src/love.js" target="_blank" rel="noopener">love.js</a> 和 <a href="https://github.com/lbs0912/lbs0912.github.io/blob/master/js/src/particle.js" target="_blank" rel="noopener">particle.js</a> 文件，将其存放至<code>\themes\huno\source\js\src</code>目录下。</li>
<li>在 <code>\themes\huno\layout\layout.ejs</code> 文件末尾，引入上述 2 个 js 文件。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 背景动画 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/particle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/love.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h3><ul>
<li>修改 <code>./node_modules/hexo-generator-index/lib/generator.js</code> 文件的</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var posts</span> = locals.posts.sort(config.index_generator.order_by);</span><br></pre></td></tr></table></figure>

<p>为</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">var posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a.<span class="built_in">top</span> &amp;&amp; b.<span class="built_in">top</span>) &#123; // 两篇文章<span class="built_in">top</span>都有定义</span><br><span class="line">            <span class="keyword">if</span>(a.<span class="built_in">top</span> == b.<span class="built_in">top</span>) <span class="keyword">return</span> b.date - a.date; // 若<span class="built_in">top</span>值一样则按照文章日期降序排</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.<span class="built_in">top</span> - a.<span class="built_in">top</span>; // 否则按照<span class="built_in">top</span>值降序排</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.<span class="built_in">top</span> &amp;&amp; !b.<span class="built_in">top</span>) &#123; // 以下是只有一篇文章<span class="built_in">top</span>有定义，那么将有<span class="built_in">top</span>的排在前面（这里用异或操作居然不行<span class="number">233</span>）</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.<span class="built_in">top</span> &amp;&amp; b.<span class="built_in">top</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>设置文章置顶：在文件的头部添加 <code>top</code> 值，<code>top</code> 值越大，文章越靠前。若两篇文章的 <code>top</code> 值一样，则按照默认的日期排序。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Webpack</span> <span class="string">Notes</span> <span class="bullet">-</span> <span class="number">1</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-01</span><span class="bullet">-19</span> <span class="number">11</span><span class="string">:15:48</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Front-end</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[Webpack,Front-end]</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">webpack,front-end</span> </span><br><span class="line"><span class="attr">top:</span> <span class="number">5</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h3 id="博文收起添加"><a href="#博文收起添加" class="headerlink" title="博文收起添加"></a>博文收起添加</h3><p>在 <code>.MD</code> 文件中添加如下标识。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>该标识前的会在博客首页展示（可以在该标识前添加简要说明）</li>
<li>该标识后的博文会被收起折叠。</li>
</ul>
<h3 id="文章加密阅读"><a href="#文章加密阅读" class="headerlink" title="文章加密阅读"></a>文章加密阅读</h3><ul>
<li><p>Ref - <a href="https://segmentfault.com/a/1190000009544924#articleHeader23" target="_blank" rel="noopener">next主题 - 文章加密阅读</a></p>
</li>
<li><p>打开 <code>themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig</code> 文件，添加如下代码</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'密码错误！'</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (history.length === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    location.replace(<span class="string">"http://xxxxxxx.xxx"</span>); <span class="comment">// 这里替换成你的首页</span></span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">                    history.back();</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>之后，在撰写文章时，顶部信息添加 <code>password</code> 字段即可</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Demo</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-03</span><span class="bullet">-10</span> <span class="number">14</span><span class="string">:35:26</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Demo</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[LeetCode,Programing,Algorithm]</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">LeetCode</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>


<h3 id="定制CSS"><a href="#定制CSS" class="headerlink" title="定制CSS"></a>定制CSS</h3><ul>
<li>在 <code>.\themes\next\source\css\_custom\custom.styl</code> 文件中，添加自定义CSS样式。</li>
</ul>
<p>定制CSS样式后，可以使用如下效果。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-blue"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">span</span>&gt;</span>， </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-purple"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-green"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-yellow"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-left-red"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-left-yellow"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-left-green"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-left-blue"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-left-purple"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-right-red"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-right-yellow"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-right-green"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-right-blue"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-right-purple"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-top-red"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-top-yellow"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-top-green"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-top-blue"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-top-purple"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"yu-1"</span>&gt;</span>动画<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"download"</span> <span class="attr">href</span>=<span class="string">"https://git-scm.com/download/win"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-download"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span> Download Now<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-center"</span>&gt;</span>引用居中效果<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="链接文本样式修改"><a href="#链接文本样式修改" class="headerlink" title="链接文本样式修改"></a>链接文本样式修改</h4><p>将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。打开<code>themes\next\source\css\_custom\custom.styl</code> 文件 ，添加如下 <code>css</code> 样式</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Custom styles.</span></span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0477ab</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文字增加背景色块"><a href="#文字增加背景色块" class="headerlink" title="文字增加背景色块"></a>文字增加背景色块</h4><ul>
<li><p>参考 <a href="http://blog.junyu.pro/posts/0010-hexo-learn-from-Never-yu.html#background" target="_blank" rel="noopener">Hexo博客设置进阶</a> 完成该部分的设置。</p>
</li>
<li><p>使用 <code>inline-blue</code>, <code>inline-purple</code>, <code>inline-yellow</code>,<code>inline-green</code> 可以对文字背景色块进行修改。</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-blue"</span>&gt;</span>站点配置文件<span class="tag">&lt;/<span class="name">span</span>&gt;</span>， </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-purple"</span>&gt;</span>主题配置文件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="图形边框效果"><a href="#图形边框效果" class="headerlink" title="图形边框效果"></a>图形边框效果</h4><p>参考 <a href="http://blog.junyu.pro/posts/0010-hexo-learn-from-Never-yu.html#background" target="_blank" rel="noopener">Hexo博客设置进阶</a> 完成该部分的设置。</p>
<h4 id="引用边框变色"><a href="#引用边框变色" class="headerlink" title="引用边框变色"></a>引用边框变色</h4><p>参考<a href="http://blog.junyu.pro/posts/0010-hexo-learn-from-Never-yu.html#background" target="_blank" rel="noopener">Hexo博客设置进阶</a></p>
<h4 id="引用居中效果"><a href="#引用居中效果" class="headerlink" title="引用居中效果"></a>引用居中效果</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-center"</span>&gt;</span>引用居中效果<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h4 id="Font-Awesome-使用"><a href="#Font-Awesome-使用" class="headerlink" title="Font Awesome 使用"></a>Font Awesome 使用</h4><ul>
<li><a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">Font Awesome</a></li>
</ul>
<p>使用 <code>Font Awesome</code> 图标时，只需要使用 CSS 前缀 <code>fa</code>，再加上图标名称即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-pencil"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-pencil</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-pencil-square-o"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-pencil-square-o</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-camera-retro"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-camera-retro</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-share-square-o"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-share-square-o</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-tag"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-tag</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-video-camera"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-video-camera</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-ban"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-ban</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-code"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-code</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-cloud"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-cloud</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-pie-chart"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-pie-chart</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-thumbs-o-up"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-thumbs-o-up</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-chain"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-chain</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-link"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-link</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-edit"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-edit</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-share-alt"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-share-alt</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-jsfiddle"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-jsfiddle</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-git"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-git</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-codepen"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-codepen</span><br></pre></td></tr></table></figure>


<h3 id="主页图片展示"><a href="#主页图片展示" class="headerlink" title="主页图片展示"></a>主页图片展示</h3><ul>
<li>新建博文，设置 <code>type: &quot;picture&quot;</code>，使用 <code>{\% gp x-x \%} ... {\% endgp \%}</code> 标签引用要展示的图片地址。</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: HomePageImage</span><br><span class="line">type: "picture"</span><br><span class="line">top: 999999999999999</span><br><span class="line">date: 2018-09-12 16:50:21</span><br><span class="line">categories: HomePageImage</span><br><span class="line">tags: HomePageImage</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&#123;% gp 5-3 %&#125;</span><br><span class="line">![<span class="string">my-riding-bike</span>](<span class="link">http://ojxk3q6gs.bkt.clouddn.com/my-riding-bike.jpg</span>)</span><br><span class="line">![<span class="string">football</span>](<span class="link">http://ojxk3q6gs.bkt.clouddn.com/football.jpg</span>)</span><br><span class="line">![<span class="string">sjtu-title-3</span>](<span class="link">http://ol3kbaay9.bkt.clouddn.com/sjtu-title-3.jpg</span>)</span><br><span class="line">![<span class="string">front-end-logo-1</span>](<span class="link">http://ol3kbaay9.bkt.clouddn.com/front-end-logo-1.jpg</span>)</span><br><span class="line">![<span class="string">java-c-vs123</span>](<span class="link">http://ol3kbaay9.bkt.clouddn.com/java-c-vs123.jpg</span>)</span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>图片展示效果</li>
</ul>
<p><code>{\% gp 5-3 \%}</code> 用于设置图片展示效果，参考 <code>theme/next/scripts/tags/group-pictures.js</code> 注释示意图。</p>
<ul>
<li>修复图片展示</li>
</ul>
<p>博客主页目前可以正常显示上步骤中设置的图片模式效果，但是点击进入后，图片显示效果会丢失，所以需修改<br><code>themes\next\source\css\_common\components\tags\group-pictures.styl</code> 文件中的以下样式</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.page-post-detail</span> <span class="selector-class">.post-body</span> <span class="selector-class">.group-picture-column</span> &#123;</span><br><span class="line">  <span class="comment">// float: none;</span></span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="comment">// width: auto !important;</span></span><br><span class="line">  <span class="selector-tag">img</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span> auto; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="博文底部标签样式"><a href="#博文底部标签样式" class="headerlink" title="博文底部标签样式"></a>博文底部标签样式</h3><ul>
<li>将博文底部的表情样式，从改为 <code>#</code> 改为 <code>Font Awesome</code> 图标的标签样式。</li>
<li>修改模板 <code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将其中的 <code>#</code> 换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>。</li>
</ul>
<h3 id="首页-简历和相册分类"><a href="#首页-简历和相册分类" class="headerlink" title="首页-简历和相册分类"></a>首页-简历和相册分类</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><ul>
<li>Create</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span>resume </span><br><span class="line">hexo new<span class="built_in"> page </span>album</span><br></pre></td></tr></table></figure>

<ul>
<li>Configure</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line"><span class="symbol">  resume:</span> <span class="meta-keyword">/resume/</span> || child</span><br><span class="line"><span class="symbol">  album:</span> /album || picture-o</span><br></pre></td></tr></table></figure>


<blockquote>
<p>在简历和相册对应的 <code>index.md</code> 文件头部添加 <code>comments: false</code> 可以关闭评论列表。</p>
</blockquote>
<h4 id="简历配置"><a href="#简历配置" class="headerlink" title="简历配置"></a>简历配置</h4><p>除了用 <code>markdown</code> 书写个人简历外，也可以用 <code>HTML</code> 书写个人简历。此时，需要在文件头部添加不进行渲染指令。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">layout:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">个人简历</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">&lt;!doctype</span> <span class="string">html&gt;</span></span><br><span class="line"><span class="string">&lt;html</span> <span class="string">lang="zh"&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;!--</span> <span class="string">resume</span> <span class="string">code</span> <span class="string">here--&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="相册配置"><a href="#相册配置" class="headerlink" title="相册配置"></a>相册配置</h4><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><ul>
<li><a href="https://timding.top/2017/09/18/Hexo-NexT-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%86%8C-%E4%BA%8C/" target="_blank" rel="noopener">Next Theme 相册配置</a> </li>
<li><a href="https://juejin.im/post/5b8bc953518825284910dcdd" target="_blank" rel="noopener">搭建Hexo 相册</a></li>
</ul>
<h5 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h5><ul>
<li>在 <code>album</code> 目录下添加 <code>assets/empty.jpg</code>，作为图片展示的占位图。</li>
<li>本相册配置中是将图片存放在 <code>github</code>的，其访问链接是 <code>https://raw.githubusercontent.com</code> 开头的，并不是图片的存储地址。因此，<code>album/ins.js</code> 中图片链接地址为</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var minSrc</span> = <span class="string">'https://raw.githubusercontent.com/lbs0912/HexoBlog/master/source/album/photos_configure/min_photos/'</span> + data.link[i];</span><br><span class="line"></span><br><span class="line"><span class="attribute">var src</span> = <span class="string">'https://raw.githubusercontent.com/lbs0912/HexoBlog/master/source/album/photos_configure/photos/'</span> + data.link[i];</span><br></pre></td></tr></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul>
<li>记录，成为更好的自己。</li>
<li>本博客全部配置信息可在 <a href="https://github.com/lbs0912/BlogSpace" target="_blank" rel="noopener">BlogSpace | lbs0912-github</a> 查看。</li>
</ul>
]]></content>
      <categories>
        <category>Front-End Develop</category>
      </categories>
      <tags>
        <tag>Front-End Developer</tag>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
</search>
