<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liu Baoshuai&#39;s Blog</title>
  
  <subtitle>Do one thing at a time and do well</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lbs0912.github.io/"/>
  <updated>2019-11-09T15:22:38.601Z</updated>
  <id>https://lbs0912.github.io/</id>
  
  <author>
    <name>Liu Baoshuai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React Native 实现下拉自动切换分类</title>
    <link href="https://lbs0912.github.io/2019/06/08/rn-tab-auto-change/"/>
    <id>https://lbs0912.github.io/2019/06/08/rn-tab-auto-change/</id>
    <published>2019-06-08T02:35:26.000Z</published>
    <updated>2019-11-09T15:22:38.601Z</updated>
    
    <content type="html"><![CDATA[<ul><li>记录 <code>React Native</code> 中如何实现下拉自动切换分类</li><li>针对 IOS 和 Android 平台差异，给出不同的切换分类触发条件</li></ul><a id="more"></a><h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2><p>如图所示，整体为 <code>FlatList</code>，顶部分类栏吸顶，底部为 <code>feed</code> 流。要实现下拉商品列表到底后，继续下拉，自动切换到一下个分类的效果。</p><p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/front-end-2019/rn-flatlist-autochange-tab-android.png" alt="rn-flatlist-autochange-tab-android"></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>代码层面，可以在  <code>FlatList</code> 的 <code>onScrollEndDrag</code> 中添加自动 Tab 切换函数，借助 <code>FlatList</code> 实例的内容区高度 <code>contentLength</code>，滑动偏移量 <code>offset</code> 和可视区高度 <code>visibleLength</code> 三者关系，实现下拉自动切换Tab功能。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="IOS-平台实现"><a href="#IOS-平台实现" class="headerlink" title="IOS 平台实现"></a>IOS 平台实现</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面布局相关</span></span><br><span class="line"> &lt;FlatList</span><br><span class="line">    <span class="keyword">data</span> = &#123;[&#123;banner:[]&#125;,&#123;tab:[]&#125;,&#123;goodList:[]&#125;]&#125;</span><br><span class="line">    renderItem=&#123;<span class="keyword">this</span>.renderItem&#125;</span><br><span class="line">    stickyHeaderIndices=&#123;(Platform.OS !== <span class="string">'web'</span>)?[<span class="number">1</span>]:<span class="literal">null</span>&#125;</span><br><span class="line">    ListFooterComponent=&#123;<span class="keyword">this</span>._renderFooter&#125;</span><br><span class="line">    onScroll=&#123;<span class="keyword">this</span>._onScroll&#125; <span class="comment">//滑动监听</span></span><br><span class="line">    ref=&#123;<span class="keyword">this</span>._setScrollRef&#125;</span><br><span class="line">    keyExtractor = &#123;(item, index) =&gt; &#123; `hScrollView-$&#123;index&#125;` &#125;&#125;</span><br><span class="line">    refreshing=&#123;<span class="keyword">this</span>.state.isRefreshing&#125;</span><br><span class="line">    onRefresh=&#123;<span class="keyword">this</span>._onRefresh.bind(<span class="keyword">this</span>)&#125; <span class="comment">//下拉刷新</span></span><br><span class="line">    getItemLayout=&#123;(<span class="keyword">data</span>, index) =&gt; (</span><br><span class="line">        &#123;length: <span class="number">305</span>, offset: <span class="number">305</span> * index, index&#125;</span><br><span class="line">    )&#125;</span><br><span class="line">    onScrollEndDrag = &#123;()=&gt;&#123;  <span class="comment">//滑动到底监听函数</span></span><br><span class="line">        <span class="keyword">if</span>(Platform.OS != <span class="string">'web'</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>._onScrollEndDragFun();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取flatList 实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ref</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@private</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">_setScrollRef = (ref) =&gt; &#123;</span><br><span class="line">    <span class="keyword">this</span>._secondGoodFlatListRef = ref;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> isEmpty <span class="keyword">from</span> <span class="string">"lodash/isEmpty"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Platform&#125; <span class="keyword">from</span> <span class="string">"react-native"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;JDDevice&#125; <span class="keyword">from</span> <span class="string">"@jdreact/jdreact-core-lib"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 底部列表页滑动事件 实现上拉切换品类功能</span></span><br><span class="line"><span class="comment"> * @param e</span></span><br><span class="line"><span class="comment"> * @private</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">_onScrollEndDragFun = (e) =&gt; &#123;</span><br><span class="line">    let scrollMetrics = (<span class="keyword">this</span>._secondGoodFlatListRef &amp;&amp; <span class="keyword">this</span>._secondGoodFlatListRef._listRef</span><br><span class="line">        &amp;&amp; <span class="keyword">this</span>._secondGoodFlatListRef._listRef._scrollMetrics) || <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    let &#123;contentLength = <span class="number">0</span>, offset = <span class="number">0</span>, visibleLength = <span class="number">0</span>&#125; = scrollMetrics;</span><br><span class="line">    <span class="comment">// console.log('===scrollMetrics',scrollMetrics);</span></span><br><span class="line">    <span class="comment">// //判断是否最后一Tab 如果是就不却换下个目录</span></span><br><span class="line">    <span class="comment">// console.log('===this.props',this.props);</span></span><br><span class="line">    <span class="comment">// console.log('===this.state',this.state);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (contentLength &amp;&amp; offset &amp;&amp; visibleLength) &#123;</span><br><span class="line">        let &#123;selectedIndex = <span class="number">0</span>&#125; = <span class="keyword">this</span>.state; <span class="comment">//当前选中的三级分类index</span></span><br><span class="line">        let &#123;tabListData = []&#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isEmpty(tabListData) &amp;&amp; (selectedIndex + <span class="number">1</span>) &lt; tabListData.length) &#123;  <span class="comment">//排除最后一个分类</span></span><br><span class="line">            let item = tabListData[selectedIndex + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (Platform.OS === <span class="string">'ios'</span>) &#123;</span><br><span class="line">                <span class="comment">//IOS 系统存在弹性上拉</span></span><br><span class="line">                <span class="keyword">if</span> (offset + visibleLength &gt; contentLength + JDDevice.getRpx(<span class="number">100</span>)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>._secondGoodFlatListRef.scrollToIndex(&#123;</span><br><span class="line">                        animated: <span class="literal">false</span>,</span><br><span class="line">                        index: <span class="number">0</span>,</span><br><span class="line">                        viewOffset: <span class="number">1</span>,</span><br><span class="line">                        viewPosition: <span class="number">0</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">this</span>.ItemCategory._clickCategoryTab2 &amp;&amp; <span class="keyword">this</span>.ItemCategory._clickCategoryTab2(item, selectedIndex + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//android 无弹性滑动，滑动到底时，offset + visibleLength = contentLength。IOS有弹性滑动，需要改变判断条件  lbs 2019-03-10</span></span><br><span class="line">                <span class="keyword">if</span> (offset + visibleLength &gt; contentLength - JDDevice.getRpx(<span class="number">10</span>)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>._secondGoodFlatListRef.scrollToIndex(&#123;</span><br><span class="line">                        animated: <span class="literal">false</span>,</span><br><span class="line">                        index: <span class="number">0</span>,</span><br><span class="line">                        viewOffset: <span class="number">1</span>,</span><br><span class="line">                        viewPosition: <span class="number">0</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">this</span>.ItemCategory._clickCategoryTab2 &amp;&amp; <span class="keyword">this</span>.ItemCategory._clickCategoryTab2(item, selectedIndex + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>其中，<code>contentLength</code> 为内容区高度，<code>offset</code> 为滑动偏移量，<code>visibleLength</code> 为可视区高度。</strong></p><blockquote><p>关于<span id="inline-purple">三种高度定义</span>，可参考 <a href="https://www.jianshu.com/p/33ec6ceeb638" target="_blank" rel="noopener">React Native中ListView和ScrollView实现上拉加载</a></p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> scrollMetrics = (this._secondGoodFlatListRef<span class="operator"> &amp;&amp; </span>this.<span class="module-access"><span class="module"><span class="identifier">_secondGoodFlatListRef</span>.</span><span class="module"><span class="identifier">_listRef</span></span></span></span><br><span class="line"><span class="module-access"><span class="module"> </span></span><span class="operator">       &amp;&amp; </span>this.<span class="module-access"><span class="module"><span class="identifier">_secondGoodFlatListRef</span>.</span><span class="module"><span class="identifier">_listRef</span>.</span><span class="module"><span class="identifier">_scrollMetrics</span>)</span></span><span class="operator"> || </span>null;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">    contentLength = <span class="number">0</span>,  <span class="comment">// 内容区高度</span></span><br><span class="line">    offset = <span class="number">0</span>,         <span class="comment">// 滑动偏移量</span></span><br><span class="line">    visibleLength = <span class="number">0</span>   <span class="comment">// 可视区高度</span></span><br><span class="line">&#125; = scrollMetrics;</span><br></pre></td></tr></table></figure><h3 id="Android-平台实现"><a href="#Android-平台实现" class="headerlink" title="Android 平台实现"></a>Android 平台实现</h3><p>对于 Android 平台，当 <code>offset + visibleLength = contentLength</code> 时，表示滑动到底部。为了以前进行切换，对条件进行修正，当滑动到距离底部 10px 时，触发切换 Tab 函数，如下代码所示</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//android 无弹性滑动，滑动到底时，offset + visibleLength = contentLength。IOS有弹性滑动，需要改变判断条件  lbs 2019-03-10</span></span><br><span class="line"><span class="keyword">if</span> (offset + visibleLength &gt; contentLength - JDDevice.getRpx(<span class="number">10</span>)) &#123;</span><br><span class="line">    <span class="keyword">this</span>._secondGoodFlatListRef.scrollToIndex(&#123;</span><br><span class="line">        animated: <span class="literal">false</span>,</span><br><span class="line">        index: <span class="number">0</span>, </span><br><span class="line">        viewOffset: <span class="number">1</span>,</span><br><span class="line">        viewPosition: <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//切换Tab</span></span><br><span class="line">    <span class="keyword">this</span>.ItemCategory._clickCategoryTab2 &amp;&amp; <span class="keyword">this</span>.ItemCategory._clickCategoryTab2(item, selectedIndex + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 IOS 平台，因为 IOS 系统存在弹性上拉，如下图所示。因此对滑动到底条件修正为  <code>offset + visibleLength &gt; contentLength + JDDevice.getRpx(100)</code>。</p><p>其中，<code>JDDevice.getRpx(100)</code> 表示弹性上拉的高度，即下图中红色框的高度。</p><p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/front-end-2019/rn-flatlist-autochange-tab-ios.png" alt="rn-flatlist-autochange-tab-ios"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Platform.OS === <span class="string">'ios'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (offset + visibleLength &gt; contentLength + JDDevice.getRpx(<span class="number">100</span>)) &#123;</span><br><span class="line">        <span class="keyword">this</span>._secondGoodFlatListRef.scrollToIndex(&#123;</span><br><span class="line">            animated: <span class="literal">false</span>,</span><br><span class="line">            index: <span class="number">0</span>,</span><br><span class="line">            viewOffset: <span class="number">1</span>,</span><br><span class="line">            viewPosition: <span class="number">0</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.ItemCategory._clickCategoryTab2 &amp;&amp; <span class="keyword">this</span>.ItemCategory._clickCategoryTab2(item, selectedIndex + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;记录 &lt;code&gt;React Native&lt;/code&gt; 中如何实现下拉自动切换分类&lt;/li&gt;
&lt;li&gt;针对 IOS 和 Android 平台差异，给出不同的切换分类触发条件&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="React Native" scheme="https://lbs0912.github.io/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="https://lbs0912.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>JS模块化——CommonJS AMD CMD ES6 Module</title>
    <link href="https://lbs0912.github.io/2019/03/28/js-module-introduce/"/>
    <id>https://lbs0912.github.io/2019/03/28/js-module-introduce/</id>
    <published>2019-03-28T02:35:26.000Z</published>
    <updated>2019-11-09T15:22:38.601Z</updated>
    
    <content type="html"><![CDATA[<ul><li>对 JS 常见的模块化方案进行介绍和比较——<code>CommonJS</code> <code>AMD</code> <code>CMD</code> <code>ES6 Module</code></li><li>对 <code>ES6 Module</code> 和 <code>CommonJS</code> 的差异进行对比，介绍循环依赖和动态 <code>import()</code></li></ul><a id="more"></a><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><ul><li>2018/05/08，撰写</li><li>2019/03/27，内容整理</li><li>2019/04/01，动态 <code>import()</code> 和博文发表</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://segmentfault.com/a/1190000004873947" target="_blank" rel="noopener">AMD, CMD, CommonJS和UMD | Segmentfault</a></li><li><a href="https://zhuanlan.zhihu.com/p/41231046" target="_blank" rel="noopener">JS模块化加载之CommonJS、AMD、CMD、ES6</a></li><li><a href="http://es6.ruanyifeng.com/#docs/module-loader" target="_blank" rel="noopener">ES6 module的加载和实现 | 阮一峰</a></li><li><a href="https://div.io/topic/1078" target="_blank" rel="noopener">前端模块化开发方案小对比</a></li></ul><h2 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>模块化开发中，通常一个文件就是一个模块，有自己的作用域，只向外暴露特定的变量和函数，并且可以按需加载。</li><li>依赖自动加载，按需加载。</li><li>提高代码复用率，方便进行代码的管理，使得代码管理更加清晰、规范。</li><li>减少了命名冲突，消除全局变量。</li><li>目前流行的js模块化规范有CommonJS、AMD、CMD以及ES6的模块系统</li></ul><h3 id="常见模块化规范"><a href="#常见模块化规范" class="headerlink" title="常见模块化规范"></a>常见模块化规范</h3><ul><li>CommonJs (Node.js)</li><li>AMD (RequireJS)</li><li>CMD (SeaJS)</li></ul><h2 id="CommonJS-Node-js"><a href="#CommonJS-Node-js" class="headerlink" title="CommonJS(Node.js)"></a>CommonJS(Node.js)</h2><p><strong>CommonJS是服务器模块的规范</strong>，Node.js采用了这个规范。</p><p>根据 <code>CommonJS</code> 规范，一个单独的文件就是一个模块，每一个模块都是一个单独的作用域，在一个文件定义的变量（还包括函数和类），<strong>都是私有的</strong>，对其他文件是不可见的。</p><p><strong>CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。</strong> </p><p><code>CommonJS</code> 中，加载模块使用 <code>require</code> 方法。该方法读取一个文件并执行，最后返回文件内部的 <code>exports</code> 对象。</p><blockquote><p><code>Node.js</code> 主要用于服务器编程，加载的模块文件一般都已经存在本地硬盘，加载起来较快，不用考虑异步加载的方式，所以 <code>CommonJS</code> 的同步加载模块规范是比较适用的。</p><p>但如果是浏览器环境，要从服务器加载模块，这是就必须采用异步模式。所以就有了 <code>AMD</code>，<code>CMD</code> 等解决方案。</p></blockquote><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keywords">var</span> <span class="symbol">x</span> = <span class="number">5</span>;</span><br><span class="line"><span class="keywords">var</span> addX = function(value) &#123;</span><br><span class="line">  <span class="keywords">return</span> value + <span class="symbol">x</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports.<span class="symbol">x</span> = <span class="symbol">x</span>;</span><br><span class="line">module.exports.addX = addX;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以改写为如下</span></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  <span class="symbol">x</span>: <span class="symbol">x</span>,</span><br><span class="line">  addX: addX,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let <span class="built_in">math</span> = <span class="built_in">require</span>(<span class="string">'./math.js'</span>);</span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'math.x'</span>,<span class="built_in">math</span>.x);</span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'math.addX'</span>, <span class="built_in">math</span>.addX(<span class="number">4</span>));</span><br></pre></td></tr></table></figure><h2 id="AMD-RequireJS-异步模块定义"><a href="#AMD-RequireJS-异步模块定义" class="headerlink" title="AMD (RequireJS) 异步模块定义"></a>AMD (RequireJS) 异步模块定义</h2><ul><li><code>AMD</code>  = <code>Asynchronous Module Definition</code>，即 <em>异步模块定义</em>。</li><li><strong><code>AMD</code> 规范加载模块是异步的，并允许函数回调，不必等到所有模块都加载完成，后续操作可以正常执行。</strong></li><li><code>AMD</code> 中，使用 <code>require</code> 获取依赖模块，使用 <code>exports</code> 导出 <code>API</code>。</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//规范 API</span></span><br><span class="line">define(id?, dependencies?, factory);</span><br><span class="line">define.amd = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义无依赖的模块</span></span><br><span class="line">define(&#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span><span class="params">(x,y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义有依赖的模块</span></span><br><span class="line">define([<span class="string">"alpha"</span>], <span class="function"><span class="keyword">function</span><span class="params">(alpha)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        verb: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> alpha.verb() + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="异步加载和回调"><a href="#异步加载和回调" class="headerlink" title="异步加载和回调"></a>异步加载和回调</h3><blockquote><p><strong>require([module], callback)</strong> 中 <code>callback</code> 为模块加载完成后的回调函数</p></blockquote><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//加载 <span class="built_in">math</span>模块，完成之后执行回调函数</span><br><span class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span><span class="params">(math)</span></span> &#123;</span><br><span class="line">　<span class="built_in">math</span>.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="RequireJS"><a href="#RequireJS" class="headerlink" title="RequireJS"></a>RequireJS</h3><p><code>RequireJS</code> 是一个前端模块化管理的工具库，遵循 <code>AMD</code> 规范，<code>RequireJS</code> 是对 <code>AMD</code> 规范的阐述。</p><p><code>RequireJS</code> 基本思想为，通过一个函数来将所有所需的或者所依赖的模块装载进来，然后返回一个新的函数（模块）。后续所有的关于新模块的业务代码都在这个函数内部操作。</p><p><code>RequireJS</code> 要求每个模块均放在独立的文件之中，并使用 <code>define</code> 定义模块，使用 <code>require</code> 方法调用模块。</p><p>按照是否有依赖其他模块情况，可以分为 <em>独立模块</em> 和 <em>非独立模块</em>。</p><ul><li>独立模块，不依赖其他模块，直接定义</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">define(&#123;</span><br><span class="line">    method1: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;,</span><br><span class="line">    method2: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        method1: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;,</span><br><span class="line">        method2: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>非独立模块，依赖其他模块</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">define([ <span class="string">'module1'</span>, <span class="string">'module2'</span> ], <span class="function"><span class="keyword">function</span>(<span class="params">m1, m2</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> m1 = <span class="built_in">require</span>(<span class="string">'module1'</span>);</span><br><span class="line">    <span class="keyword">var</span> m2 = <span class="built_in">require</span>(<span class="string">'module2'</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>require</code> 方法调用模块</li></ul><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">require(['foo', 'bar'], function(<span class="name">foo</span>, bar) &#123;</span><br><span class="line">    foo.func()<span class="comment">;</span></span><br><span class="line">    bar.func()<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="CMD-SeaJS"><a href="#CMD-SeaJS" class="headerlink" title="CMD (SeaJS)"></a>CMD (SeaJS)</h2><p><code>CMD</code>  = <code>Common Module Definition</code>，即 <em>通用模块定义</em>。<code>CMD</code> 是 <code>SeaJS</code> 在推广过程中对模块定义的规范化产出。</p><p>CMD规范和AMD类似，都主要运行于浏览器端，写法上看起来也很类似。主要是区别在于 <strong>模块初始化时机</strong></p><ul><li><strong>AMD中只要模块作为依赖时，就会加载并初始化</strong></li><li><strong>CMD中，模块作为依赖且被引用时才会初始化，否则只会加载。</strong></li><li><code>CMD</code> 推崇依赖就近，<code>AMD</code> 推崇依赖前置。</li><li><code>AMD</code> 的 <code>API</code> 默认是一个当多个用，<code>CMD</code> 严格的区分推崇职责单一。例如，<code>AMD</code> 里 <code>require</code> 分全局的和局部的。CMD里面没有全局的 <code>require</code>，提供 <code>seajs.use()</code> 来实现模块系统的加载启动。<code>CMD</code> 里每个 <code>API</code> 都简单纯粹。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AMD</span></span><br><span class="line">define([<span class="string">'./a'</span>,<span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//依赖一开始就写好</span></span><br><span class="line">    a.test();</span><br><span class="line">    b.test();</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//CMD</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">requie, exports, module</span>) </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//依赖可以就近书写</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line">    a.test();</span><br><span class="line">     </span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//软依赖</span></span><br><span class="line">    <span class="keyword">if</span> (status) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = requie(<span class="string">'./b'</span>);</span><br><span class="line">        b.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Sea-js"><a href="#Sea-js" class="headerlink" title="Sea.js"></a>Sea.js</h3><ul><li><a href="https://github.com/seajs/seajs" target="_blank" rel="noopener">Sea.js Github Page</a></li><li><a href="https://www.douban.com/note/283566440/" target="_blank" rel="noopener">SeaJS与RequireJS最大的区别</a></li></ul><p>使用Sea.js，在书写文件时，需要遵守CMD（Common Module Definition）模块定义规范。一个文件就是一个模块。</p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul><li>通过 <code>exports</code> 暴露接口。这意味着不需要命名空间了，更不需要全局变量。这是一种彻底的命名冲突解决方案。</li><li>通过 <code>require</code> 引入依赖。这可以让依赖内置，开发者只需关心当前模块的依赖，其他事情 <code>Sea.js</code> 都会自动处理好。对模块开发者来说，这是一种很好的 关注度分离，能让程序员更多地享受编码的乐趣。</li><li>通过 <code>define</code> 定义模块，更多详情参考<a href="http://wiki.jikexueyuan.com/project/hello-seajs/usage-guide.html" target="_blank" rel="noopener">SeasJS | 极客学院</a>。</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>例如，对于下述<code>util.js</code>代码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var org = &#123;&#125;;</span><br><span class="line">org.CoolSite = &#123;&#125;;</span><br><span class="line">org.CoolSite.Utils = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">org.<span class="module-access"><span class="module"><span class="identifier">CoolSite</span>.</span><span class="module"><span class="identifier">Utils</span>.</span></span>each = <span class="keyword">function</span> (arr) &#123;</span><br><span class="line">  <span class="comment">// 实现代码</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">org.<span class="module-access"><span class="module"><span class="identifier">CoolSite</span>.</span><span class="module"><span class="identifier">Utils</span>.</span></span>log = <span class="keyword">function</span> (str) &#123;</span><br><span class="line">  <span class="comment">// 实现代码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以采用SeaJS重写为</p><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">define(<span class="function"><span class="keyword">function</span><span class="params">(require, exports)</span> &#123;</span></span><br><span class="line">  exports.each = <span class="function"><span class="keyword">function</span> <span class="params">(arr)</span> &#123;</span></span><br><span class="line">    <span class="comment">// 实现代码</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  exports.<span class="built_in">log</span> = <span class="function"><span class="keyword">function</span> <span class="params">(str)</span> &#123;</span></span><br><span class="line">    <span class="comment">// 实现代码</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过 <code>exports</code> 就可以向外提供接口。通过 <code>require(&#39;./util.js&#39;)</code> 就可以拿到 <code>util.js</code> 中通过 <code>exports</code> 暴露的接口。这里的 <code>require</code>  可以认为是 <code>Sea.js</code> 给 JavaScript 语言增加的一个语法关键字，<strong>通过 <code>require</code> 可以获取其他模块提供的接口。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'./util.js'</span>);</span><br><span class="line">  exports.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 实现代码</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="SeaJS与RequireJS区别"><a href="#SeaJS与RequireJS区别" class="headerlink" title="SeaJS与RequireJS区别"></a>SeaJS与RequireJS区别</h2><p>二者区别主要表现在<strong>模块初始化时机</strong></p><ul><li><strong>AMD（RequireJS）中只要模块作为依赖时，就会加载并初始化。即尽早地执行（依赖）模块。相当于所有的require都被提前了，而且模块执行的顺序也不一定100%就是require书写顺序。</strong></li><li><strong>CMD（SeaJS）中，模块作为依赖且被引用时才会初始化，否则只会加载。即只会在模块真正需要使用的时候才初始化。模块加载的顺序是严格按照require书写的顺序。</strong></li></ul><p><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/front-end-2019/amd-cmd-nodek.png" alt="amd-cmd-nodek"></p><p>从规范上来说，AMD 更加简单且严谨，适用性更广，而在RequireJS强力的推动下，在国外几乎成了事实上的异步模块标准，各大类库也相继支持AMD规范。</p><p>但从SeaJS与CMD来说，也做了很多不错东西：1、相对自然的依赖声明风格 2、小而美的内部实现 3、贴心的外围功能设计 4、更好的中文社区支持。</p><h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><ul><li><code>UMD</code> = <code>Universal Module Definition</code>，即通用模块定义。<code>UMD</code> 是<code>AMD</code> 和 <code>CommonJS</code>的糅合。</li></ul><blockquote><p><code>AMD</code> 模块以浏览器第一的原则发展，异步加载模块。<br><code>CommonJS</code> 模块以服务器第一原则发展，选择同步加载。它的模块无需包装(unwrapped modules)。<br>这迫使人们又想出另一个更通用的模式 <code>UMD</code>（Universal Module Definition)，实现跨平台的解决方案。</p></blockquote><ul><li><code>UMD</code> 先判断是否支持 <code>Node.js</code> 的模块（<code>exports</code>）是否存在，存在则使用 <code>Node.js</code> 模块模式。再判断是否支持 <code>AMD</code>（<code>define</code> 是否存在），存在则使用 <code>AMD</code> 方式加载模块。</li></ul><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">function</span> (<span class="name">window</span>, factory) &#123;</span><br><span class="line">    if (<span class="name">typeof</span> exports === 'object') &#123;</span><br><span class="line">     </span><br><span class="line">        module.exports = factory()<span class="comment">;</span></span><br><span class="line">    &#125; else if (<span class="name">typeof</span> define === 'function' &amp;&amp; define.amd) &#123;</span><br><span class="line">     </span><br><span class="line">        define(<span class="name">factory</span>)<span class="comment">;</span></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">     </span><br><span class="line">        window.eventUtil = factory()<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="name">this</span>, function () &#123;</span><br><span class="line">    //module ...</span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="ES6-模块"><a href="#ES6-模块" class="headerlink" title="ES6 模块"></a>ES6 模块</h2><h3 id="ES6模块和CommonJS区别"><a href="#ES6模块和CommonJS区别" class="headerlink" title="ES6模块和CommonJS区别"></a>ES6模块和CommonJS区别</h3><ul><li><strong>ES6 模块输出的是值的引用，输出接口动态绑定，而 <code>CommonJS</code> 输出的是值的拷贝。</strong></li><li><strong><code>CommonJS</code> 模块是运行时加载，ES6 模块是编译时输出接口。</strong></li></ul><h4 id="CommonJS-输出值的拷贝"><a href="#CommonJS-输出值的拷贝" class="headerlink" title="CommonJS 输出值的拷贝"></a>CommonJS 输出值的拷贝</h4><p><strong>CommonJS 模块输出的是值的拷贝（类比于基本类型和引用类型的赋值操作）。对于基本类型，一旦输出，模块内部的变化影响不到这个值。对于引用类型，效果同引用类型的赋值操作。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'David'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeValue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    counter++;</span><br><span class="line">    obj.name = <span class="string">'Peter'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    counter: counter,</span><br><span class="line">    obj: obj,</span><br><span class="line">    changeValue: changeValue,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">var <span class="built_in">mod</span> = require(<span class="string">'./lib'</span>);</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">mod</span>.counter);  <span class="comment">// 3</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">mod</span>.obj.<span class="built_in">name</span>);  <span class="comment">//  'David'</span></span><br><span class="line"><span class="built_in">mod</span>.changeValue();</span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">mod</span>.counter);  <span class="comment">// 3</span></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">mod</span>.obj.<span class="built_in">name</span>);  <span class="comment">//  'Peter'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Or</span></span><br><span class="line">console.<span class="built_in">log</span>(require(<span class="string">'./lib'</span>).counter);  <span class="comment">// 3</span></span><br><span class="line">console.<span class="built_in">log</span>(require(<span class="string">'./lib'</span>).obj.<span class="built_in">name</span>);  <span class="comment">//  'Peter'</span></span><br></pre></td></tr></table></figure><ul><li><code>counter</code> 是基本类型值，模块内部值的变化不影响输出的值变化。</li><li><code>obj</code> 是引用类型值，模块内部值的变化影响输出的值变化。</li><li>上述两点区别，类比于基本类型和引用类型的赋值操作。</li></ul><p>也可以借助取值函数（<code>getter</code>），将 <code>counter</code> 转为引用类型值，效果如下。</p><blockquote><p>在类的内部，可以使用 <code>get</code> 和 <code>set</code> 关键字，对某个属性设置存执函数和取值函数，拦截该属性的存取行为。 —— <a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noopener">class | 阮一峰</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="keyword">get</span> counter() &#123;</span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line">  &#125;,</span><br><span class="line">  incCounter: incCounter,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">var <span class="built-in">mod</span> = require(<span class="string">'./lib'</span>);</span><br><span class="line"></span><br><span class="line">console.<span class="built-in">log</span>(<span class="built-in">mod</span>.counter);  <span class="comment">// 3</span></span><br><span class="line"><span class="built-in">mod</span>.incCounter();</span><br><span class="line">console.<span class="built-in">log</span>(<span class="built-in">mod</span>.counter); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="ES6-输出值的引用"><a href="#ES6-输出值的引用" class="headerlink" title="ES6 输出值的引用"></a>ES6 输出值的引用</h4><p>ES6 模块是动态关联模块中的值，输出的是值得引用。<strong>原始值变了，<code>import</code> 加载的值也会跟着变。</strong></p><blockquote><p><code>ES6</code> 模块的运行机制与 <code>CommonJS</code> 不一样。JS 引擎对脚本静态分析时，遇到模块加载命令 <code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。<strong>ES6 模块中，原始值变了，<code>import</code> 加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值</strong>。  —— <a href="http://es6.ruanyifeng.com/#docs/module-loader" target="_blank" rel="noopener">ES6 Module 的加载实现 | 阮一峰</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; counter, incCounter &#125; <span class="keyword">from</span> <span class="string">'./lib'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 3</span></span><br><span class="line">incCounter();</span><br><span class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="CommonJS-运行时加载-ES6静态编译"><a href="#CommonJS-运行时加载-ES6静态编译" class="headerlink" title="CommonJS 运行时加载 ES6静态编译"></a>CommonJS 运行时加载 ES6静态编译</h4><p><code>CommonJS</code> 模块是运行时加载，ES6 模块是编译时输出接口。</p><p>这是因为，<strong><code>CommonJS</code> 加载的是一个对象</strong>（即 <code>module.exports</code> 属性），该对象只有在脚本运行完才会生成。而 <strong><code>ES6</code> 模块不是对象</strong>，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p><p>ES6 模块是编译时输出接口，因此有如下2个特点</p><ul><li><code>import</code> 命令会被 JS 引擎静态分析，优先于模块内的其他内容执行</li><li><code>export</code> 命令会有变量声明提升的效果</li></ul><h5 id="import-优先执行"><a href="#import-优先执行" class="headerlink" title="import 优先执行"></a>import 优先执行</h5><p>在文件中的任何位置引入 <code>import</code> 模块都会被提前到文件顶部</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a.js'</span>)</span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">'./b'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b.js 先执行'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果:</span></span><br><span class="line"><span class="comment">// b.js 先执行</span></span><br><span class="line"><span class="comment">// a.js</span></span><br></pre></td></tr></table></figure><p>虽然 <code>a</code> 模块中 <code>import</code> 引入晚于 <code>console.log(&#39;a&#39;)</code>，但是它被 JS 引擎通过静态分析，提到模块执行的最前面，优于模块中的其他部分的执行。</p><h5 id="export-命令变量提升效果"><a href="#export-命令变量提升效果" class="headerlink" title="export 命令变量提升效果"></a>export 命令变量提升效果</h5><p>由于 <code>import</code> 和 <code>export</code> 是静态执行，所以 <code>import</code> 和 <code>export</code> 具有变量提升效果。即 <code>import</code> 和 <code>export</code> 命令在模块中的位置并不影响程序的输出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">'./b'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a.js'</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bar = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bar2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bar2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">bar3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bar3'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> a <span class="keyword">from</span> <span class="string">'./a'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果:</span></span><br><span class="line"><span class="comment">// &#123; bar: undefined, bar2: undefined, bar3: [Function: bar3] &#125;</span></span><br><span class="line"><span class="comment">// a.js</span></span><br></pre></td></tr></table></figure><p><code>a</code> 模块引用了 <code>b</code> 模块，<code>b</code> 模块也引用了 <code>a</code> 模块，<code>export</code> 声明的变量也是优于模块其它内容的执行的。但具体对变量赋值需要等到执行到相应代码的时候。</p><h3 id="ES6模块和CommonJS相同点"><a href="#ES6模块和CommonJS相同点" class="headerlink" title="ES6模块和CommonJS相同点"></a>ES6模块和CommonJS相同点</h3><h4 id="模块不会重复执行"><a href="#模块不会重复执行" class="headerlink" title="模块不会重复执行"></a>模块不会重复执行</h4><p>重复引入某个相同的模块时，模块只会执行一次。</p><h3 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h3><h4 id="CommonJS-模块循环依赖"><a href="#CommonJS-模块循环依赖" class="headerlink" title="CommonJS 模块循环依赖"></a>CommonJS 模块循环依赖</h4><p>CommonJS 模块的重要特性是加载时执行，即脚本代码在 <code>require</code> 的时候，就会全部执行。一旦出现某个模块被“循环加载”，<strong>就只输出已经执行的部分，还未执行的部分不会输出。</strong></p><h5 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo 1"></a>Demo 1</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js</span></span><br><span class="line">exports.done = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'在 a.js 之中，b.done = %j'</span>, b.done);</span><br><span class="line">exports.done = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a.js 执行完毕'</span>);</span><br></pre></td></tr></table></figure><p>上面代码之中，<code>a.js</code> 脚本先输出一个 <code>done</code> 变量，然后加载另一个脚本文件 <code>b.js</code>。注意，此时 <code>a.js</code> 代码就停在这里，等待 <code>b.js</code> 执行完毕，再往下执行。</p><p>再看 <code>b.js</code> 的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//b.js</span></span><br><span class="line">exports.done = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'在 b.js 之中，a.done = %j'</span>, a.done);</span><br><span class="line">exports.done = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b.js 执行完毕'</span>);</span><br></pre></td></tr></table></figure><p>上面代码之中，<code>b.js</code> 执行到第二行，就会去加载 <code>a.js</code>，这时，就发生了“循环加载”。系统会 <code>a.js</code> 模块对应对象的 <code>exports</code> 属性取值，可是因为 <code>a.js</code> 还没有执行完，从 <code>exports</code> 属性只能取回已经执行的部分，而不是最后的值。</p><p><code>a.js</code> 已经执行的部分，只有一行。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">exports.done</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>因此，对于 <code>b.js</code>来说，它从 <code>a.js</code> 只输入一个变量 <code>done</code>，值为 <code>false</code>。</p><p>然后，<strong><code>b.js</code> 接着往下执行，等到全部执行完毕，再把执行权交还给 <code>a.js</code></strong>。于是，<code>a.js</code> 接着往下执行，直到执行完毕。我们写一个脚本 <code>main.js</code>，验证这个过程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a.js'</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'在 main.js 之中, a.done=%j, b.done=%j'</span>, a.done, b.done);</span><br></pre></td></tr></table></figure><p>执行 <code>main.js</code>，运行结果如下。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js</span><br><span class="line"></span><br><span class="line">在 <span class="selector-tag">b</span><span class="selector-class">.js</span> 之中，<span class="selector-tag">a</span><span class="selector-class">.done</span> = false</span><br><span class="line"><span class="selector-tag">b</span><span class="selector-class">.js</span> 执行完毕</span><br><span class="line">在 <span class="selector-tag">a</span><span class="selector-class">.js</span> 之中，<span class="selector-tag">b</span><span class="selector-class">.done</span> = true</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.js</span> 执行完毕</span><br><span class="line">在 main<span class="selector-class">.js</span> 之中, <span class="selector-tag">a</span>.done=true, <span class="selector-tag">b</span>.done=true</span><br></pre></td></tr></table></figure><p>上面的代码证明了2点</p><ul><li>在 <code>b.js</code> 之中，<code>a.js</code> 没有执行完毕，只执行了第一行</li><li><code>main.js</code> 执行到第二行时，不会再次执行 <code>b.js</code>，而是输出缓存的 <code>b.js</code> 的执行结果，即它的第四行。</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">exports.done</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>总之，<strong>CommonJS 输入的是被输出值的拷贝，不是引用。</strong></p><p>另外，由于 CommonJS 模块遇到循环加载时，返回的是当前已经执行的部分的值，而不是代码全部执行后的值，两者可能会有差异。所以，输入变量的时候，必须非常小心。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>); <span class="comment">// 安全的写法 导入整体，保证module已经执行完成</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">'a'</span>).foo; <span class="comment">// 危险的写法</span></span><br><span class="line"></span><br><span class="line">exports.good = <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a.foo(<span class="string">'good'</span>, arg); <span class="comment">// 使用的是 a.foo 的最新值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.bad = <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> foo(<span class="string">'bad'</span>, arg); <span class="comment">// 使用的是一个部分加载时的值</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，如果发生循环加载，<code>require(&#39;a&#39;).foo</code> 的值很可能后面会被改写，改用 <code>require(&#39;a&#39;)</code> 会更保险一点。</p><h5 id="Demo-2"><a href="#Demo-2" class="headerlink" title="Demo 2"></a>Demo 2</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a starting'</span>);</span><br><span class="line">exports.done = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'in a, b.done ='</span>, b.done);</span><br><span class="line">exports.done = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a done'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b starting'</span>);</span><br><span class="line">exports.done = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'in b, a.done ='</span>, a.done);</span><br><span class="line">exports.done = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b done'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// node a.js</span></span><br><span class="line"><span class="comment">// 执行结果：</span></span><br><span class="line"><span class="comment">// a starting</span></span><br><span class="line"><span class="comment">// b starting</span></span><br><span class="line"><span class="comment">// in b, a.done = false</span></span><br><span class="line"><span class="comment">// b done</span></span><br><span class="line"><span class="comment">// in a, b.done = true</span></span><br><span class="line"><span class="comment">// a done</span></span><br></pre></td></tr></table></figure><p>从上面的执行过程中，可以看到，在 CommonJS 规范中，当遇到 <code>require()</code> 语句时，会执行 <code>require</code> 模块中的代码，<strong>并缓存执行的结果，当下次再次加载时不会重复执行，而是直接取缓存的结果。正因为此，出现循环依赖时才不会出现无限循环调用的情况。</strong></p><h4 id="ES6-模块循环依赖"><a href="#ES6-模块循环依赖" class="headerlink" title="ES6 模块循环依赖"></a>ES6 模块循环依赖</h4><p><strong>跟 CommonJS 模块一样，ES6 不会再去执行重复加载的模块，又由于 ES6 动态输出绑定的特性，能保证 ES6 在任何时候都能获取其它模块当前的最新值。</strong></p><h3 id="动态-import"><a href="#动态-import" class="headerlink" title="动态 import()"></a>动态 import()</h3><p>ES6 模块在编译时就会静态分析，<strong>优先于模块内的其他内容执行</strong>，所以导致了我们无法写出像下面这样的代码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">some</span> condition) &#123;</span><br><span class="line">  <span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">'./a'</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> b <span class="keyword">from</span> <span class="string">'./b'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="keyword">or</span> </span><br><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> (str + <span class="string">'b'</span>);</span><br></pre></td></tr></table></figure><p>因为编译时静态分析，导致了我们无法在条件语句或者拼接字符串模块，因为这些都是需要在运行时才能确定的结果在 ES6 模块是不被允许的，所以 动态引入<code>import()</code> 应运而生。</p><p><code>import()</code> 允许你在运行时动态地引入 ES6 模块，想到这，你可能也想起了 <code>require.ensure</code> 这个语法，但是它们的用途却截然不同的。</p><p><code>require.ensure</code> 的出现是 <code>webpack</code> 的产物，它是因为浏览器需要一种异步的机制可以用来异步加载模块，从而减少初始的加载文件的体积，所以如果在服务端的话， <code>require.ensure</code> 就无用武之地了，因为服务端不存在异步加载模块的情况，模块同步进行加载就可以满足使用场景了。 CommonJS 模块可以在运行时确认模块加载。</p><p>而 <code>import()</code> 则不同，它主要是为了解决 ES6 模块无法在运行时确定模块的引用关系，所以需要引入 <code>import()</code>。</p><p>先来看下它的用法</p><ul><li>动态的 <code>import()</code> 提供一个基于 <code>Promise</code> 的 <code>API</code></li><li>动态的 <code>import()</code> 可以在脚本的任何地方使用 <code>import()</code> 接受字符串文字，可以根据需要构造说明符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'./b'</span>;</span><br><span class="line"><span class="keyword">const</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./b'</span>).then(<span class="function">(<span class="params">&#123;foo&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(foo);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span>(str).then(<span class="function">(<span class="params">&#123;foo&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo = <span class="string">'foo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// babel-node a.js</span></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"><span class="comment">// foo</span></span><br><span class="line"><span class="comment">// foo</span></span><br></pre></td></tr></table></figure><p>当然，如果在浏览器端的 <code>import()</code> 的用途就会变得更广泛，比如 按需异步加载模块，那么就和 <code>require.ensure</code> 功能类似了。</p><p>因为是基于 <code>Promise</code> 的，所以如果你想要同时加载多个模块的话，可以是 <code>Promise.all</code> 进行并行异步加载。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Promise.all([</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./a.js'</span>),</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./b.js'</span>),</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">'./c.js'</span>),</span><br><span class="line">]).<span class="keyword">then</span>(<span class="function"><span class="params">([a, &#123;<span class="keyword">default</span>: b&#125;, &#123;c&#125;])</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a.js is loaded dynamically'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b.js is loaded dynamically'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c.js is loaded dynamically'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>还有 <code>Promise.race</code> 方法，它检查哪个 <code>Promise</code> 被首先 <code>resolved</code> 或 <code>reject</code>。我们可以使用 <code>import()</code> 来检查哪个 <code>CDN</code> 速度更快：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CDNs = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'jQuery.com'</span>,</span><br><span class="line">    url: <span class="string">'https://code.jquery.com/jquery-3.1.1.min.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">'googleapis.com'</span>,</span><br><span class="line">    url: <span class="string">'https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`------`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`jQuery is: <span class="subst">$&#123;<span class="built_in">window</span>.jQuery&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([</span><br><span class="line">  <span class="keyword">import</span>(CDNs[<span class="number">0</span>].url).then(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(CDNs[<span class="number">0</span>].name, <span class="string">'loaded'</span>)),</span><br><span class="line">  <span class="keyword">import</span>(CDNs[<span class="number">1</span>].url).then(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(CDNs[<span class="number">1</span>].name, <span class="string">'loaded'</span>))</span><br><span class="line">]).then(<span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`jQuery version: <span class="subst">$&#123;<span class="built_in">window</span>.jQuery.fn.jquery&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当然，如果你觉得这样写还不够优雅，也可以结合 <code>async/await</code> 语法糖来使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> myModule = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'./myModule.js'</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123;export1, export2&#125; = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'./myModule.js'</span>);</span><br><span class="line">  <span class="keyword">const</span> [module1, module2, module3] =</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">      <span class="keyword">import</span>(<span class="string">'./module1.js'</span>),</span><br><span class="line">      <span class="keyword">import</span>(<span class="string">'./module2.js'</span>),</span><br><span class="line">      <span class="keyword">import</span>(<span class="string">'./module3.js'</span>),</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态 <code>import()</code> 为我们提供了以异步方式使用 ES 模块的额外功能。</p><p>根据我们的需求动态或有条件地加载它们，这使我们能够更快，更好地创建更多优势应用程序。</p><h2 id="webpack中加载3种模块-语法"><a href="#webpack中加载3种模块-语法" class="headerlink" title="webpack中加载3种模块 | 语法"></a>webpack中加载3种模块 | 语法</h2><p>Webpack允许使用不同的模块类型，但是<code>底层</code>必须使用同一种实现。所有的模块可以直接在盒外运行。</p><ul><li>ES6 模块</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MyModule <span class="keyword">from</span> <span class="string">'./MyModule.js'</span>;</span><br></pre></td></tr></table></figure><ul><li>CommonJS(Require)</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var MyModule</span> = require(<span class="string">'./MyModule.js'</span>);</span><br></pre></td></tr></table></figure><ul><li>AMD</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">'./MyModule.js'</span>], <span class="function"><span class="keyword">function</span> <span class="params">(MyModule)</span> </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;对 JS 常见的模块化方案进行介绍和比较——&lt;code&gt;CommonJS&lt;/code&gt; &lt;code&gt;AMD&lt;/code&gt; &lt;code&gt;CMD&lt;/code&gt; &lt;code&gt;ES6 Module&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对 &lt;code&gt;ES6 Module&lt;/code&gt; 和 &lt;code&gt;CommonJS&lt;/code&gt; 的差异进行对比，介绍循环依赖和动态 &lt;code&gt;import()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Front-End Develop" scheme="https://lbs0912.github.io/categories/Front-End-Develop/"/>
    
    
      <category term="Front-End Developer" scheme="https://lbs0912.github.io/tags/Front-End-Developer/"/>
    
      <category term="JS" scheme="https://lbs0912.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>HomePageImage</title>
    <link href="https://lbs0912.github.io/2018/09/12/home-page-img/"/>
    <id>https://lbs0912.github.io/2018/09/12/home-page-img/</id>
    <published>2018-09-12T08:50:21.000Z</published>
    <updated>2019-11-09T15:38:22.409Z</updated>
    
    <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/Blog-20190315/my-riding-bike.jpg" alt="my-riding-bike"></div><div class="group-picture-column" style="width: 50%;"><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/Blog-20190315/football.jpg" alt="football"></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/Blog-20190315/sjtu-title-3.jpg" alt="sjtu-title-3"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/Blog-20190315/front-end-logo-1.jpg" alt="front-end-logo-1"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="https://image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/Blog-20190315/java-c-vs.jpg" alt="java-c-vs123"></div></div></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-picture-container&quot;&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;widt
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo Blog 搭建与配置</title>
    <link href="https://lbs0912.github.io/2016/03/10/blog-configure/"/>
    <id>https://lbs0912.github.io/2016/03/10/blog-configure/</id>
    <published>2016-03-10T06:35:26.000Z</published>
    <updated>2019-11-09T15:50:33.844Z</updated>
    
    <content type="html"><![CDATA[<ul><li>记录 <code>Hexo Blog</code> 的搭建与配置</li><li>对 <code>Next</code> 主题进行定制，添加搜索，统计，置顶，加密阅读，自定义CSS等</li></ul><a id="more"></a><h2 id="Changelog"><a href="#Changelog" class="headerlink" title="Changelog"></a>Changelog</h2><ul><li>2018/08/23，撰写</li><li>2018/09/04，整理</li><li>2018/09/25，添加 <code>Font Awesome</code>使用</li><li>2019/03/18，添加文章加密阅读</li><li>本博客全部配置信息可在 <a href="https://github.com/lbs0912/BlogSpace" target="_blank" rel="noopener">BlogSpace | lbs0912-github</a> 查看</li></ul><h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><h3 id="Hexo-基础使用"><a href="#Hexo-基础使用" class="headerlink" title="Hexo 基础使用"></a>Hexo 基础使用</h3><ul><li><a href="https://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="noopener">使用GitHub和Hexo搭建免费静态Blog</a></li><li><a href="http://ehlxr.me/2016/08/30/%E4%BD%BF%E7%94%A8Hexo%E5%9F%BA%E4%BA%8EGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/" target="_blank" rel="noopener">使用Hexo基于GitHub-Pages搭建个人博客（三）</a></li></ul><h3 id="Blog-进阶管理"><a href="#Blog-进阶管理" class="headerlink" title="Blog 进阶管理"></a>Blog 进阶管理</h3><ul><li><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">Next Theme 官方配置手册</a></li><li><a href="http://feg.netease.com/archives/634.html" target="_blank" rel="noopener">如何更好地对hexo博客管理</a></li><li><a href="http://blog.junyu.io/posts/0010-hexo-learn-from-Never-yu.html#background" target="_blank" rel="noopener">Hexo 博客进阶配置</a></li><li><a href="https://zhuanlan.zhihu.com/p/33616481" target="_blank" rel="noopener">Hexo搭建的GitHub博客之优化大全</a></li><li><a href="https://timding.top/2017/09/18/Hexo-NexT-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%86%8C-%E4%BA%8C/" target="_blank" rel="noopener">Next Theme 相册配置</a> </li><li><a href="https://juejin.im/post/5b8bc953518825284910dcdd" target="_blank" rel="noopener">搭建Hexo 相册</a></li></ul><h3 id="优质博客参考"><a href="#优质博客参考" class="headerlink" title="优质博客参考"></a>优质博客参考</h3><ul><li><a href="https://sunmengyuan.github.io/garden/" target="_blank" rel="noopener">Sunmengyuan Blog</a></li><li><a href="http://zhangwenli.com/" target="_blank" rel="noopener">羡辙 Blog</a></li><li><a href="https://www.byvoid.com/" target="_blank" rel="noopener">BYvoid</a></li></ul><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><blockquote><p>Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.   — <a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo</a></p></blockquote><p>参考 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo官网</a>了解Hexo更多信息。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install </span>hexo-cli -g</span><br><span class="line">mkdir <span class="keyword">Blog </span>&amp;&amp; cd <span class="keyword">Blog</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">hexo </span>init <span class="keyword">blog</span></span><br><span class="line"><span class="keyword">cd </span><span class="keyword">blog</span></span><br><span class="line"><span class="keyword">npm </span><span class="keyword">install</span></span><br><span class="line"><span class="keyword">hexo </span>server</span><br></pre></td></tr></table></figure><p>Hexo生成的目录结构如下</p><ul><li><code>.deploy</code> :  需要部署的文件</li><li><code>node_modules</code></li><li><code>public</code>:  生成的静态网页文件</li><li><code>scaffolds</code>:  模板</li><li><code>source</code>: 博客正文和其他源文件，404，favicon，CNAME<ul><li><code>_drafts</code>:  草稿</li><li><code>_posts</code>:  文章</li></ul></li><li><code>themes</code>:  主题</li><li><code>_config.yml</code>:  全局配置文件</li><li><code>package.json</code></li></ul><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">hexo new page archive</span><br><span class="line"><span class="comment"># 创建分类目录并初始化index.md  等同于  hexo n</span></span><br><span class="line"></span><br><span class="line">hexo server    </span><br><span class="line"><span class="comment"># run hexo server  等同于  hexo s</span></span><br><span class="line"></span><br><span class="line">hexo generate  </span><br><span class="line"><span class="comment"># Generate static files   等同于  hexo g</span></span><br><span class="line"></span><br><span class="line">hexo deploy   </span><br><span class="line"><span class="comment"># Deploy to remote sites   等同于  hexo d</span></span><br><span class="line"></span><br><span class="line">hexo clean  <span class="comment"># 清空缓存文件</span></span><br><span class="line">hexo -v     <span class="comment"># 查看hexo版本</span></span><br><span class="line">hexo <span class="built_in">help</span>   <span class="comment"># 查看hexo帮助</span></span><br><span class="line">hexo d -g   <span class="comment"># 生成部署  组合命令</span></span><br><span class="line">hexo s -g   <span class="comment"># 生成预览  组合命令</span></span><br><span class="line">hexo s --debug  <span class="comment"># 本地预览，并开启调试模式</span></span><br></pre></td></tr></table></figure><p>在后续博文发布时，依次执行如下命令</p><ul><li><code>hexo clean</code>: 清空缓存文件</li><li><code>hexo g</code>: 编译产生静态文件</li><li><code>hexo s</code>: 本地预览，可选</li><li><code>hexo d</code>: 部署到服务端</li></ul><h2 id="Hexo-to-GitHub"><a href="#Hexo-to-GitHub" class="headerlink" title="Hexo to GitHub"></a>Hexo to GitHub</h2><h3 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h3><ul><li>创建一个仓库，并命名为 <code>YourAccountName.github.io</code>（此处以<code>lbs0912.github.io</code>为例）</li><li>设置仓库属性，选择 <code>GitHub Page</code> 的主题，访问 <code>https://lbs0912.github.io/</code>进行预览</li></ul><h3 id="同步内容至-GitHub"><a href="#同步内容至-GitHub" class="headerlink" title="同步内容至 GitHub"></a>同步内容至 GitHub</h3><p>在Hexo安装目录下打开 <code>_config.yml</code> 文件，进行如下修改</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repository:</span> https:<span class="comment">//github.com/lbs0912/lbs0912.github.io.git</span></span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure><blockquote><p>该配置文件遵循 <code>Yaml</code> 语法，<code>type:</code> 和 <code>git</code> 中间需有一空格。</p></blockquote><p>对静态网页的标题，子标题，介绍，时区等内容进行如下设置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Liu</span> <span class="string">Baoshuai's</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">Do</span> <span class="string">one</span> <span class="string">thing</span> <span class="string">at</span> <span class="string">a</span> <span class="string">time</span> <span class="string">and</span> <span class="string">do</span> <span class="string">well.</span>  </span><br><span class="line"><span class="attr">description:</span> <span class="string">Record</span> <span class="string">and</span> <span class="string">become</span> <span class="string">better</span> <span class="string">myself.</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Liu</span> <span class="string">Baoshuai</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">https://lbs0912.github.io/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="string">//...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br></pre></td></tr></table></figure><p>配置文件修改完成后，输入如下命令，将更新后的内容同步至GitHub。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git --save  <span class="comment">#deploy to git  </span></span><br><span class="line"></span><br><span class="line">hexo clean      </span><br><span class="line">hexo generate    <span class="comment"># or hexo g</span></span><br><span class="line">hexo deploy      <span class="comment"># or hexo d</span></span><br></pre></td></tr></table></figure><p>打开 <code>https://lbs0912.github.io/</code> 可以访问博客界面。</p><h2 id="域名和DNS"><a href="#域名和DNS" class="headerlink" title="域名和DNS"></a>域名和DNS</h2><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>申请域名用于博客访问。此处申请域名 <code>liubaoshuai.com</code>。</p><blockquote><p>已申请的域名包括</p><ul><li><code>liubaoshuai.com</code></li><li><code>liubaoshuai.tech</code></li></ul></blockquote><h3 id="设置CNAME"><a href="#设置CNAME" class="headerlink" title="设置CNAME"></a>设置CNAME</h3><p>在Hexo的安装目录下的 <code>source</code> 目录下，创建 <code>CNAME</code> 文件，并存入申请的域名 <code>liubaoshuai.com</code>。</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>推荐使用 <a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSPod</a> 进行DNS解析。</p><p>此处，由于域名 <code>http://liubaoshuai.com/</code> 在阿里云购买，故使用阿里云的 DNS 云解析。DNS 界面进行如下设置。</p><table><thead><tr><th>记录类型</th><th>主机记录</th><th>记录值</th></tr></thead><tbody><tr><td>CNAME</td><td>www</td><td>lbs0912.github.io</td></tr><tr><td>A</td><td>@</td><td>192.30.252.154</td></tr><tr><td>A</td><td>@</td><td>192.30.252.153</td></tr></tbody></table><blockquote><p><a href="https://help.github.com/en/articles/troubleshooting-custom-domains#dns-configuration-errors" target="_blank" rel="noopener">DNS Update | github</a></p></blockquote><p>其中A记录为GitHub Page提供的IP地址，可以访问 <a href="https://help.github.com/articles/github-s-ip-addresses/" target="_blank" rel="noopener">GitHub Page</a> 查询最新 <code>IP</code> 地址。</p><p>最后，执行如下命令，并访问 <code>liubaoshuai.com</code> 查看修改效果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  </span><br><span class="line">hexo g    <span class="comment"># or hexo generate</span></span><br><span class="line">hexo d    <span class="comment"># or hexo deploy</span></span><br></pre></td></tr></table></figure><ul><li>至此，便可通过访问 <code>liubaoshuai.com</code> 来访问自己的博客。</li><li>访问 <code>lbs0912.github.io</code>，会被重定向到 <code>liubaoshuai.com</code> 网址。</li></ul><h2 id="Blog-配置"><a href="#Blog-配置" class="headerlink" title="Blog 配置"></a>Blog 配置</h2><ul><li><strong><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">Next Theme 官方配置手册</a></strong></li></ul><h3 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h3><p>安装Hexo插件来增强Hexo效果和美化页面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-deployer-git --save  <span class="comment">#deploy to git</span></span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-stylus --save</span><br><span class="line">npm install hexo-generator-feed --save   <span class="comment"># RSS</span></span><br><span class="line">npm install hexo-generator-sitemap --save <span class="comment">#sitemap</span></span><br></pre></td></tr></table></figure><h3 id="添加Meta信息"><a href="#添加Meta信息" class="headerlink" title="添加Meta信息"></a>添加Meta信息</h3><p><code>Hexo</code> 默认的文件头只有<code>title</code>、<code>date</code>、<code>tags</code> 属性，生成的 <code>html</code> 缺少 <code>Meta</code>信息，不利于搜索引擎收录。建议自行在文件头中添加 <code>keywords</code> 和 <code>description</code> 属性。<code>categories</code> 属性可自行选择是否添加。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="comment">##文章标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="comment">##时间，格式为 YYYY-MM-DD HH:mm:ss</span></span><br><span class="line"><span class="attr">categories:</span> <span class="comment">##分类</span></span><br><span class="line"><span class="attr">tags:</span> <span class="comment">##标签，多标签格式为 [tag1,tag2,...]</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment">##文章关键词，多关键词格式为 keyword1,keywords2,...</span></span><br><span class="line"><span class="attr">description:</span> <span class="comment">##文章描述</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>文件头模板如上所示，一个文件头实例如下所示。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">这是一篇测试文章</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2015</span><span class="bullet">-03</span><span class="bullet">-21</span> <span class="number">15</span><span class="string">:13:48</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[Hexo,测试]</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">Hexo,文章,测试</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">这是一篇测试文章，用于测试Hexo文章文件头。</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>需要注意的是，多个标签也可采用如下写法</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">tags:</span></span><br><span class="line">  - Testing Tag</span><br><span class="line">  - Another Tag</span><br></pre></td></tr></table></figure><h3 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h3><p>在 Hexo 安装目录下打开 <code>_config.yml</code>，添加如下配置， 为博客添加分页功能。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Plugins</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">8</span> <span class="comment">##首页默认8篇文章标题，如果值为0不分页</span></span><br><span class="line"><span class="attr">  order_by:</span> <span class="bullet">-date</span></span><br><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">8</span> <span class="comment">##归档页面默认8篇文章标题，如果值为0不分页</span></span><br><span class="line"><span class="attr">  yearly:</span> <span class="literal">true</span> <span class="comment">##生成年视图</span></span><br><span class="line"><span class="attr">  monthly:</span> <span class="literal">true</span> <span class="comment">##生成月视图</span></span><br><span class="line"><span class="attr">tag_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">8</span> <span class="comment">##标签页面默认8篇文章，如果值为0不分页</span></span><br><span class="line"><span class="attr">category_generator:</span> </span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">8</span> <span class="comment">##分类页面默认8篇文章，如果值为0不分页</span></span><br></pre></td></tr></table></figure><h3 id="Hexo-主题配置"><a href="#Hexo-主题配置" class="headerlink" title="Hexo 主题配置"></a>Hexo 主题配置</h3><p>访问如下链接，查看 Hexo 主题列表</p><ul><li><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo Themes List</a></li><li><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">Hexo Themes List on GitHub</a> </li></ul><h4 id="Next-Theme"><a href="#Next-Theme" class="headerlink" title="Next Theme"></a>Next Theme</h4><ul><li>参考 <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">Next Theme | github</a> 完成基本配置。</li><li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">Next Theme Configure</a></li><li>参考 <a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">Next主题美化进阶 | Segmentfault</a> 进行定制。</li><li>Install</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>cd hexo</span><br><span class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br></pre></td></tr></table></figure><ul><li>将下载好的 <code>Huno</code> 主题放置在 <code>blog/themes</code> 目录下。修改 <code>Hexo</code> 配置文件<code>_config.xml</code></li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: <span class="keyword">next</span></span><br></pre></td></tr></table></figure><ul><li>Update</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>cd themes/<span class="keyword">next</span></span><br><span class="line"><span class="variable">$ </span>git pull</span><br></pre></td></tr></table></figure><ul><li>设置界面个人头像和网页收藏夹图标</li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Site favicon</span></span><br><span class="line"><span class="meta">#favicon: /favicon.png</span></span><br><span class="line">favicon: https:<span class="comment">//image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/Blog-20190315/blog-logo-1.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># Site logo</span></span><br><span class="line"><span class="meta">#logo: /avatar.png</span></span><br><span class="line">logo: https:<span class="comment">//image-bed-20181207-1257458714.cos.ap-shanghai.myqcloud.com/Blog-20190315/blog-logo-1.jpg</span></span><br></pre></td></tr></table></figure><ul><li>作品设计参考网站<ul><li><a href="https://dribbble.com/" target="_blank" rel="noopener">Dribbble</a></li><li><a href="https://www.behance.net/" target="_blank" rel="noopener">Behance</a></li></ul></li></ul><h4 id="Huno-Theme"><a href="#Huno-Theme" class="headerlink" title="Huno Theme"></a>Huno Theme</h4><p>参考 <a href="https://github.com/letiantian/huno" target="_blank" rel="noopener">Huno Theme | github</a> 完成基本配置。</p><h3 id="集成第三方服务"><a href="#集成第三方服务" class="headerlink" title="集成第三方服务"></a>集成第三方服务</h3><ul><li><a href="https://theme-next.iissnan.com/getting-started.html#third-party-services" target="_blank" rel="noopener">Next Theme 官方配置手册</a></li></ul><h4 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h4><ul><li>用户名：15821929853</li><li>密码：Ab758123aB</li><li>百度统计-脚本 ID：17082ee15df20dad9762c5512f336eb2</li><li>登陆 <a href="https://tongji.baidu.com/web/homepage/index?castk=df83afg752126b970d267" target="_blank" rel="noopener">百度统计</a> 网站，可以查阅网站访问量</li></ul><h4 id="阅读次数统计-LeanCloud"><a href="#阅读次数统计-LeanCloud" class="headerlink" title="阅读次数统计 LeanCloud"></a>阅读次数统计 LeanCloud</h4><ul><li><a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud</a></li><li><a href="https://notes.doublemine.me/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">LeanCloud 配置</a></li><li>使用 <code>Github</code> 第三方账登录 <code>leancloud</code></li><li>APP ID：gksxcfwJlMV3zkhz1pQc7pl2-gzGzoHsz</li><li>APP Key：kjOanp812G7TIGMSQpPCVIhj</li></ul><h4 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h4><ul><li><a href="https://theme-next.iissnan.com/third-party-services.html#algolia-search" target="_blank" rel="noopener">搜索服务配置</a></li></ul><p><code>NexT</code> 主题支持集成 <code>Swiftype</code>，<code>微搜索</code>，<code>Local Search</code> 和 <code>Algolia</code> 搜索功能。<code>Swiftype</code> 和 <code>Algolia</code> 均收费，可以采用 <code>Hexo</code> 提供的 <code>Local Search</code> 搜索服务，其原理是通过 <code>hexo-generator-searchdb</code> 插件在本地生成一个 <code>search.xml</code> 文件，搜索的时候从这个文件中根据关键字检索出相应的链接。</p><h4 id="博文分享功能"><a href="#博文分享功能" class="headerlink" title="博文分享功能"></a>博文分享功能</h4><ul><li><p><a href="https://blog.csdn.net/lanuage/article/details/78991798" target="_blank" rel="noopener">hexo next主题为博客添加分享功能</a></p></li><li><p>百度分享</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidushare:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">button</span>  <span class="comment"># 需要设置 type: button </span></span><br><span class="line"><span class="attr">  baidushare:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>likely 分享</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">likely:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  look:</span> <span class="string">light</span>  <span class="comment"># available values: normal, light, small, big</span></span><br><span class="line"><span class="attr">  networks:</span></span><br><span class="line"><span class="attr">    twitter:</span> <span class="string">Tweet</span></span><br><span class="line"><span class="attr">    facebook:</span> <span class="string">Share</span></span><br><span class="line"><span class="attr">    linkedin:</span> <span class="string">Link</span></span><br><span class="line">    <span class="comment">#gplus: Plus</span></span><br><span class="line">    <span class="comment">#vkontakte: Share</span></span><br><span class="line">    <span class="comment">#odnoklassniki: Class</span></span><br><span class="line">    <span class="comment">#telegram: Send</span></span><br><span class="line"><span class="attr">    whatsapp:</span> <span class="string">Send</span></span><br><span class="line">    <span class="comment">#pinterest: Pin</span></span><br></pre></td></tr></table></figure><h4 id="Disqus-评论"><a href="#Disqus-评论" class="headerlink" title="Disqus 评论"></a>Disqus 评论</h4><ul><li><p>使用谷歌账户登录Disqus</p></li><li><p>shortName：liubaoshuaiBlog</p></li><li><p>之后，在撰写文章时，顶部信息添加 <code>comments</code> 字段可控制是否展示评论</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Demo</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-03</span><span class="bullet">-10</span> <span class="number">14</span><span class="string">:35:26</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Demo</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[LeetCode,Programing,Algorithm]</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">LeetCode</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h3><ul><li>推荐使用 <a href="http://www.qq.com/404/" target="_blank" rel="noopener">腾讯公益404</a>，当然也可以自定义 404 页面，例如本博客采用的 404 页面。</li><li>在 <code>blog/source</code> 目录下创建 <code>404.html</code>，引入腾讯公益404脚本。(该效果需要部署到服务器才能预览，本地服务无法预览)</li></ul><h3 id="Fork-me-on-GitHub"><a href="#Fork-me-on-GitHub" class="headerlink" title="Fork me on GitHub"></a>Fork me on GitHub</h3><p>在 <a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">Fork me on GitHub Theme</a> 上获取源代码（有多种样式可选），并将 <code>&lt;a&gt;</code> 标签的 <code>href</code> 属性的链接修改为自己的 <a href="https://github.com/lbs0912" target="_blank" rel="noopener">GitHub-lbs0912</a> 地址。</p><p>以 Huno 主题为例，将上述代码添加到 <code>./themes/huno/layout/_layout.ejs</code> 文件的<code>&lt;body&gt;</code> 标签内即可。</p><blockquote><p>修改源代码中<code>img</code>标签的样式为<code>position:fixed</code>，可以将<code>Fork me on GitHub</code>固定于浏览器界面顶部。</p></blockquote><h3 id="背景音乐播放设置"><a href="#背景音乐播放设置" class="headerlink" title="背景音乐播放设置"></a>背景音乐播放设置</h3><p>参考 <a href="http://weqeo.com/2016/10/11/Hexo%E4%B8%AD%E6%92%AD%E6%94%BE%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E7%9A%84%E5%AE%9E%E8%B7%B5/" target="_blank" rel="noopener">Hexo中播放网易云音乐的实践</a> 完成该部分设置。</p><p>以 Huno 主题为例，将网易云音乐播放外链放置在 <code>./themes/next/layout/_macro/sidebar.swig</code> 文件中。</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!is_home()) &#123; %&gt; </span><br><span class="line">    &lt;iframe frameborder="no" border="0" marginwidth="0" style="margin-top: 40px;" marginheight="0" width=330 height=86  src="//music.163.com/outchain/player?type=2&amp;id=394653&amp;auto=0&amp;height=66"&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h3 id="为-Blog-添加-README"><a href="#为-Blog-添加-README" class="headerlink" title="为 Blog 添加 README"></a>为 Blog 添加 README</h3><p>本博客中，使用了 <code>Github</code> 服务器作为托管，博客内容被存储到 <code>Github</code> 中。</p><p>一般情况下，需要给 <code>Github</code> 中每一个项目添加 <code>README.md</code> 文件进行说明。</p><p>但是，在 <code>Blog</code> 项目中，在 <code>blog\source</code> 目录下创建的 <code>README.md</code> 文件，会被 <code>hexo</code> 解析掉，并不会被部署到 <code>Github</code> 服务器上。</p><h4 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h4><ul><li>在博客 <code>Source</code> 目录下创建 <code>README.md</code> 文件</li><li>修改博客配置文件的 <code>skip_render</code> 字段如下 </li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_render: <span class="module-access"><span class="module"><span class="identifier">README</span>.</span></span>md</span><br></pre></td></tr></table></figure><h4 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h4><p>正确的解决方法如下。</p><ul><li>把 <code>README.md</code> 文件的后缀名改成 <code>.MDOWN</code></li><li>仍将该文件置于 <code>blog/source</code> 文件夹</li><li>这样可以保证 <code>hexo</code> 不会解析该文件，同时 <code>Github</code> 也会将其作为<code>.MD</code> 文件解析</li></ul><h3 id="背景效果优化"><a href="#背景效果优化" class="headerlink" title="背景效果优化"></a>背景效果优化</h3><p>此处介绍博客背景动态效果图的添加，以及鼠标点击界面出现心形图案的相关设置。</p><ul><li>下载 <a href="https://github.com/lbs0912/lbs0912.github.io/blob/master/js/src/love.js" target="_blank" rel="noopener">love.js</a> 和 <a href="https://github.com/lbs0912/lbs0912.github.io/blob/master/js/src/particle.js" target="_blank" rel="noopener">particle.js</a> 文件，将其存放至<code>\themes\huno\source\js\src</code>目录下。</li><li>在 <code>\themes\huno\layout\layout.ejs</code> 文件末尾，引入上述 2 个 js 文件。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 背景动画 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/particle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/love.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h3><ul><li>修改 <code>./node_modules/hexo-generator-index/lib/generator.js</code> 文件的</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var posts</span> = locals.posts.sort(config.index_generator.order_by);</span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a.<span class="built_in">top</span> &amp;&amp; b.<span class="built_in">top</span>) &#123; // 两篇文章<span class="built_in">top</span>都有定义</span><br><span class="line">            <span class="keyword">if</span>(a.<span class="built_in">top</span> == b.<span class="built_in">top</span>) <span class="keyword">return</span> b.date - a.date; // 若<span class="built_in">top</span>值一样则按照文章日期降序排</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.<span class="built_in">top</span> - a.<span class="built_in">top</span>; // 否则按照<span class="built_in">top</span>值降序排</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.<span class="built_in">top</span> &amp;&amp; !b.<span class="built_in">top</span>) &#123; // 以下是只有一篇文章<span class="built_in">top</span>有定义，那么将有<span class="built_in">top</span>的排在前面（这里用异或操作居然不行<span class="number">233</span>）</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.<span class="built_in">top</span> &amp;&amp; b.<span class="built_in">top</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ul><li>设置文章置顶：在文件的头部添加 <code>top</code> 值，<code>top</code> 值越大，文章越靠前。若两篇文章的 <code>top</code> 值一样，则按照默认的日期排序。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Webpack</span> <span class="string">Notes</span> <span class="bullet">-</span> <span class="number">1</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-01</span><span class="bullet">-19</span> <span class="number">11</span><span class="string">:15:48</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Front-end</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[Webpack,Front-end]</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">webpack,front-end</span> </span><br><span class="line"><span class="attr">top:</span> <span class="number">5</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="博文收起添加"><a href="#博文收起添加" class="headerlink" title="博文收起添加"></a>博文收起添加</h3><p>在 <code>.MD</code> 文件中添加如下标识。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure><ul><li>该标识前的会在博客首页展示（可以在该标识前添加简要说明）</li><li>该标识后的博文会被收起折叠。</li></ul><h3 id="文章加密阅读"><a href="#文章加密阅读" class="headerlink" title="文章加密阅读"></a>文章加密阅读</h3><ul><li><p>Ref - <a href="https://segmentfault.com/a/1190000009544924#articleHeader23" target="_blank" rel="noopener">next主题 - 文章加密阅读</a></p></li><li><p>打开 <code>themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig</code> 文件，添加如下代码</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'密码错误！'</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span> (history.length === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                    location.replace(<span class="string">"http://xxxxxxx.xxx"</span>); <span class="comment">// 这里替换成你的首页</span></span></span><br><span class="line"><span class="actionscript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">                    history.back();</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>之后，在撰写文章时，顶部信息添加 <code>password</code> 字段即可</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Demo</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-03</span><span class="bullet">-10</span> <span class="number">14</span><span class="string">:35:26</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Demo</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">[LeetCode,Programing,Algorithm]</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">LeetCode</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="定制CSS"><a href="#定制CSS" class="headerlink" title="定制CSS"></a>定制CSS</h3><ul><li>在 <code>.\themes\next\source\css\_custom\custom.styl</code> 文件中，添加自定义CSS样式。</li></ul><p>定制CSS样式后，可以使用如下效果。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-blue"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">span</span>&gt;</span>， </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-purple"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-green"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-yellow"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-left-red"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-left-yellow"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-left-green"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-left-blue"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-left-purple"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-right-red"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-right-yellow"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-right-green"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-right-blue"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-right-purple"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-top-red"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-top-yellow"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-top-green"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-top-blue"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"div-border-top-purple"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"yu-1"</span>&gt;</span>动画<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"download"</span> <span class="attr">href</span>=<span class="string">"https://git-scm.com/download/win"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-download"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span> Download Now<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-center"</span>&gt;</span>引用居中效果<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="链接文本样式修改"><a href="#链接文本样式修改" class="headerlink" title="链接文本样式修改"></a>链接文本样式修改</h4><p>将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。打开<code>themes\next\source\css\_custom\custom.styl</code> 文件 ，添加如下 <code>css</code> 样式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Custom styles.</span></span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#0477ab</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文字增加背景色块"><a href="#文字增加背景色块" class="headerlink" title="文字增加背景色块"></a>文字增加背景色块</h4><ul><li><p>参考 <a href="http://blog.junyu.pro/posts/0010-hexo-learn-from-Never-yu.html#background" target="_blank" rel="noopener">Hexo博客设置进阶</a> 完成该部分的设置。</p></li><li><p>使用 <code>inline-blue</code>, <code>inline-purple</code>, <code>inline-yellow</code>,<code>inline-green</code> 可以对文字背景色块进行修改。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-blue"</span>&gt;</span>站点配置文件<span class="tag">&lt;/<span class="name">span</span>&gt;</span>， </span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inline-purple"</span>&gt;</span>主题配置文件<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="图形边框效果"><a href="#图形边框效果" class="headerlink" title="图形边框效果"></a>图形边框效果</h4><p>参考 <a href="http://blog.junyu.pro/posts/0010-hexo-learn-from-Never-yu.html#background" target="_blank" rel="noopener">Hexo博客设置进阶</a> 完成该部分的设置。</p><h4 id="引用边框变色"><a href="#引用边框变色" class="headerlink" title="引用边框变色"></a>引用边框变色</h4><p>参考<a href="http://blog.junyu.pro/posts/0010-hexo-learn-from-Never-yu.html#background" target="_blank" rel="noopener">Hexo博客设置进阶</a></p><h4 id="引用居中效果"><a href="#引用居中效果" class="headerlink" title="引用居中效果"></a>引用居中效果</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-center"</span>&gt;</span>引用居中效果<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Font-Awesome-使用"><a href="#Font-Awesome-使用" class="headerlink" title="Font Awesome 使用"></a>Font Awesome 使用</h4><ul><li><a href="http://fontawesome.dashgame.com/" target="_blank" rel="noopener">Font Awesome</a></li></ul><p>使用 <code>Font Awesome</code> 图标时，只需要使用 CSS 前缀 <code>fa</code>，再加上图标名称即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-pencil"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-pencil</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-pencil-square-o"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-pencil-square-o</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-camera-retro"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-camera-retro</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-share-square-o"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-share-square-o</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-tag"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-tag</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-video-camera"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-video-camera</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-ban"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-ban</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-code"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-code</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-cloud"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-cloud</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-pie-chart"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-pie-chart</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-thumbs-o-up"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-thumbs-o-up</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-chain"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-chain</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-link"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-link</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-edit"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-edit</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-share-alt"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-share-alt</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-jsfiddle"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-jsfiddle</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-git"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-git</span><br><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-codepen"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span> fa-codepen</span><br></pre></td></tr></table></figure><h3 id="主页图片展示"><a href="#主页图片展示" class="headerlink" title="主页图片展示"></a>主页图片展示</h3><ul><li>新建博文，设置 <code>type: &quot;picture&quot;</code>，使用 <code>{\% gp x-x \%} ... {\% endgp \%}</code> 标签引用要展示的图片地址。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: HomePageImage</span><br><span class="line">type: "picture"</span><br><span class="line">top: 999999999999999</span><br><span class="line">date: 2018-09-12 16:50:21</span><br><span class="line">categories: HomePageImage</span><br><span class="line">tags: HomePageImage</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&#123;% gp 5-3 %&#125;</span><br><span class="line">![<span class="string">my-riding-bike</span>](<span class="link">http://ojxk3q6gs.bkt.clouddn.com/my-riding-bike.jpg</span>)</span><br><span class="line">![<span class="string">football</span>](<span class="link">http://ojxk3q6gs.bkt.clouddn.com/football.jpg</span>)</span><br><span class="line">![<span class="string">sjtu-title-3</span>](<span class="link">http://ol3kbaay9.bkt.clouddn.com/sjtu-title-3.jpg</span>)</span><br><span class="line">![<span class="string">front-end-logo-1</span>](<span class="link">http://ol3kbaay9.bkt.clouddn.com/front-end-logo-1.jpg</span>)</span><br><span class="line">![<span class="string">java-c-vs123</span>](<span class="link">http://ol3kbaay9.bkt.clouddn.com/java-c-vs123.jpg</span>)</span><br><span class="line">&#123;% endgp %&#125;</span><br></pre></td></tr></table></figure><ul><li>图片展示效果</li></ul><p><code>{\% gp 5-3 \%}</code> 用于设置图片展示效果，参考 <code>theme/next/scripts/tags/group-pictures.js</code> 注释示意图。</p><ul><li>修复图片展示</li></ul><p>博客主页目前可以正常显示上步骤中设置的图片模式效果，但是点击进入后，图片显示效果会丢失，所以需修改<br><code>themes\next\source\css\_common\components\tags\group-pictures.styl</code> 文件中的以下样式</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page-post-detail</span> <span class="selector-class">.post-body</span> <span class="selector-class">.group-picture-column</span> &#123;</span><br><span class="line">  <span class="comment">// float: none;</span></span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="comment">// width: auto !important;</span></span><br><span class="line">  <span class="selector-tag">img</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span> auto; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="博文底部标签样式"><a href="#博文底部标签样式" class="headerlink" title="博文底部标签样式"></a>博文底部标签样式</h3><ul><li>将博文底部的表情样式，从改为 <code>#</code> 改为 <code>Font Awesome</code> 图标的标签样式。</li><li>修改模板 <code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将其中的 <code>#</code> 换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>。</li></ul><h3 id="首页-简历和相册分类"><a href="#首页-简历和相册分类" class="headerlink" title="首页-简历和相册分类"></a>首页-简历和相册分类</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><ul><li>Create</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span>resume </span><br><span class="line">hexo new<span class="built_in"> page </span>album</span><br></pre></td></tr></table></figure><ul><li>Configure</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line"><span class="symbol">  resume:</span> <span class="meta-keyword">/resume/</span> || child</span><br><span class="line"><span class="symbol">  album:</span> /album || picture-o</span><br></pre></td></tr></table></figure><blockquote><p>在简历和相册对应的 <code>index.md</code> 文件头部添加 <code>comments: false</code> 可以关闭评论列表。</p></blockquote><h4 id="简历配置"><a href="#简历配置" class="headerlink" title="简历配置"></a>简历配置</h4><p>除了用 <code>markdown</code> 书写个人简历外，也可以用 <code>HTML</code> 书写个人简历。此时，需要在文件头部添加不进行渲染指令。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">layout:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">个人简历</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">&lt;!doctype</span> <span class="string">html&gt;</span></span><br><span class="line"><span class="string">&lt;html</span> <span class="string">lang="zh"&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;!--</span> <span class="string">resume</span> <span class="string">code</span> <span class="string">here--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="相册配置"><a href="#相册配置" class="headerlink" title="相册配置"></a>相册配置</h4><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><ul><li><a href="https://timding.top/2017/09/18/Hexo-NexT-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%9B%B8%E5%86%8C-%E4%BA%8C/" target="_blank" rel="noopener">Next Theme 相册配置</a> </li><li><a href="https://juejin.im/post/5b8bc953518825284910dcdd" target="_blank" rel="noopener">搭建Hexo 相册</a></li></ul><h5 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h5><ul><li>在 <code>album</code> 目录下添加 <code>assets/empty.jpg</code>，作为图片展示的占位图。</li><li>本相册配置中是将图片存放在 <code>github</code>的，其访问链接是 <code>https://raw.githubusercontent.com</code> 开头的，并不是图片的存储地址。因此，<code>album/ins.js</code> 中图片链接地址为</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var minSrc</span> = <span class="string">'https://raw.githubusercontent.com/lbs0912/HexoBlog/master/source/album/photos_configure/min_photos/'</span> + data.link[i];</span><br><span class="line"></span><br><span class="line"><span class="attribute">var src</span> = <span class="string">'https://raw.githubusercontent.com/lbs0912/HexoBlog/master/source/album/photos_configure/photos/'</span> + data.link[i];</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul><li>记录，成为更好的自己。</li><li>本博客全部配置信息可在 <a href="https://github.com/lbs0912/BlogSpace" target="_blank" rel="noopener">BlogSpace | lbs0912-github</a> 查看。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;记录 &lt;code&gt;Hexo Blog&lt;/code&gt; 的搭建与配置&lt;/li&gt;
&lt;li&gt;对 &lt;code&gt;Next&lt;/code&gt; 主题进行定制，添加搜索，统计，置顶，加密阅读，自定义CSS等&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Front-End Develop" scheme="https://lbs0912.github.io/categories/Front-End-Develop/"/>
    
    
      <category term="Front-End Developer" scheme="https://lbs0912.github.io/tags/Front-End-Developer/"/>
    
      <category term="Hexo" scheme="https://lbs0912.github.io/tags/Hexo/"/>
    
      <category term="Next" scheme="https://lbs0912.github.io/tags/Next/"/>
    
      <category term="Blog" scheme="https://lbs0912.github.io/tags/Blog/"/>
    
  </entry>
  
</feed>
